package Reports;

import ar.com.fdvs.dj.core.DynamicJasperHelper;
import ar.com.fdvs.dj.core.layout.ClassicLayoutManager;
import ar.com.fdvs.dj.domain.DynamicReport;
import com.jfoenix.controls.JFXButton;
import com.jfoenix.controls.JFXCheckBox;
import com.jfoenix.controls.JFXComboBox;
import com.jfoenix.controls.JFXDatePicker;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Modality;
import javafx.stage.Stage;
import models.*;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.export.ooxml.JRXlsxExporter;
import net.sf.jasperreports.export.SimpleExporterInput;
import net.sf.jasperreports.export.SimpleOutputStreamExporterOutput;
import net.sf.jasperreports.export.SimplePdfExporterConfiguration;
import net.sf.jasperreports.view.JasperViewer;
import org.controlsfx.control.textfield.TextFields;
import org.controlsfx.dialog.ProgressDialog;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.Transaction;

import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.Date;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.*;
import java.util.logging.Logger;
import java.util.stream.Collectors;

import static java.time.temporal.TemporalAdjusters.firstDayOfMonth;
import static java.time.temporal.TemporalAdjusters.lastDayOfMonth;

public class ReportesController implements Initializable {

    ReportesController reportesController;
    Logger logger = Logger.getLogger(this.getClass().getName());
    Task tarea;
    @FXML
    private Label label_title;
    @FXML
    private Pane boxPane;
    @FXML
    private JFXCheckBox checkUnidad;
    @FXML
    private JFXCheckBox checkUMC;
    @FXML
    private JFXCheckBox checkRV;
    @FXML
    private JFXCheckBox checkPresup;
    @FXML
    private JFXCheckBox checkCertif;
    @FXML
    private JFXCheckBox ceckCertifmes;
    @FXML
    private JFXCheckBox checkPlan;
    @FXML
    private JFXCheckBox checkPresup2;
    @FXML
    private JFXCheckBox checkAgrup;
    @FXML
    private JFXCheckBox checlRecu;
    @FXML
    private JFXCheckBox checkAmbMonedas;
    @FXML
    private JFXCheckBox checkMateriales;
    @FXML
    private JFXCheckBox checkDesglose;
    @FXML
    private JFXCheckBox checkMano;
    @FXML
    private JFXCheckBox checkEquipo;
    @FXML
    private JFXComboBox<String> comboObras;
    @FXML
    private JFXComboBox<String> comboZonas;
    @FXML
    private JFXComboBox<String> comboObjetos;
    @FXML
    private JFXComboBox<String> comboNivel;
    @FXML
    private JFXComboBox<String> comboEspecialidades;
    @FXML
    private JFXComboBox<String> comboSubespecialidades;
    @FXML
    private JFXComboBox<String> comboEmpresas;
    @FXML
    private JFXDatePicker pickerDesde;
    @FXML
    private JFXDatePicker pickerHasta;
    @FXML
    private JFXComboBox<String> comboConfecionado;
    @FXML
    private JFXComboBox<String> comboRevisado;
    @FXML
    private JFXComboBox<String> comboAprovado;
    @FXML
    private JFXCheckBox checkSubUniq;
    @FXML
    private JFXCheckBox checkEspUniq;
    @FXML
    private JFXCheckBox checkNivUniq;
    @FXML
    private JFXCheckBox checkObjUniq;
    @FXML
    private JFXComboBox<String> comboBrigada;
    @FXML
    private JFXComboBox<String> comboGrupo;
    @FXML
    private JFXComboBox<String> comboCuadrilla;
    @FXML
    private JFXCheckBox checkSalarios;
    @FXML
    private JFXCheckBox tipoUO;
    @FXML
    private JFXCheckBox tipoRV;
    @FXML
    private JFXCheckBox tipoTotales;
    private StringBuilder query;
    private StringBuilder qmateriales;
    private StringBuilder qmano;
    private StringBuilder qequipos;
    @FXML
    private JFXButton btnClose;
    @FXML
    private JFXCheckBox checkExp;
    private int niveles;
    private Integer empresaId;
    private boolean ifDesglose;
    private String[] partObras;
    private String[] partZonas;
    private String[] partObj;
    private String[] partNiv;
    private String[] partEsp;
    private String[] partSub;
    private String[] partEmp;
    private String[] partBrig;
    private String[] partGrup;
    private String[] partCuad;
    private String subQObr = "";
    private String subQZon = "";
    private String subQObj = "";
    private String subQNiv = "";
    private String subQEsp = "";
    private String subQSub = "";
    private String subQEmp = "";
    private String subQBrig = "";
    private String subQBrigM = "";
    private String subQGrup = "";
    private String subQGrupM = "";
    private String subQCuad = "";
    private String subQCuadM = "";
    private String subQObrM = "";
    private String subQZonM = "";
    private String subQObjM = "";
    private String subQNivM = "";
    private String subQEspM = "";
    private String subQSubM = "";
    private String subQEmpM = "";
    private String dataVal;
    private Map parametros;
    private LocalDate date;
    private Empresa empresa;
    private Obra obra;
    private ArrayList<UOReportModel> uoReportModelArrayList;
    private ArrayList<RenglonVarianteReportModel> renglonVarianteReportModelArrayList;
    private ArrayList<RenglonVarianteReportModelExtend> renglonVarianteReportModelExtendArrayList;
    private ArrayList<RenglonVarianteReportModelRV> renglonVarianteReportModelRVArrayList;
    private ArrayList<DatosCertificacionOrigen> datosCertificacionOrigenArrayList;
    private ArrayList<DatosCertificacionOrigenUORV> datosCertificacionOrigenUORVArrayList;
    private ArrayList<TotalReportModel> totalReportModelArrayList;
    private ArrayList<TotalReportCertModel> totalReportCertModelArrayList;
    private ArrayList<DatosCuantitativaModel> datosCuantitativaModelArrayList;

    private ArrayList<CuantitativaModel> cuantitativaModelArrayList;
    private ArrayList<CuantitativaModelToCERT> cuantitativaModelToCERTArrayList;
    private String Subquery = "";
    private String subqueryCostMateriales = "";
    private String subqueryCostMano = "";
    private String subqueryCostEquipo = "";
    private String Subquery1 = "";
    private String select = "";
    private String group = "";
    private String groupM = "";
    private String order = " ";
    private String orderm = "";
    private ArrayList<PresupuestoUO> presupuestoUOArrayList;
    private ArrayList<PresupuestoUORVN> presupuestoUORVNArrayList;
    private ArrayList<PresupuestoUORVNExtend> presupuestoUORVNExtendArrayList;
    private ArrayList<CertificacionOrigenUO> certificacionOrigenUOArrayList;
    private ArrayList<CertificacionOrigenUOinRV> certificacionOrigenUOinRVArrayList;
    private ArrayList<DatosPlanificacionMesUO> datosPlanificacionMesUOArrayList;
    private DatosPlanificacionMesUO datosPlanificacionMesUO;
    private ArrayList<PlanificacionMesUO> planificacionMesUOArrayList;
    private PlanificacionMesUO planificacionMesUO;
    private ArrayList<DatosPlanificacionMesUORV> planificacionMesUORVArrayList;
    private DatosPlanificacionMesUORV datosPlanificacionMesUORV;
    private ArrayList<PlanificacionMesUOinRV> planificacionMesUOinRVArrayList;
    private PlanificacionMesUOinRV planificacionMesUOinRV;
    private ArrayList<DatosCuantitativaUOGRUPModel> datosCuantitativaUOGRUPModelArrayList;
    private ArrayList<CuantitativaUOGROUPModel> cuantitativaUOGROUPModelArrayList;
    private HashSet<String> temp;
    private java.sql.Date desdeDate;
    private java.sql.Date hastaData;
    private BuildDynamicReport bdr;
    private CalForReport cfr;
    private String intervalo = "";
    private ArrayList<SalarioReportModel> salarioReportModelArrayList;
    private ArrayList<SalarioUORVReportModel> salarioUORVReportModelArrayList;
    private ArrayList<CertificoModel> certificoModelArrayList;
    private List<ConveniosReportModel> conveniosReportModelArrayList;
    @FXML
    private JFXButton clearZona;
    @FXML
    private JFXButton clearObj;
    @FXML
    private JFXButton clearNiv;
    @FXML
    private JFXButton clearEsp;
    @FXML
    private JFXButton clearSub;
    @FXML
    private JFXButton clearEmp;
    @FXML
    private JFXButton clearGrup;
    @FXML
    private JFXButton clearBrig;
    @FXML
    private JFXButton clearCuad;
    @FXML
    private Label indication;
    private String timeRestrictCert;
    private Runtime garbage;
    private ReportProjectStructureSingelton reportProjectStructureSingelton;
    @FXML
    private JFXComboBox<String> othersOptions;
    @FXML
    private JFXCheckBox checkEsp;
    private ProgressDialog stage;
    private boolean myFlag;
    private ArrayList<ObraRengVReport> obraRengVReportArrayList;
    private StringBuilder cantInsumos;
    private StringBuilder cantRecursos;
    private ArrayList<DatosCuantitativaModelVGES> datosCuantitativaModelVGESArrayList;
    private ArrayList<ImpactoReportModel> impactoReportModelArrayList;
    private String startWhere = "";
    private String selectB = "";
    private String selectG = "";
    private String selectC = "";

    private List<Firmas> firmasList;
    private ObservableList<String> firmasObservableList;

    @FXML
    private JFXCheckBox checkTable;

    @FXML
    private JFXCheckBox checkFecha;

    @FXML
    private JFXButton clearBrigada;

    @FXML
    private JFXButton clearGrupo;

    @FXML
    private JFXButton clearCuadrilla;

    @FXML
    private JFXButton clearEspecific;


    public ObservableList<String> getFirmasList() {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            firmasList = new ArrayList<>();
            firmasObservableList = FXCollections.observableArrayList();

            firmasList = session.createQuery("FROM Firmas ").getResultList();
            firmasObservableList.addAll(firmasList.parallelStream().map(firmas -> firmas.getName().trim()).collect(Collectors.toList()));

            tx.commit();
            session.close();
            return firmasObservableList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return FXCollections.emptyObservableList();
    }


    private StringBuilder qhhCert;

    public void handleZonasEmpresa(ActionEvent event) {
        for (Obra obra1 : reportProjectStructureSingelton.obraArrayList) {
            System.out.println(obra1.toString().trim());
        }
        Obra obr = reportProjectStructureSingelton.obraArrayList.parallelStream().filter(item -> item.toString().trim().equals(comboObras.getValue().trim())).findFirst().get();
        comboZonas.getItems().clear();
        comboEmpresas.getItems().clear();
        comboZonas.getItems().setAll(reportProjectStructureSingelton.getZonasList(obr.getId()));
        // comboZonas.setEditable(true);
        TextFields.bindAutoCompletion(comboZonas.getEditor(), comboZonas.getItems()).setPrefWidth(comboZonas.getPrefWidth());
        comboEmpresas.getItems().setAll(reportProjectStructureSingelton.getEmpresaList(obr.getId()));
        //comboEmpresas.setEditable(true);
        TextFields.bindAutoCompletion(comboEmpresas.getEditor(), comboEmpresas.getItems()).setPrefWidth(comboEmpresas.getPrefWidth());
    }

    private boolean table;

    public void handleObjetos(ActionEvent event) {
        if (!comboZonas.getValue().contentEquals("Todas")) {
            comboObjetos.getItems().clear();
            Zonas zonas = reportProjectStructureSingelton.zonasArrayList.parallelStream().filter(item -> item.toString().trim().equals(comboZonas.getValue().trim())).findFirst().get();
            comboObjetos.getItems().setAll(reportProjectStructureSingelton.getObjetosList(zonas.getId()));
        } else if (comboZonas.getValue().contentEquals("Todas")) {
            comboObjetos.getItems().clear();
            comboObjetos.getItems().add("Todos");
        }
        //comboObjetos.setEditable(true);
        TextFields.bindAutoCompletion(comboObjetos.getEditor(), comboObjetos.getItems()).setPrefWidth(comboObjetos.getPrefWidth());
    }

    public void handleNivel(ActionEvent event) {
        if (!comboObjetos.getValue().contentEquals("Todos")) {
            comboNivel.getItems().clear();
            Objetos objetos = reportProjectStructureSingelton.objetosArrayList.parallelStream().filter(item -> item.toString().trim().equals(comboObjetos.getValue().trim())).findFirst().get();
            comboNivel.getItems().setAll(reportProjectStructureSingelton.getNivelList(objetos.getId()));
        } else if (comboObjetos.getValue().contentEquals("Todos")) {
            comboNivel.getItems().clear();
            comboNivel.getItems().add("Todos");
        }
        //comboNivel.setEditable(true);
        TextFields.bindAutoCompletion(comboNivel.getEditor(), comboNivel.getItems()).setPrefWidth(comboNivel.getPrefWidth());
    }

    public void handleBrigadaToEmpresa(ActionEvent event) {
        if (!comboEmpresas.getValue().contentEquals("Todas")) {
            comboBrigada.setVisible(true);
            clearBrig.setVisible(true);
            Empresaconstructora empresaconstructora = reportProjectStructureSingelton.empresaconstructoraArrayList.parallelStream().filter(item -> item.toString().trim().equals(comboEmpresas.getValue().trim())).findFirst().get();
            comboBrigada.getItems().setAll(reportProjectStructureSingelton.getBrigadaStringObservableList(empresaconstructora.getId()));
        }
        // comboBrigada.setEditable(true);
        TextFields.bindAutoCompletion(comboBrigada.getEditor(), comboBrigada.getItems()).setPrefWidth(comboBrigada.getPrefWidth());
    }

    public void handleGrupoToBrigada(ActionEvent event) {
        if (!comboBrigada.getValue().contentEquals("Todas")) {
            comboGrupo.setVisible(true);
            clearGrup.setVisible(true);
            Brigadaconstruccion brigadaCont = reportProjectStructureSingelton.brigadaconstruccionArrayList.parallelStream().filter(brg -> brg.toString().trim().equals(comboBrigada.getValue().trim())).findFirst().orElse(null);
            comboGrupo.getItems().setAll(reportProjectStructureSingelton.getGrupoStringObservableList(brigadaCont.getId()));
        }
        //comboGrupo.setEditable(true);
        TextFields.bindAutoCompletion(comboGrupo.getEditor(), comboGrupo.getItems()).setPrefWidth(comboGrupo.getPrefWidth());
    }

    public void handleCuadrillaToGrupo(ActionEvent event) {
        if (!comboGrupo.getValue().contentEquals("Todas")) {
            comboCuadrilla.setVisible(true);
            clearCuad.setVisible(true);
            Grupoconstruccion grupoconst = reportProjectStructureSingelton.grupoconstruccionArrayList.parallelStream().filter(brg -> brg.toString().trim().equals(comboGrupo.getValue().trim())).findFirst().orElse(null);
            comboCuadrilla.getItems().setAll(reportProjectStructureSingelton.getCuadrillaStringObservableList(grupoconst.getId()));
        }
        //comboCuadrilla.setEditable(true);
        TextFields.bindAutoCompletion(comboCuadrilla.getEditor(), comboCuadrilla.getItems()).setPrefWidth(comboCuadrilla.getPrefWidth());
    }

    public Task createTime(Integer val) {
        return new Task() {
            @Override
            protected Object call() throws Exception {

                for (int i = 0; i < val; i++) {
                    Thread.sleep(val / 2);
                    updateProgress(i + 1, val);
                }
                return true;
            }
        };
    }

    public Task createTimeMesage() {
        return new Task() {
            @Override
            protected Object call() throws Exception {

                //for (int i = 0; i < ; i++) {
                Thread.sleep(2000);
                //  updateProgress(i + 1, val);
                //}
                return true;
            }
        };
    }

    public void handleSubespecilaidad(ActionEvent event) {
        if (!comboEspecialidades.getValue().contentEquals("Todas")) {
            comboSubespecialidades.getItems().clear();
            Especialidades especialidades = reportProjectStructureSingelton.especialidadesArrayList.parallelStream().filter(item -> item.toString().trim().equals(comboEspecialidades.getValue().trim())).findFirst().get();
            comboSubespecialidades.getItems().setAll(reportProjectStructureSingelton.getSubespecialidadesObservableList(especialidades.getId()));
        } else if (comboEspecialidades.getValue().contentEquals("Todas")) {
            comboSubespecialidades.getItems().clear();
            comboSubespecialidades.getItems().add("Todas");
        }
        //comboSubespecialidades.setEditable(true);
        TextFields.bindAutoCompletion(comboSubespecialidades.getEditor(), comboSubespecialidades.getItems()).setPrefWidth(comboSubespecialidades.getPrefWidth());
    }

    private static double getCostSum(List<DatosCuantitativaGenreralModel> datosList, DatosCuantitativaGenreralModel datosCuantitativaGenreralModel) {
        return datosList.parallelStream().filter(item -> item.getCodigo().equals(datosCuantitativaGenreralModel.getCodigo())).map(DatosCuantitativaGenreralModel::getCostoTotal).reduce(0.0, Double::sum);
    }

    private static double getCostSumCert(List<DatosCuantitativaGenreralModelCertificacion> datosList, DatosCuantitativaGenreralModelCertificacion datosCuantitativaGenreralModel) {
        return datosList.parallelStream().filter(item -> item.getCodigo().equals(datosCuantitativaGenreralModel.getCodigo())).map(DatosCuantitativaGenreralModelCertificacion::getCostoTotal).reduce(0.0, Double::sum);
    }

    private String SubQString;

    private void createCertificacionOrigenUORVMethod() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        niveles = 0;

        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            niveles = 1;

        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            //idZon = Integer.parseInt(partZonas[0]);

            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            subQObj = " ";
            niveles = 3;
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;

            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            subQNiv = " ";
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;

            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            subQEsp = " ";
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            subQSub = " ";
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

        }

        if (comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {
            subQBrig = " ";
            niveles = 7;
        } else if (comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
            partBrig = comboBrigada.getValue().split(" - ");

            subQBrig = " AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;
            niveles = 7;

        }

        if (comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todos")) {
            subQGrup = " ";
            niveles = 8;
        } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todos")) {
            partGrup = comboGrupo.getValue().split(" - ");

            subQGrup = " AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
            niveles = 8;
        }

        if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
            subQCuad = " ";
            niveles = 9;
        } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
            partCuad = comboCuadrilla.getValue().split(" - ");

            subQCuad = " AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
            niveles = 9;
        }

        if (niveles <= 6) {

            Subquery = "SELECT  ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(ur.cantRv * cert.cantidad / uo.cantidad ) as plCantSu, SUM(cert.costmaterial) as cmater, SUM(cert.costmano) as cmano, SUM(cert.costequipo) as ccequ, rv.codigo,  rv.descripcion, rv.um, rv.costomat, rv.costmano, rv.costequip, rv.id  FROM Unidadobra uo INNER JOIN Unidadobrarenglon ur ON ur.unidadobraId = uo.id INNER JOIN Certificacion cert ON ur.unidadobraId  = cert.unidadobraId INNER JOIN Renglonvariante rv ON ur.renglonvarianteId = rv.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(bajo.cantidad * cert.cantidad/ uo.cantidad) as plCant, SUM(cert.costmano) as cost, bajo.tipo, bajo.idSuministro FROM Unidadobra uo INNER JOIN Bajoespecificacion bajo ON bajo.unidadobraId = uo.id INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN  Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id AND";
            qmateriales.append(Subquery1);

            /*
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cuo.cantidad), SUM(cuo.cmateriales), SUM(cuo.cmano), SUM(cuo.cequipo), rv.codigo,  rv.descripcion, rv.um, rv.costomat, rv.costmano, rv.costequip, rv.id FROM Unidadobra uo INNER JOIN Certificacionrecuo cuo ON uo.id = cuo.unidadobraId INNER JOIN Renglonvariante rv ON cuo.renglonId = rv.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um,  SUM(cuo.cantidad), SUM(cuo.costo), cuo.tipo, cuo.recursoId FROM Unidadobra uo INNER JOIN  Certificacionrecuo cuo ON uo.id = cuo.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            qmateriales.append(Subquery1);
             */
            query.append(subQObr);

            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            qmateriales.append(subQObr);
            if (subQZon == null || subQZon.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                qmateriales.append(subQEmp);
            }
        }


        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        if (othersOptions.getValue() != null && othersOptions.getValue().equals("Inversionista")) {
            System.out.println(othersOptions.getValue());
            parametros.put("inver", "Cliente: " + obra.getInversionistaByInversionistaId().getCodigo() + " " + obra.getInversionistaByInversionistaId().getDescripcion());
        } else {
            parametros.put("inver", " ");
        }

        if (checkFecha.isSelected()) {
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        } else {
            parametros.put("fecha", " ");
        }
        int templete = 0;
        if (comboConfecionado.getValue() == null) {
            templete = 1;
            parametros.put("reportName", "Certificación Origen por Unidades de Obra");
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");

        } else if (comboConfecionado.getValue() != null) {
            templete = 2;
            String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            parametros.put("empresa", empresa.getNombre());
            parametros.put("reportName", "Certificación Origen por Unidades de Obra");
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");
            parametros.put("conf", "Confeccionado: " + confe);
            parametros.put("rev", "Revisado: " + rev);
            parametros.put("aprub", "Aprobado: " + apro);
        }

        table = false;
        if (checkTable.isSelected() == false) {
            table = true;
        }

        query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, rv.codigo,  rv.descripcion, rv.um, rv.costomat, rv.costmano, rv.costequip, rv.id");
        qmateriales.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, bajo.tipo, bajo.idSuministro");


        try {
            datosCertificacionOrigenUORVArrayList = new ArrayList<>();
            //datosCertificacionOrigenUORVArrayList = cfr.getDatosCERTIFORIGENUPDATE(reportesController, query.toString().trim(), qmateriales.toString().trim(), niveles, obra.getId());
            datosCertificacionOrigenUORVArrayList = cfr.getDatosCertificacionOrigenUOinRVArrayList(reportesController, query.toString().trim(), qmateriales.toString().trim(), niveles, obra.getId());

            if (datosCertificacionOrigenUORVArrayList.size() != 0) {

                certificacionOrigenUOinRVArrayList = new ArrayList<>();
                certificacionOrigenUOinRVArrayList = cfr.createReportesCOUORVFormater(reportesController, datosCertificacionOrigenUORVArrayList, obra);
                tarea = createTime(50);
                stage = new ProgressDialog(tarea);
                stage.setContentText("Preparando el reporte...");
                stage.setTitle("Espere...");
                new Thread(tarea).start();
                stage.showAndWait();

                if (niveles <= 6) {
                    certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getIdEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
                } else if (niveles == 7) {
                    certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getBrigada).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getIdEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
                } else if (niveles == 8) {
                    certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getBrigada).thenComparing(CertificacionOrigenUOinRV::getGrupo).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getIdEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
                } else if (niveles == 9) {
                    certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getBrigada).thenComparing(CertificacionOrigenUOinRV::getGrupo).thenComparing(CertificacionOrigenUOinRV::getCuadrilla).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getIdEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
                }


                for (CertificacionOrigenUOinRV certificacionOrigenUOinRV : certificacionOrigenUOinRVArrayList) {
                    System.out.println(certificacionOrigenUOinRV.getCostTotalCertRV());
                }

                List<ConceptosReporte> reportFormaters = new ArrayList<>();
                for (CertificacionOrigenUOinRV totalReportFormater : certificacionOrigenUOinRVArrayList) {
                    reportFormaters.addAll(totalReportFormater.getBodyConceptos());
                }
                List<ResumenCostosList> resumenList = new ArrayList<>();
                resumenList = getResmenListReport(obra, reportFormaters);
                parametros.put("resumen", resumenList);

                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createCertificacionOrigenUORV(reportesController, niveles, templete, table);
                    JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOinRVArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createCertificacionOrigenUORV(reportesController, niveles, templete, table);
                    JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOinRVArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);

                }

            } else {

                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("No exiten certificaciones en esta Obra");
                alert.showAndWait();
            }

        } catch (Exception ex) {
            ex.printStackTrace();

            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();


        }

    }

    private void createReportCuantitativaUO() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        niveles = 0;

        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " uo.id as idUO , uo.codigo as codeUO, uo.descripcion as descUO, uo.um as umUO, uo.cantidad as cantUO, rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = " uo.id as idUO , uo.codigo as codeUO, uo.descripcion as descUO, uo.um as umUO, uo.cantidad as cantUO,  SUM(DISTINCT bajo.cantidad) as cantidad, SUM(DISTINCT bajo.costo) as costo, bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE uor.conMat = '0' AND ";

        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " uo.id as idUO , uo.codigo as codeUO, uo.descripcion as descUO, uo.um as umUO, uo.cantidad as cantUO, rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND  ";
            Subquery1 = null;
            System.out.println("Entro a esta parte");
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = " uo.id as idUO , uo.codigo as codeUO, uo.descripcion as descUO, uo.um as umUO, uo.cantidad as cantUO,  rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND  ";
            Subquery1 = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " uo.id as idUO , uo.codigo as codeUO, uo.descripcion as descUO, uo.um as umUO, uo.cantidad as cantUO, rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND  ";
            Subquery1 = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = null;
            Subquery1 = " uo.id as idUO , uo.codigo as codeUO, uo.descripcion as descUO, uo.um as umUO, uo.cantidad as cantUO,  SUM(DISTINCT bajo.cantidad) as cantidad, SUM(DISTINCT bajo.costo) as costo, bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE uor.conMat = '0' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " uo.id as idUO , uo.codigo as codeUO, uo.descripcion as descUO, uo.um as umUO, uo.cantidad as cantUO,  rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND  ";
            Subquery1 = " uo.id as idUO , uo.codigo as codeUO, uo.descripcion as descUO, uo.um as umUO, uo.cantidad as cantUO,  SUM(DISTINCT bajo.cantidad) as cantidad, SUM(DISTINCT bajo.costo) as costo, bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE uor.conMat = '0' AND  ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " uo.id as idUO , uo.codigo as codeUO, uo.descripcion as descUO, uo.um as umUO, uo.cantidad as cantUO,  rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND  ";
            Subquery1 = " uo.id as idUO , uo.codigo as codeUO, uo.descripcion as descUO, uo.um as umUO, uo.cantidad as cantUO,  SUM(DISTINCT bajo.cantidad) as cantidad, SUM(DISTINCT bajo.costo) as costo, bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE uor.conMat = '0' AND ";
        }

        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 1;
        }

        if (comboObras != null && comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "  GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";
            niveles = 2;


        } else if (comboObras != null && comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "  GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;


            niveles = 2;
        }

        if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos") && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            if (comboZonas.getValue().trim().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            }

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "  GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";
            niveles = 3;

        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos") && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {

            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "  GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;

            niveles = 3;

        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            if (comboZonas.getValue().trim().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            }
            if (comboObjetos.getValue().trim().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            }

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "  GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";
            niveles = 4;

        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "  GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";
            niveles = 4;

        }

        if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            if (comboZonas.getValue().trim().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            }
            if (comboObjetos.getValue().trim().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            }
            if (comboNivel.getValue().trim().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else {
                //idObj = Integer.parseInt(partObj[0]);
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            }
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "  GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";
            niveles = 5;


        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "  GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 5;
        }

        if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            if (comboZonas.getValue().trim().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            }
            if (comboObjetos.getValue().trim().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            }
            if (comboNivel.getValue().trim().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            }
            if (comboEspecialidades.getValue().trim().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            }

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "  GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 6;
        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "  GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";


            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 1;
        }

        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEsp == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }


        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null && subQEsp == null && subQSub == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && subQEsp == null && subQSub == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null && subQSub == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQNivM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQNivM);
                qmateriales.append(subQEspM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQNivM);
                qmateriales.append(subQEspM);
                qmateriales.append(subQSubM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }
        } else if (subQObr != null && subQEmp != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQEmpM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }
        }
        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 0;
            query = new StringBuilder();
            qmateriales = new StringBuilder();

            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    query.append(subQEsp);
                }
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    qmateriales.append(subQEspM);
                }
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }
            niveles = 15;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 0;
            query = new StringBuilder();
            qmateriales = new StringBuilder();

            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);

                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    query.append(subQZon);

                }

                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    query.append(subQEsp);
                }
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    qmateriales.append(subQZonM);
                }
                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    qmateriales.append(subQEspM);
                }
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }
            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 0;
            query = new StringBuilder();
            qmateriales = new StringBuilder();

            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);

                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    query.append(subQZon);

                }

                if (!comboObjetos.getValue().contentEquals("Todos")) {
                    partObj = comboObjetos.getValue().split(" - ");
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    query.append(subQObj);
                }

                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    query.append(subQEsp);
                }
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    qmateriales.append(subQZonM);
                }
                if (!comboObjetos.getValue().contentEquals("Todos")) {
                    partObj = comboObjetos.getValue().split(" - ");
                    subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    qmateriales.append(subQObjM);
                }

                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    qmateriales.append(subQEspM);
                }
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }
            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 0;
            query = new StringBuilder();
            qmateriales = new StringBuilder();

            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);

                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    query.append(subQZon);

                }

                if (!comboObjetos.getValue().contentEquals("Todos")) {
                    partObj = comboObjetos.getValue().split(" - ");
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    query.append(subQObj);
                }
                if (!comboNivel.getValue().contentEquals("Todos")) {
                    partNiv = comboNivel.getValue().split(" - ");
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                    query.append(subQNiv);
                }

                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    query.append(subQEsp);
                }
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    qmateriales.append(subQZonM);
                }
                if (!comboObjetos.getValue().contentEquals("Todos")) {
                    partObj = comboObjetos.getValue().split(" - ");
                    subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    qmateriales.append(subQObjM);
                }
                if (!comboNivel.getValue().contentEquals("Todos")) {
                    partNiv = comboNivel.getValue().split(" - ");
                    subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                    qmateriales.append(subQNivM);
                }

                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    qmateriales.append(subQEspM);
                }
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 0;
            query = new StringBuilder();
            qmateriales = new StringBuilder();

            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    query.append(subQEsp);
                }
                if (!comboSubespecialidades.getValue().contentEquals("Todas")) {
                    partSub = comboSubespecialidades.getValue().split(" - ");
                    subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                    ;
                    ;
                    query.append(subQSub);
                }
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);

                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    qmateriales.append(subQEspM);
                }
                if (!comboSubespecialidades.getValue().contentEquals("Todas")) {
                    partSub = comboSubespecialidades.getValue().split(" - ");
                    subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                    ;
                    ;
                    qmateriales.append(subQSubM);
                }
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }
            niveles = 156;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 0;
            query = new StringBuilder();
            qmateriales = new StringBuilder();

            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    query.append(subQZon);

                }
                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    query.append(subQEsp);
                }
                if (!comboSubespecialidades.getValue().contentEquals("Todas")) {
                    partSub = comboSubespecialidades.getValue().split(" - ");
                    subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                    ;
                    ;
                    query.append(subQSub);
                }
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    qmateriales.append(subQZonM);
                }
                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    qmateriales.append(subQEspM);
                }
                if (!comboSubespecialidades.getValue().contentEquals("Todas")) {
                    partSub = comboSubespecialidades.getValue().split(" - ");
                    subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                    ;
                    ;
                    qmateriales.append(subQSubM);
                }
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }
            niveles = 1256;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 0;
            query = new StringBuilder();
            qmateriales = new StringBuilder();

            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    query.append(subQZon);

                }
                if (!comboObjetos.getValue().contentEquals("Todos")) {
                    partObj = comboObjetos.getValue().split(" - ");
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    query.append(subQObj);
                }
                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    query.append(subQEsp);
                }
                if (!comboSubespecialidades.getValue().contentEquals("Todas")) {
                    partSub = comboSubespecialidades.getValue().split(" - ");
                    subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                    ;
                    ;
                    query.append(subQSub);
                }
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    qmateriales.append(subQZonM);
                }
                if (!comboObjetos.getValue().contentEquals("Todos")) {
                    partObj = comboObjetos.getValue().split(" - ");
                    subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    qmateriales.append(subQObjM);
                }
                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    qmateriales.append(subQEspM);
                }
                if (!comboSubespecialidades.getValue().contentEquals("Todas")) {
                    partSub = comboSubespecialidades.getValue().split(" - ");
                    subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                    ;
                    ;
                    qmateriales.append(subQSubM);
                }
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }
            niveles = 12356;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc , eoe.cpo , eoe.cpe, eoe.cet, eoe.otra, rec.id  ";
            groupM = "GROUP BY uo.id, uo.codigo, uo.descripcion, uo.um, uo.cantidad, bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, uo.id, bajo.tipo ASC";

            niveles = 0;
            query = new StringBuilder();
            qmateriales = new StringBuilder();

            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    query.append(subQZon);

                }
                if (!comboObjetos.getValue().contentEquals("Todos")) {
                    partObj = comboObjetos.getValue().split(" - ");
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    query.append(subQObj);
                }
                if (!comboNivel.getValue().contentEquals("Todos")) {
                    partNiv = comboNivel.getValue().split(" - ");
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                    query.append(subQNiv);
                }
                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    query.append(subQEsp);
                }
                if (!comboSubespecialidades.getValue().contentEquals("Todas")) {
                    partSub = comboSubespecialidades.getValue().split(" - ");
                    subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                    ;
                    ;
                    query.append(subQSub);
                }
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                if (!comboZonas.getValue().contentEquals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    qmateriales.append(subQZonM);
                }
                if (!comboObjetos.getValue().contentEquals("Todos")) {
                    partObj = comboObjetos.getValue().split(" - ");
                    subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    qmateriales.append(subQObjM);
                }
                if (!comboNivel.getValue().contentEquals("Todos")) {
                    partNiv = comboNivel.getValue().split(" - ");
                    subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                    qmateriales.append(subQNivM);
                }
                if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    partEsp = comboEspecialidades.getValue().split(" - ");
                    subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    qmateriales.append(subQEspM);
                }
                if (!comboSubespecialidades.getValue().contentEquals("Todas")) {
                    partSub = comboSubespecialidades.getValue().split(" - ");
                    subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                    ;
                    ;
                    qmateriales.append(subQSubM);
                }
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }
            niveles = 123456;
        }

        ArrayList<DatosCuantitativaUOGRUPModel> tempNoMat = new ArrayList<>();
        ArrayList<DatosCuantitativaUOGRUPModel> temp = new ArrayList<>();

        if (Subquery == null) {
            query = new StringBuilder().append("empty");
        }
        if (Subquery1 == null) {
            qmateriales = new StringBuilder().append(" empty ");
        }

        ifDesglose = false;
        ifDesglose = checkDesglose.isSelected() == true;
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);

        System.out.println("Materiales:" + qmateriales.toString());


        tempNoMat = cfr.getRecursosUOGRUPModel(reportesController, query.toString().trim(), qmateriales.toString().trim(), niveles, ifDesglose, obra);
        temp.addAll(tempNoMat);

        /*temp.forEach(item -> {
            System.out.println(item.getCodigo() + " " + item.getCostoTotal());
        });*/

        datosCuantitativaUOGRUPModelArrayList = new ArrayList<>();
        datosCuantitativaUOGRUPModelArrayList.addAll(temp);

        cuantitativaUOGROUPModelArrayList = new ArrayList<>();
        cuantitativaUOGROUPModelArrayList = cfr.createReportCuantitativaUOGROUPFormater(reportesController, datosCuantitativaUOGRUPModelArrayList, obra);

        if (niveles == 2) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getZona).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        } else if (niveles == 3) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getZona).thenComparing(CuantitativaUOGROUPModel::getObjeto).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        } else if (niveles == 4) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getZona).thenComparing(CuantitativaUOGROUPModel::getObjeto).thenComparing(CuantitativaUOGROUPModel::getNivel).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        } else if (niveles == 15) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getEspecialidad).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        } else if (niveles == 125) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getZona).thenComparing(CuantitativaUOGROUPModel::getEspecialidad).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        } else if (niveles == 1235) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getZona).thenComparing(CuantitativaUOGROUPModel::getObjeto).thenComparing(CuantitativaUOGROUPModel::getEspecialidad).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        } else if (niveles == 12345) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getZona).thenComparing(CuantitativaUOGROUPModel::getObjeto).thenComparing(CuantitativaUOGROUPModel::getNivel).thenComparing(CuantitativaUOGROUPModel::getEspecialidad).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        } else if (niveles == 156) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getEspecialidad).thenComparing(CuantitativaUOGROUPModel::getSubespecialidad).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        } else if (niveles == 1256) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getZona).thenComparing(CuantitativaUOGROUPModel::getEspecialidad).thenComparing(CuantitativaUOGROUPModel::getSubespecialidad).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        } else if (niveles == 12356) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getZona).thenComparing(CuantitativaUOGROUPModel::getObjeto).thenComparing(CuantitativaUOGROUPModel::getEspecialidad).thenComparing(CuantitativaUOGROUPModel::getSubespecialidad).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        } else if (niveles == 123456) {
            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getZona).thenComparing(CuantitativaUOGROUPModel::getObjeto).thenComparing(CuantitativaUOGROUPModel::getNivel).thenComparing(CuantitativaUOGROUPModel::getEspecialidad).thenComparing(CuantitativaUOGROUPModel::getSubespecialidad).thenComparing(CuantitativaUOGROUPModel::getIdUO).thenComparing(CuantitativaUOGROUPModel::getTipo));
        }

        date = LocalDate.now();
        parametros = new HashMap<>();
        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("titlereport", "Cuantitativa");
        parametros.put("image", "templete/logoReport.jpg");


        tarea = createTime(50);
        stage = new ProgressDialog(tarea);
        stage.setContentText("Preparando el reporte...");
        stage.setTitle("Espere...");
        new Thread(tarea).start();
        stage.showAndWait();

        try {
            if (checkAmbMonedas.isSelected() == true) {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportUOGROUP(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaUOGROUPModelArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportUOGROUP(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaUOGROUPModelArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    stage.close();
                    exportarExcel(jp);
                }
            } else {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportUOGROUP(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaUOGROUPModelArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportUOGROUP(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaUOGROUPModelArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    stage.close();
                    exportarExcel(jp);
                }
            }


        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (JRException e) {
            e.printStackTrace();
        }

    }

    private static double getCantSum(List<DatosCuantitativaGenreralModel> datosList, DatosCuantitativaGenreralModel datosCuantitativaGenreralModel) {
        return datosList.parallelStream().filter(item -> item.getCodigo().equals(datosCuantitativaGenreralModel.getCodigo())).map(DatosCuantitativaGenreralModel::getCantidad).reduce(0.0, Double::sum);
    }

    private static double getCantSumCert(List<DatosCuantitativaGenreralModelCertificacion> datosList, DatosCuantitativaGenreralModelCertificacion datosCuantitativaGenreralModel) {
        return datosList.parallelStream().filter(item -> item.getCodigo().equals(datosCuantitativaGenreralModel.getCodigo())).map(DatosCuantitativaGenreralModelCertificacion::getCantidad).reduce(0.0, Double::sum);
    }

    private void createReportToCertifUOGeneralOrigen() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        queryRecursos = new StringBuilder();
        qRecursos = null;
        niveles = 0;
        groupRcRV = null;
        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id WHERE ";
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = null;
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id  INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id WHERE ";
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id  WHERE ";
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id WHERE ";
            qRecursos = null;
        }
        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());

        }


        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            select = "SELECT ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo";

            niveles = 1;
        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                partZonas = comboZonas.getValue().split(" - ");
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ";

            niveles = 2;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {

                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            }

            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            niveles = 3;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }

            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.codigo, rec.descripcion, rec.um, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion,  niv.codigo, niv.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
            niveles = 4;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            }


            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            }

            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion  ";
            niveles = 5;
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, ";

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");
            partSub = comboSubespecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }
            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }
            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEsp = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
            }
            if (comboSubespecialidades.getValue().equals("Todas")) {
                subQSub = " ";
                subQSubM = " ";
            } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
                subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
            }
            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, sub.codigo as codeSub, sub.descripcion as subdesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
            niveles = 6;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT esp.codigo, esp.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion  ";

            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        query.append(subQEsp);
                    }
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(subQEspM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        queryRecursos.append(subQEsp);
                    }
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 15;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT esp.codigo as codEs, esp.descripcion as desEs, zon.codigo, zon.desripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion ";

            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    query.append(subQZon);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQZon);
                    query.append(subQEsp);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo as espCo, esp.descripcion as espDe, zon.codigo as zonC, zon.desripcion as zonD, ob.codigo, ob.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, ob.codigo, ob.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEsp);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo as esC, esp.descripcion as esDes, sub.codigo, sub.descripcion,";
            group = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 156;
        }

        if (comboObjetos.getValue() == null && comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() == null && comboCuadrilla.getValue() == null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
                subQBrigM = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND ctr.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                subQBrigM = " AND ctr.brigadaconstruccion__id = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            }

            select = "SELECT ec.id, ec.codigo as ecCode, ec.descripcion as ecDes, br.codigo, br.descripcion,";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion ";
            groupRcRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion ";
            niveles = 7;

        } else if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() != null && comboCuadrilla.getValue() == null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
                subQBrigM = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND ctr.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                subQBrigM = " AND ctr.brigadaconstruccion__id = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            }

            partGrup = comboGrupo.getValue().split(" - ");
            if (comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " ";
                subQGrupM = " ";
            } else if (!comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " AND ctr.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                subQGrupM = " AND ctr.grupoconstruccion__id = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            }

            select = "SELECT ec.id, ec.codigo as ecCode, ec.descripcion as ecDes, br.codigo as codB, br.descripcion as desB, gr.codigo, gr.descripcion, ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";
            groupRcRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";
            niveles = 8;

        } else if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() != null && comboCuadrilla.getValue() != null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
                subQBrigM = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND ctr.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                subQBrigM = " AND ctr.brigadaconstruccion__id = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            }

            partGrup = comboGrupo.getValue().split(" - ");
            if (comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " ";
                subQGrupM = " ";
            } else if (!comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " AND ctr.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                subQGrupM = " AND ctr.grupoconstruccion__id = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            }

            if (comboCuadrilla.getValue().contentEquals("Todas")) {
                subQCuad = " ";
                subQCuadM = " ";
            } else if (!comboCuadrilla.getValue().contentEquals("Todas")) {
                subQCuad = " AND ctr.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
                subQCuadM = " AND ctr.cuadrillaconstruccion__id = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            }
            select = "SELECT ec.id, ec.codigo as ecCode, ec.descripcion as ecDes, br.codigo as codB, br.descripcion as desB, gr.codigo as grCode, gr.descripcion as grDes, cuad.codigo, cuad.descripcion, ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";
            groupRcRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";
            niveles = 9;

        }

        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(groupM);
                }

            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(" GROUP BY uor.cantRv, uor.renglonvarianteId");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(" GROUP BY uor.cantRv, uor.renglonvarianteId");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQEmp);

                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);

                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEmpM);

                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);

                    qmateriales.append(groupM);
                }

            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && comboEspecialidades.getValue() == null) {

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEmp);

                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);

                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEmpM);

                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);

                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null && subQSub == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEmp);

                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);

                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEmpM);

                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);

                    qmateriales.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQEmp);

                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);

                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);

                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);

                    qmateriales.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(subQEmp);

                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQSub);

                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(subQEmpM);

                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);

                    qmateriales.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup == null && subQObj == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);

                query.append(group);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQEmpM);
                qmateriales.append(subQBrigM);

                qmateriales.append(groupM);
            }
            if (qRecursos != null) {
                queryRecursos.append(select);
                queryRecursos.append(qRecursos);
                queryRecursos.append(subQObr);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQBrig);
                queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");

            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup != null && subQCuad == null && subQObj == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(subQGrup);

                query.append(group);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQEmpM);
                qmateriales.append(subQBrigM);
                qmateriales.append(subQGrupM);

                qmateriales.append(groupM);
            }
            if (qRecursos != null) {
                queryRecursos.append(select);
                queryRecursos.append(qRecursos);
                queryRecursos.append(subQObr);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQBrig);
                queryRecursos.append(subQGrup);
                queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");

            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup != null && subQCuad != null && subQObj == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(subQGrup);
                query.append(subQCuad);

                query.append(group);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQEmpM);
                qmateriales.append(subQBrigM);
                qmateriales.append(subQGrupM);
                qmateriales.append(subQCuadM);

                qmateriales.append(groupM);
            }
            if (qRecursos != null) {
                queryRecursos.append(select);
                queryRecursos.append(qRecursos);
                queryRecursos.append(subQObr);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQBrig);
                queryRecursos.append(subQGrup);
                queryRecursos.append(subQCuad);
                queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
            }
        }

        ArrayList<DatosCuantitativaGenreralModelCertificacion> temp = new ArrayList<>();
        ArrayList<DatosCuantitativaGenreralModelCertificacion> dataToFilter = new ArrayList<>();
        parametros = new HashMap<>();
        Empresaconstructora empresaconstructora = new Empresaconstructora();
        if (comboEmpresas.getValue() == null) {
            parametros.put("empName", " ");
        } else if (comboEmpresas.getValue() != null) {
            int id = reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            empresaconstructora = reportProjectStructureSingelton.getEmpresaconstructora(id);
            parametros.put("empName", "Empresa: " + empresaconstructora.getCodigo() + " - " + empresaconstructora.getDescripcion());
        }
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);

        System.out.println(niveles);
        System.out.printf(qmateriales.toString().trim());

        try {
            ArrayList<DatosCuantitativaGenreralModelCertificacion> tempNoMat = new ArrayList<>();
            tempNoMat = cfr.getRecursosGeneralCertiFicacion(reportesController, query.toString().trim(), niveles, empresaconstructora, obra, queryRecursos.toString().trim());
            dataToFilter.addAll(tempNoMat);

            temp.addAll(dataToFilter);
            ifDesglose = false;
            if (checkDesglose.isSelected()) {
                ifDesglose = true;
            }
            if (Subquery1 != null) {
                ArrayList<DatosCuantitativaGenreralModelCertificacion> tempMat = new ArrayList<>();
                tempMat = cfr.getRecursosGeneralMaterialesCertificaion(reportesController, qmateriales.toString().trim(), niveles, ifDesglose);
                temp.addAll(tempMat);
            }
            date = LocalDate.now();
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("reportName", "Recursos Certificados Origen");
            parametros.put("image", "templete/logoReport.jpg");

            temp.size();
            List<DatosCuantitativaGenreralModelCertificacion> datosList = new ArrayList<>();
            datosList = temp.parallelStream().filter(i -> Collections.frequency(temp, i) > 1).collect(Collectors.toList());
            datosList.size();
            List<DatosCuantitativaGenreralModelCertificacion> uniqDatos = new ArrayList<>();
            for (DatosCuantitativaGenreralModelCertificacion datos : datosList.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
                double valCant = getCantSumCert(temp, datos);
                double valCosto = getCostSumCert(temp, datos);
                uniqDatos.add(new DatosCuantitativaGenreralModelCertificacion(datos.getEmpresa(), datos.getZona(), datos.getObjeto(), datos.getNivel(), datos.getEspecialidad(), datos.getSubespecialidad(), datos.getBrigada(), datos.getGrupo(), datos.getCuadrilla(), datos.getCodigo(), datos.getDescripcion(), datos.getUm(), datos.getTipo(), datos.getCpo(), datos.getCpe(), datos.getCet(), datos.getOtra(), valCant, datos.getPrecio(), datos.getPreciomlc(), Math.round(valCosto * 100d) / 100d));
            }

            temp.removeAll(datosList);
            temp.addAll(uniqDatos);
            uniqDatos.size();

            ArrayList<DatosCuantitativaGenreralModelCertificacion> endDatosCuantitativaGenreralModels = new ArrayList<>();
            endDatosCuantitativaGenreralModels.addAll(temp);


            endDatosCuantitativaGenreralModels.size();
            List<DatosCuantitativaGenreralForReportModelCertificacion> datosToReportList = cfr.createReportCuantitativaGeneralFormaterCertificacion(reportesController, endDatosCuantitativaGenreralModels, obra);
            datosToReportList.size();

            for (DatosCuantitativaGenreralForReportModelCertificacion datos : datosToReportList) {
                System.out.println(datos.getCostoTotal());
            }

            if (niveles <= 6) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getZona).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getNivel).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));

            } else if (niveles == 15) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            } else if (niveles == 125) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getZona).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            } else if (niveles == 1235) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getZona).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            } else if (niveles == 156) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            }

            datosToReportList.size();

            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            garbage = Runtime.getRuntime();

            if (checkAmbMonedas.isSelected() == true) {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);

                }

            } else {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);
                }
            }


        } catch (Exception ex) {
            ex.printStackTrace();

            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error: " + ReportesController.class.getName());

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();

        }

    }


    private String subRMano = "";

    @Override
    public void initialize(URL location, ResourceBundle resources) {

        reportesController = this;
        reportProjectStructureSingelton = ReportProjectStructureSingelton.getInstance();

        empresa = reportProjectStructureSingelton.getEmpresa();
        comboObras.getItems().setAll(reportProjectStructureSingelton.getObrasList());
        //comboObras.setEditable(true);
        TextFields.bindAutoCompletion(comboObras.getEditor(), comboObras.getItems()).setPrefWidth(comboObras.getPrefWidth());

        comboEspecialidades.getItems().setAll(reportProjectStructureSingelton.getEspecialidadesList());
        // comboEspecialidades.setEditable(true);
        TextFields.bindAutoCompletion(comboEspecialidades.getEditor(), comboEspecialidades.getItems()).setPrefWidth(comboEspecialidades.getPrefWidth());

        checkUnidad.setSelected(true);
        checkPresup.setSelected(true);
        checkPresup2.setSelected(true);

        checkAmbMonedas.setDisable(true);
        checkMateriales.setDisable(true);
        checkEquipo.setDisable(true);
        checkMano.setDisable(true);
        checkDesglose.setDisable(true);

        ObservableList<String> fiemStrings = FXCollections.observableArrayList();
        fiemStrings = getFirmasList();
        comboConfecionado.setItems(fiemStrings);
        comboRevisado.setItems(fiemStrings);
        comboAprovado.setItems(fiemStrings);


        ObservableList<String> reportOptions = FXCollections.observableArrayList();
        reportOptions.add("Inversionista");
        reportOptions.add("Certifico");
        reportOptions.add("Convenios");
        reportOptions.add("Acumulado");
        reportOptions.add("Pendientes");
        reportOptions.add("Resumen HH y HE");
        reportOptions.add("Carta Limite - Certificación");
        othersOptions.setItems(reportOptions);

        LocalDate t1 = LocalDate.now();
        LocalDate inicio = t1.with(firstDayOfMonth());
        LocalDate fin = t1.with(lastDayOfMonth());

        pickerDesde.setValue(inicio);
        pickerHasta.setValue(fin);

        pickerDesde.setDisable(true);
        pickerHasta.setDisable(true);


        checkRV.setOnMouseClicked(event -> {
            if (checkRV.isSelected() == true) {
                tipoUO.setDisable(true);
                tipoUO.setSelected(false);
                checkUnidad.setSelected(false);

                comboObras.getSelectionModel().clearSelection();
                comboObras.getItems().clear();
                //comboObras.setEditable(true);
                comboObras.getItems().setAll(reportProjectStructureSingelton.getObrasListRV());
                TextFields.bindAutoCompletion(comboObras.getEditor(), comboObras.getItems()).setPrefWidth(comboObras.getPrefWidth());

            } else if (checkRV.isSelected() == false) {
                tipoUO.setDisable(false);
                checkUnidad.setSelected(true);
            }

        });

        checkUnidad.setOnMouseClicked(event -> {
            if (checkUnidad.isSelected() == true) {
                tipoUO.setDisable(false);
                checkRV.setSelected(false);

                comboObras.getSelectionModel().clearSelection();
                comboObras.getItems().clear();
                comboObras.getItems().setAll(reportProjectStructureSingelton.getObrasList());

            }
        });

        checlRecu.setOnMouseClicked(event -> {
            if (checlRecu.isSelected() == false) {
                checkAmbMonedas.setDisable(true);
                checkMateriales.setDisable(true);
                checkMateriales.setSelected(false);
                checkEquipo.setDisable(true);
                checkEquipo.setSelected(false);
                checkMano.setDisable(true);
                checkMano.setSelected(false);
                checkDesglose.setDisable(true);

            } else {
                checkAmbMonedas.setDisable(false);
                checkMateriales.setDisable(false);
                checkMateriales.setSelected(true);
                checkMano.setSelected(true);
                checkEquipo.setDisable(false);
                checkEquipo.setSelected(true);
                checkMano.setDisable(false);
                checkDesglose.setDisable(false);

            }

        });

        checkPresup.setOnMouseClicked(event -> {
            if (checkPresup.isSelected() == true) {
                checkCertif.setSelected(false);
                ceckCertifmes.setSelected(false);
                checkPlan.setSelected(false);
                checkSalarios.setSelected(false);

                pickerDesde.setDisable(true);
                pickerHasta.setDisable(true);

                comboCuadrilla.setDisable(true);
                comboGrupo.setDisable(true);
                comboBrigada.setDisable(true);
            }
        });
/*
        checkSalarios.setOnMouseClicked(event -> {
            if (checkSalarios.isSelected() == true) {
                checkPresup.setSelected(false);
                checkCertif.setSelected(false);
                ceckCertifmes.setSelected(false);
                checkPlan.setSelected(false);
            }

        });
*/
        checkCertif.setOnMouseClicked(event -> {
            if (checkCertif.isSelected() == true) {
                checkPresup.setSelected(false);
                ceckCertifmes.setSelected(false);
                checkPlan.setSelected(false);
                checkSalarios.setSelected(false);

                pickerDesde.setDisable(true);
                pickerHasta.setDisable(true);

                comboCuadrilla.setDisable(false);
                comboGrupo.setDisable(false);
                comboBrigada.setDisable(false);
            } else if (checkCertif.isSelected() == false) {
                comboCuadrilla.setDisable(true);
                comboGrupo.setDisable(true);
                comboBrigada.setDisable(true);
            }
        });

        ceckCertifmes.setOnMouseClicked(event -> {
            if (ceckCertifmes.isSelected() == true) {
                checkPresup.setSelected(false);
                checkCertif.setSelected(false);
                checkPlan.setSelected(false);
                pickerDesde.setDisable(false);
                pickerHasta.setDisable(false);

                comboCuadrilla.setDisable(false);
                comboGrupo.setDisable(false);
                comboBrigada.setDisable(false);
            } else if (ceckCertifmes.isSelected() == false) {
                comboCuadrilla.setDisable(true);
                comboGrupo.setDisable(true);
                comboBrigada.setDisable(true);
            }
        });

        checkPlan.setOnMouseClicked(event -> {
            if (checkPlan.isSelected() == true) {
                checkPresup.setSelected(false);
                checkCertif.setSelected(false);
                ceckCertifmes.setSelected(false);
                checkSalarios.setSelected(false);
                //checkConvenios.setVisible(true);

                pickerDesde.setDisable(false);
                pickerHasta.setDisable(false);

                comboCuadrilla.setDisable(false);
                comboGrupo.setDisable(false);
                comboBrigada.setDisable(false);
            } else if (checkPlan.isSelected() == false) {
                comboCuadrilla.setDisable(true);
                comboGrupo.setDisable(true);
                comboBrigada.setDisable(true);
            }
        });

        tipoTotales.setOnMouseClicked(event -> {
            if (tipoTotales.isSelected() == true) {
                tipoUO.setSelected(false);
                tipoRV.setSelected(false);

            }
        });

        tipoUO.setOnMouseClicked(event -> {
            if (tipoUO.isSelected() == true && checkUnidad.isSelected() == true && checlRecu.isSelected() == true) {
                tipoRV.setDisable(true);
            } else if (tipoUO.isSelected() == false && checkUnidad.isSelected() == true && checlRecu.isSelected() == true) {
                tipoRV.setDisable(false);
            }

        });

        clearZona.setOnMouseClicked(event -> {
            comboZonas.getSelectionModel().clearSelection();
        });

        clearObj.setOnMouseClicked(event -> {
            comboObjetos.getSelectionModel().clearSelection();
        });

        clearNiv.setOnMouseClicked(event -> {
            comboNivel.getSelectionModel().clearSelection();
        });

        clearEsp.setOnMouseClicked(event -> {
            comboEspecialidades.getSelectionModel().clearSelection();
        });

        clearSub.setOnMouseClicked(event -> {
            comboSubespecialidades.getSelectionModel().clearSelection();
        });

        clearEmp.setOnMouseClicked(event -> {
            comboEmpresas.getSelectionModel().clearSelection();
        });

        clearBrig.setOnMouseClicked(event -> {
            comboBrigada.getSelectionModel().clearSelection();
        });

        clearGrup.setOnMouseClicked(event -> {
            comboGrupo.getSelectionModel().clearSelection();
        });

        clearCuad.setOnMouseClicked(event -> {
            comboCuadrilla.getSelectionModel().clearSelection();
        });

        clearEspecific.setOnMouseClicked(event -> {
            othersOptions.getSelectionModel().clearSelection();
        });
    }

    private StringBuilder queryRecursos;

    private List<ResumenCostosList> getResmenListReport(Obra obra, List<ConceptosReporte> resumenList) {
        List<ResumenCostosList> datos = new ArrayList<>();
        if (obra.getSalarioId() == 2 || obra.getSalarioId() == 3) {
            List<ConceptosReporte> distinctOrders = resumenList.stream().distinct().collect(Collectors.toList());
            double c1 = distinctOrders.parallelStream().filter(res -> res.getConcepto().trim().equals("Materiales")).distinct().map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("01", "Materiales", String.valueOf(c1)));
            double c2 = distinctOrders.parallelStream().filter(res -> res.getConcepto().trim().equals("Mano de Obra")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("02", "Mano de Obra", String.valueOf(c2)));
            double c3 = distinctOrders.parallelStream().filter(res -> res.getConcepto().trim().equals("Uso de Equipos")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("03", "Uso de Equipos", String.valueOf(c3)));
            double c4 = distinctOrders.parallelStream().filter(res -> res.getConcepto().trim().equals("Gastos Directos del Proceso Productivo")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("04", "Gastos Directos del Proceso Productivo", String.valueOf(c4)));
            double c5 = distinctOrders.parallelStream().filter(res -> res.getConcepto().trim().equals("Costos Directos de Producción")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("04", "Costos Directos de Producción", String.valueOf(c5)));
            double c6 = distinctOrders.parallelStream().filter(res -> res.getConcepto().trim().equals("Gastos Asociados a la Producción de la Obra")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("05", "Gastos Asociados a la Producción de la Obra", String.valueOf(c6)));
            double c7 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Total de Costos y Gastos de Producción de la Obra")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("06", "Total de Costos y Gastos de Producción de la Obra", String.valueOf(c7)));
            double c8 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Gastos Generales y de Administración")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("07", "Gastos Generales y de Administración", String.valueOf(c8)));
            double c9 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Gastos Indirectos")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("08", "Gastos Indirectos", String.valueOf(c9)));
            double c10 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Otros Conceptos de Gastos")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("10", "Otros Conceptos de Gastos", String.valueOf(c10)));
            double c10a = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Facilidades Temporales")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("10.1", "Facilidades Temporales", String.valueOf(c10a)));
            double c11a = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Transportación de Suministros y Medios a la Obra")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("10.2", "Transportación de Suministros y Medios a la Obra", String.valueOf(c11a)));
            double c12a = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Imprevistos")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("10.3", "Imprevistos", String.valueOf(c12a)));
            double c13a = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Otras Partidas que se requieran de acuerdo con las características de la obra")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("10.4", "Otras Partidas que se requieran de acuerdo con las características de la obra", String.valueOf(c13a)));
            double c14 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Gastos Financieros")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("11", "Gastos Financieros", String.valueOf(c14)));
            double c15 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Gastos Tributarios")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("12", "Gastos Tributarios", String.valueOf(c15)));
            double c16 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Total de Gastos de la Obra")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("13", "Total de Gastos de la Obra", String.valueOf(c16)));
            double c17 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Total de Costos y Gastos")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("14", "Total de Costos y Gastos", String.valueOf(c17)));
            double c19 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Utilidad")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("15", "Utilidad 15%", String.valueOf(c19)));
            double c18 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Impuestos sobre ventas autorizados por MFP")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("16", "Impuestos sobre ventas autorizados por MFP", String.valueOf(c18)));
            double c20 = distinctOrders.parallelStream().filter(res -> res.getConcepto().equals("Precio del Servicio de Construcción y Montaje")).map(ConceptosReporte::getValor).reduce(0.0, Double::sum);
            datos.add(new ResumenCostosList("17", "Precio del Servicio de Construcción y Montaje", String.valueOf(c20)));
        }
        return datos;
    }

    private void createResumenHorasEspecialidad() {

        qhhCert = new StringBuilder();
        subRMano = " SELECT DISTINCT ec.id, ec.codigo, ec.descripcion, zon.id as idZ, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idO, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idN, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idE, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idS, sub.codigo as codeSub, sub.descripcion as subdesc FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE  ";

        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {
            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            subQObj = " ";
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            subQNiv = " ";
        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            subQEsp = " ";
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }
        qhhCert.append(subRMano);
        qhhCert.append(subQObr);

        if (subQZon != null) {
            qhhCert.append(subQZon);
        }
        if (subQObj != null) {
            qhhCert.append(subQObj);
        }
        if (subQNiv != null) {
            qhhCert.append(subQNiv);
        }
        if (subQEsp != null) {
            qhhCert.append(subQEsp);
        }
        if (subQEmp != null) {
            qhhCert.append(subQEmp);
        }

        qhhCert.append(" ORDER BY ec.id, zon.id, ob.id, niv.id, esp.id, sub.id ASC");
        List<ResumenHH> list = new ArrayList<>();
        list = cfr.gerResumenHHCertificadas(qhhCert.toString().trim(), Integer.parseInt(partObras[0]));

        list.sort(Comparator.comparing(ResumenHH::getEmpresa).thenComparing(ResumenHH::getZona).thenComparing(ResumenHH::getNivel).thenComparing(ResumenHH::getObjeto).thenComparing(ResumenHH::getNivel).thenComparing(ResumenHH::getEspecialidad));

        parametros = new HashMap();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        date = LocalDate.now();
        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        //  parametros.put("comercial", empresa.getComercial());
        parametros.put("reportName", " Resumen HH y HE");
        parametros.put("image", "templete/logoReport.jpg");

        tarea = createTime(50);
        stage = new ProgressDialog(tarea);
        stage.setContentText("Preparando el reporte...");
        stage.setTitle("Espere...");
        new Thread(tarea).start();
        stage.showAndWait();

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.ResumenHHReport();
                JRDataSource ds = new JRBeanCollectionDataSource(list);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.ResumenHHReport();
                JRDataSource ds = new JRBeanCollectionDataSource(list);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                exportarExcel(jp);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private String qRecursos = "";
    private String groupRcRV = "";

    public static List<ConveniosReportModel> createList(ConveniosGenericModel
                                                                model, List<ConveniosReportModel> conveniosReportModel) {
        List<ConveniosReportModel> temp = conveniosReportModel.parallelStream().filter(item -> item.getIdEmpresa() == model.getIdEmp() && item.getIdBrigada() == model.getIdBrig() && item.getIdGrupo() == model.getIdGrup() && item.getIdCuadrilla() == model.getIdCuad()).collect(Collectors.toList());
        return temp;
    }

    private void datoscertificacionDatosRV() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        qmano = new StringBuilder();
        qequipos = new StringBuilder();
        niveles = 0;

        Subquery = " SUM(cert.salario)  FROM Nivelespecifico uo INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
        subqueryCostMateriales = " SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '1' AND ";
        subqueryCostMano = " SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '2' AND ";
        subqueryCostEquipo = " SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '3' AND ";

        if (comboObras.getValue() != null) {

            partObras = comboObras.getValue().split(" - ");
            select = "SELECT ec.codigo, ec.descripcion, ";

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            group = " GROUP BY ec.codigo, ec.descripcion";

            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;

            select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ";
            group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion ";

            niveles = 2;


        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ";
            group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion ";

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;

            select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";
            group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
            niveles = 3;

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;

            select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob. descripcion, ";
            group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob. descripcion ";


            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;

            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;


            select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
            group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion ";
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;

            niveles = 0;


            select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
            group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion ";
            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;


            select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  ";
            group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion ";

            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 0;


            select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  ";
            group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion ";

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;


            select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion,  ";
            group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";


            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;
            select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion,  ";
            group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";

            niveles = 6;

        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.fini >= '" + desdeDate.toString().trim() + "' AND cert.ffin <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 1;
        }

        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            query.append(select);
            query.append(Subquery);
            query.append(subQObr);
            query.append(timeRestrictCert);
            query.append(group);


            qmateriales.append(select);
            qmateriales.append(subqueryCostMateriales);
            qmateriales.append(subQObr);
            qmateriales.append(timeRestrictCert);
            qmateriales.append(group);

            qmano.append(select);
            qmano.append(subqueryCostMano);
            qmano.append(subQObr);
            qmateriales.append(timeRestrictCert);
            qmano.append(group);

            qequipos.append(select);
            qequipos.append(subqueryCostEquipo);
            qequipos.append(subQObr);
            qequipos.append(timeRestrictCert);
            qequipos.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
            query.append(select);
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(timeRestrictCert);
            query.append(group);

            qmateriales.append(select);
            qmateriales.append(subqueryCostMateriales);
            qmateriales.append(subQObr);
            qmateriales.append(subQZon);
            qmateriales.append(timeRestrictCert);
            qmateriales.append(group);

            qmano.append(select);
            qmano.append(subqueryCostMano);
            qmano.append(subQObr);
            qmano.append(subQZon);
            qmano.append(timeRestrictCert);
            qmano.append(group);

            qequipos.append(select);
            qequipos.append(subqueryCostEquipo);
            qequipos.append(subQObr);
            qequipos.append(subQZon);
            qequipos.append(timeRestrictCert);
            qequipos.append(group);

        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
            query.append(select);
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(timeRestrictCert);
            query.append(group);

            qmateriales.append(select);
            qmateriales.append(subqueryCostMateriales);
            qmateriales.append(subQObr);
            qmateriales.append(subQZon);
            qmateriales.append(subQObj);
            qmateriales.append(timeRestrictCert);
            qmateriales.append(group);

            qmano.append(select);
            qmano.append(subqueryCostMateriales);
            qmano.append(subQObr);
            qmano.append(subQZon);
            qmano.append(subQObj);
            qmano.append(timeRestrictCert);
            qmano.append(group);

            qequipos.append(select);
            qequipos.append(subqueryCostMateriales);
            qequipos.append(subQObr);
            qequipos.append(subQZon);
            qequipos.append(subQObj);
            qequipos.append(timeRestrictCert);
            qequipos.append(group);
        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
            query.append(select);
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            qequipos.append(timeRestrictCert);
            query.append(group);

            qmateriales.append(select);

            qmateriales.append(subqueryCostMateriales);
            qmateriales.append(subQObr);
            qmateriales.append(subQZon);
            qmateriales.append(subQObj);
            qmateriales.append(subQNiv);
            qmateriales.append(timeRestrictCert);
            qmateriales.append(group);

            qmano.append(select);
            qmano.append(subqueryCostMano);
            qmano.append(subQObr);
            qmano.append(subQZon);
            qmano.append(subQObj);
            qmano.append(subQNiv);
            qmano.append(timeRestrictCert);
            qmano.append(group);

            qequipos.append(select);
            qequipos.append(subqueryCostEquipo);
            qequipos.append(subQObr);
            qequipos.append(subQZon);
            qequipos.append(subQObj);
            qequipos.append(subQNiv);
            qequipos.append(timeRestrictCert);
            qequipos.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            query.append(select);
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(timeRestrictCert);
            query.append(group);

            qmateriales.append(select);
            qmateriales.append(subqueryCostMateriales);
            qmateriales.append(subQObr);
            qmateriales.append(subQZon);
            qmateriales.append(subQObj);
            qmateriales.append(subQNiv);
            qmateriales.append(subQEsp);
            qmateriales.append(timeRestrictCert);
            qmateriales.append(group);

            qmateriales.append(select);
            qmano.append(subqueryCostMano);
            qmano.append(subQObr);
            qmano.append(subQZon);
            qmano.append(subQObj);
            qmano.append(subQNiv);
            qmano.append(subQEsp);
            qmano.append(timeRestrictCert);
            qmano.append(group);

            qequipos.append(select);
            qequipos.append(subqueryCostEquipo);
            qequipos.append(subQObr);
            qequipos.append(subQZon);
            qequipos.append(subQObj);
            qequipos.append(subQNiv);
            qequipos.append(subQEsp);
            qequipos.append(timeRestrictCert);
            qequipos.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            query.append(select);
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(timeRestrictCert);
            query.append(group);

            qmateriales.append(select);
            qmateriales.append(subqueryCostMateriales);
            qmateriales.append(subQObr);
            qmateriales.append(subQZon);
            qmateriales.append(subQObj);
            qmateriales.append(subQNiv);
            qmateriales.append(subQEsp);
            qmateriales.append(subQSub);
            qmateriales.append(timeRestrictCert);
            qmateriales.append(group);

            qmano.append(select);
            qmano.append(subqueryCostMano);
            qmano.append(subQObr);
            qmano.append(subQZon);
            qmano.append(subQObj);
            qmano.append(subQNiv);
            qmano.append(subQEsp);
            qmano.append(subQSub);
            qmano.append(timeRestrictCert);
            qmano.append(group);

            qequipos.append(select);
            qequipos.append(subqueryCostMateriales);
            qequipos.append(subQObr);
            qequipos.append(subQZon);
            qequipos.append(subQObj);
            qequipos.append(subQNiv);
            qequipos.append(subQEsp);
            qequipos.append(subQSub);
            qequipos.append(timeRestrictCert);
            qequipos.append(group);
        }

        if (subQObr != null && subQEmp != null) {
            query.append(select);
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQEmp);
            query.append(timeRestrictCert);
            query.append(group);

            qmateriales.append(select);
            qmateriales.append(subqueryCostMateriales);
            qmateriales.append(subQObr);
            qmateriales.append(subQEmp);
            qmateriales.append(timeRestrictCert);
            qmateriales.append(group);

            qmano.append(select);
            qmano.append(subqueryCostMano);
            qmano.append(subQObr);
            qmano.append(subQEmp);
            qmano.append(timeRestrictCert);
            qmano.append(group);

            qequipos.append(select);
            qequipos.append(subqueryCostEquipo);
            qequipos.append(subQObr);
            qequipos.append(subQEmp);
            qequipos.append(timeRestrictCert);
            qequipos.append(group);
        }

        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("tipoReport", "Total certificación desde " + intervalo);
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");

        totalReportCertModelArrayList = cfr.getTotalesToCertPlan(reportesController, query.toString().trim(), qmateriales.toString().trim(), qmano.toString().trim(), qequipos.toString().trim(), niveles);
        indication.setText(" ");
        tarea = createTime(50);
        stage = new ProgressDialog(tarea);
        stage.setContentText("Preparando el reporte...");
        stage.setTitle("Espere...");
        new Thread(tarea).start();
        stage.showAndWait();

        try {

            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.createTotalReportToRVCetToPlan(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(totalReportCertModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.createTotalReportToRVCetToPlan(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(totalReportCertModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                exportarExcel(jp);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clearVariables() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        qequipos = new StringBuilder();
        qmano = new StringBuilder();
        queriGeneral = new StringBuilder();
        qRecursos = null;
        qhhCert = new StringBuilder();
        queryRecursos = new StringBuilder();
        queryCalc = new StringBuilder();

        /*subQBrig = null;
        subQCuad = null;
        subQGrup = null;
        subQEmp = null;
        subQEmpM = null;
        subQEsp = null;
        subQEspM = null;
        subQNiv = null;
        subQNivM = null;
        subQObj = null;
        subQObjM = null;
        subQZon = null;
        subQZonM = null;
        subQSub = null;
        subQSubM = null;*/
    }

    private List<DatosCuantitativaGenreralModel> getFinalCalculateList(ArrayList<DatosCuantitativaGenreralModel> listaPresupuesto, ArrayList<DatosCuantitativaGenreralModel> certificacionesList, int niveles) {
        List<DatosCuantitativaGenreralModel> finalCalculateList = new ArrayList<>();
        for (DatosCuantitativaGenreralModel datosCuantitativaGenreralModel : listaPresupuesto) {
            try {
                if (niveles == 1) {
                    DatosCuantitativaGenreralModel item = certificacionesList.parallelStream().filter(val -> val.getCodigo().trim().equals(datosCuantitativaGenreralModel.getCodigo().trim()) && val.getDescripcion().trim().equals(datosCuantitativaGenreralModel.getDescripcion().trim())).findFirst().orElse(null);
                    if (item != null) {
                        datosCuantitativaGenreralModel.setCantidad(datosCuantitativaGenreralModel.getCantidad() - item.getCantidad());
                        datosCuantitativaGenreralModel.setCostoTotal(datosCuantitativaGenreralModel.getCostoTotal() - item.getCostoTotal());
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    } else {
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    }
                } else if (niveles == 2) {
                    DatosCuantitativaGenreralModel item = certificacionesList.parallelStream().filter(val -> val.getZona().trim().equals(datosCuantitativaGenreralModel.getZona().trim()) && val.getCodigo().trim().equals(datosCuantitativaGenreralModel.getCodigo().trim()) && val.getDescripcion().trim().equals(datosCuantitativaGenreralModel.getDescripcion().trim())).findFirst().orElse(null);
                    if (item != null) {
                        datosCuantitativaGenreralModel.setCantidad(datosCuantitativaGenreralModel.getCantidad() - item.getCantidad());
                        datosCuantitativaGenreralModel.setCostoTotal(datosCuantitativaGenreralModel.getCostoTotal() - item.getCostoTotal());
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    } else {
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    }
                } else if (niveles == 3) {
                    DatosCuantitativaGenreralModel item = certificacionesList.parallelStream().filter(val -> val.getZona().trim().equals(datosCuantitativaGenreralModel.getZona().trim()) && val.getObjeto().trim().equals(datosCuantitativaGenreralModel.getObjeto().trim()) && val.getCodigo().trim().equals(datosCuantitativaGenreralModel.getCodigo().trim()) && val.getDescripcion().trim().equals(datosCuantitativaGenreralModel.getDescripcion().trim())).findFirst().orElse(null);
                    if (item != null) {
                        datosCuantitativaGenreralModel.setCantidad(datosCuantitativaGenreralModel.getCantidad() - item.getCantidad());
                        datosCuantitativaGenreralModel.setCostoTotal(datosCuantitativaGenreralModel.getCostoTotal() - item.getCostoTotal());
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    } else {
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    }
                } else if (niveles == 4) {
                    DatosCuantitativaGenreralModel item = certificacionesList.parallelStream().filter(val -> val.getZona().trim().equals(datosCuantitativaGenreralModel.getZona().trim()) && val.getObjeto().trim().equals(datosCuantitativaGenreralModel.getObjeto().trim()) && val.getNivel().trim().equals(datosCuantitativaGenreralModel.getNivel().trim()) && val.getCodigo().trim().equals(datosCuantitativaGenreralModel.getCodigo().trim()) && val.getDescripcion().trim().equals(datosCuantitativaGenreralModel.getDescripcion().trim())).findFirst().orElse(null);
                    if (item != null) {
                        datosCuantitativaGenreralModel.setCantidad(datosCuantitativaGenreralModel.getCantidad() - item.getCantidad());
                        datosCuantitativaGenreralModel.setCostoTotal(datosCuantitativaGenreralModel.getCostoTotal() - item.getCostoTotal());
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    } else {
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    }
                } else if (niveles == 5) {
                    DatosCuantitativaGenreralModel item = certificacionesList.parallelStream().filter(val -> val.getZona().trim().equals(datosCuantitativaGenreralModel.getZona().trim()) && val.getObjeto().trim().equals(datosCuantitativaGenreralModel.getObjeto().trim()) && val.getNivel().trim().equals(datosCuantitativaGenreralModel.getNivel().trim()) && val.getEspecialidad().trim().equals(datosCuantitativaGenreralModel.getEspecialidad().trim()) && val.getCodigo().trim().equals(datosCuantitativaGenreralModel.getCodigo().trim()) && val.getDescripcion().trim().equals(datosCuantitativaGenreralModel.getDescripcion().trim())).findFirst().orElse(null);
                    if (item != null) {
                        datosCuantitativaGenreralModel.setCantidad(datosCuantitativaGenreralModel.getCantidad() - item.getCantidad());
                        datosCuantitativaGenreralModel.setCostoTotal(datosCuantitativaGenreralModel.getCostoTotal() - item.getCostoTotal());
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    } else {
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    }

                } else if (niveles == 6) {
                    DatosCuantitativaGenreralModel item = certificacionesList.parallelStream().filter(val -> val.getZona().trim().equals(datosCuantitativaGenreralModel.getZona().trim()) && val.getObjeto().trim().equals(datosCuantitativaGenreralModel.getObjeto().trim()) && val.getNivel().trim().equals(datosCuantitativaGenreralModel.getNivel().trim()) && val.getEspecialidad().trim().equals(datosCuantitativaGenreralModel.getEspecialidad().trim()) && val.getSubespecialidad().trim().equals(datosCuantitativaGenreralModel.getSubespecialidad().trim()) && val.getCodigo().trim().equals(datosCuantitativaGenreralModel.getCodigo().trim()) && val.getDescripcion().trim().equals(datosCuantitativaGenreralModel.getDescripcion().trim())).findFirst().orElse(null);
                    if (item != null) {
                        datosCuantitativaGenreralModel.setCantidad(datosCuantitativaGenreralModel.getCantidad() - item.getCantidad());
                        datosCuantitativaGenreralModel.setCostoTotal(datosCuantitativaGenreralModel.getCostoTotal() - item.getCostoTotal());
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    } else {
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    }
                } else if (niveles == 15) {
                    DatosCuantitativaGenreralModel item = certificacionesList.parallelStream().filter(val -> val.getEspecialidad().trim().equals(datosCuantitativaGenreralModel.getEspecialidad().trim()) && val.getCodigo().trim().equals(datosCuantitativaGenreralModel.getCodigo().trim()) && val.getDescripcion().trim().equals(datosCuantitativaGenreralModel.getDescripcion().trim())).findFirst().orElse(null);
                    if (item != null) {
                        datosCuantitativaGenreralModel.setCantidad(datosCuantitativaGenreralModel.getCantidad() - item.getCantidad());
                        datosCuantitativaGenreralModel.setCostoTotal(datosCuantitativaGenreralModel.getCostoTotal() - item.getCostoTotal());
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    } else {
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    }
                } else if (niveles == 125) {
                    DatosCuantitativaGenreralModel item = certificacionesList.parallelStream().filter(val -> val.getZona().trim().equals(datosCuantitativaGenreralModel.getZona().trim()) && val.getEspecialidad().trim().equals(datosCuantitativaGenreralModel.getEspecialidad().trim()) && val.getCodigo().trim().equals(datosCuantitativaGenreralModel.getCodigo().trim()) && val.getDescripcion().trim().equals(datosCuantitativaGenreralModel.getDescripcion().trim())).findFirst().orElse(null);
                    if (item != null) {
                        datosCuantitativaGenreralModel.setCantidad(datosCuantitativaGenreralModel.getCantidad() - item.getCantidad());
                        datosCuantitativaGenreralModel.setCostoTotal(datosCuantitativaGenreralModel.getCostoTotal() - item.getCostoTotal());
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    } else {
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    }
                } else if (niveles == 1235) {
                    DatosCuantitativaGenreralModel item = certificacionesList.parallelStream().filter(val -> val.getZona().trim().equals(datosCuantitativaGenreralModel.getZona().trim()) && val.getObjeto().trim().equals(datosCuantitativaGenreralModel.getObjeto().trim()) && val.getEspecialidad().trim().equals(datosCuantitativaGenreralModel.getEspecialidad().trim()) && val.getCodigo().trim().equals(datosCuantitativaGenreralModel.getCodigo().trim()) && val.getDescripcion().trim().equals(datosCuantitativaGenreralModel.getDescripcion().trim())).findFirst().orElse(null);
                    if (item != null) {
                        datosCuantitativaGenreralModel.setCantidad(datosCuantitativaGenreralModel.getCantidad() - item.getCantidad());
                        datosCuantitativaGenreralModel.setCostoTotal(datosCuantitativaGenreralModel.getCostoTotal() - item.getCostoTotal());
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    } else {
                        finalCalculateList.add(datosCuantitativaGenreralModel);
                    }
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }
        return finalCalculateList;
    }

    private void createReportObraRV() {
        query = new StringBuilder();
        niveles = 0;

        select = " SELECT reng.codigo, reng.descripcion, reng.um, SUM(uor.cantRv) as cant, SUM(uor.costEquip + uor.costMano) as total ";


        if (comboObras.getValue() != null) {

            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 2;

            subQZon = " ";


        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 3;

            subQObj = " ";

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 4;

            subQNiv = " ";

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;
            niveles = 4;

            subQEsp = " ";

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            niveles = 0;
            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;

            subQSub = " ";
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;
            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");

            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 7;
        }


        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            query.append(select);
            query.append(" FROM Unidadobra uo LEFT JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId LEFT JOIN Renglonvariante reng ON uor.renglonvarianteId = reng.id WHERE  ");
            query.append(subQObr);
            query.append(" GROUP BY reng.codigo, reng.descripcion, reng.um ");
        }

        if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {

            query.append(select + ", zon.codigo, zon.desripcion ");
            query.append(" FROM Unidadobra uo LEFT JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId LEFT JOIN Renglonvariante reng ON uor.renglonvarianteId = reng.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id WHERE  ");
            query.append(subQObr);
            query.append(subQZon);
            query.append(" GROUP BY reng.codigo, reng.descripcion, reng.um, zon.codigo, zon.desripcion ");


        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {

            query.append(select + ", zon.codigo, zon.desripcion, obj.codigo, obj.descripcion ");
            query.append(" FROM Unidadobra uo LEFT JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId LEFT JOIN Renglonvariante reng ON uor.renglonvarianteId = reng.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos obj ON uo.objetosId = obj.id WHERE  ");
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(" GROUP BY reng.codigo, reng.descripcion, reng.um, zon.codigo, zon.desripcion, obj.codigo, obj.descripcion ");

        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {

            query.append(select + ", zon.codigo, zon.desripcion, obj.codigo, obj.descripcion, niv.codigo, niv.descripcion ");
            query.append(" FROM Unidadobra uo LEFT JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId LEFT JOIN Renglonvariante reng ON uor.renglonvarianteId = reng.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos obj ON uo.objetosId = obj.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id WHERE ");
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(" GROUP BY reng.codigo, reng.descripcion, reng.um, zon.codigo, zon.desripcion, obj.codigo, obj.descripcion, niv.codigo, niv.descripcion ");

        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            query.append(select + ", zon.codigo, zon.desripcion, obj.codigo, obj.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion ");
            query.append(" FROM Unidadobra uo LEFT JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId LEFT JOIN Renglonvariante reng ON uor.renglonvarianteId = reng.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos obj ON uo.objetosId = obj.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp uo.especialidadesId = esp.id WHERE ");
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(" GROUP BY reng.codigo, reng.descripcion, reng.um, zon.codigo, zon.desripcion, obj.codigo, obj.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion  ");


        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            query.append(select + ", zon.codigo, zon.desripcion, obj.codigo, obj.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion ");
            query.append(" FROM Unidadobra uo LEFT JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId LEFT JOIN Renglonvariante reng ON uor.renglonvarianteId = reng.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos obj ON uo.objetosId = obj.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sun.id WHERE ");
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(" GROUP BY reng.codigo, reng.descripcion, reng.um, zon.codigo, zon.desripcion, obj.codigo, obj.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ");

        }

        //System.out.println(query.toString().trim());

        obraRengVReportArrayList = new ArrayList<>();
        obraRengVReportArrayList = cfr.getDatosObraRenglones(niveles, query.toString().trim());

        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("titlereport", "ObraPCW - Renglones Variantes");
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");

        tarea = createTime(50);
        stage = new ProgressDialog(tarea);
        stage.setContentText("Preparando el reporte...");
        stage.setTitle("Espere...");
        new Thread(tarea).start();
        stage.showAndWait();

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.createObraRenglonReport(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(obraRengVReportArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.createObraRenglonReport(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(obraRengVReportArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                exportarExcel(jp);
            }

        } catch (JRException e) {
            e.printStackTrace();
        }


    }

    public void createInforme(ActionEvent event) throws Exception {
        clearVariables();
        tarea = createTimeMesage();
        ProgressDialog dialog = new ProgressDialog(tarea);
        dialog.setContentText("Procesando petición del usuario, por favor espere..");
        dialog.setTitle("Espere...");
        new Thread(tarea).start();
        dialog.showAndWait();

        bdr = new BuildDynamicReport();
        cfr = new CalForReport();


        if (othersOptions.getValue() != null && othersOptions.getValue().equals("Carta Limite - Certificación")) {
            createReportCLcertificacion();
        }


        if (tipoUO.isSelected() == true && tipoRV.isSelected() == false && checlRecu.isSelected() == false && !checkSalarios.isSelected()) {
            createReportPresupUO();
        }

        //Presupuesto UO por RV
        if (tipoUO.isSelected() == true && tipoRV.isSelected() == true && checlRecu.isSelected() == false && !checkSalarios.isSelected()) {
            query = new StringBuilder();
            qmateriales = new StringBuilder();
            myFlag = true;

            Subquery = "SELECT ec.id, ec.descripcion, zon.id, zon.desripcion, ob.id, ob.descripcion, niv.id, niv.descripcion, esp.id, esp.descripcion, sub.id, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, uo.cantidad, uo.costototal, uor.renglonvarianteId, uor.cantRv, uor.conMat, zon.codigo as c1, ob.codigo as c2, niv.codigo as c3, esp.codigo as c4, sub.codigo as c5 FROM Unidadobrarenglon uor INNER JOIN Unidadobra uo ON uor.unidadobraId = uo.id  INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.descripcion, zon.id, zon.desripcion, ob.id, ob.descripcion, niv.id, niv.descripcion, esp.id, esp.descripcion, sub.id, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, uo.cantidad, uo.costototal, bajo.cantidad, bajo.costo, bajo.idSuministro, bajo.tipo, zon.codigo as c1, ob.codigo as c2, niv.codigo as c3, esp.codigo as c4, sub.codigo as c5 FROM Unidadobra uo INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            qmateriales.append(Subquery1);

            if (comboObras.getValue() != null) {
                partObras = comboObras.getValue().split(" - ");
                //idObr = Integer.parseInt(partObras[0]);

                subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                niveles = 1;

            }

            if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
                niveles = 2;
            } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

                partZonas = comboZonas.getValue().split(" - ");
                //idZon = Integer.parseInt(partZonas[0]);

                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                niveles = 2;
            }

            if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
                niveles = 3;
            } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
                partObj = comboObjetos.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                niveles = 3;

            }

            if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
                niveles = 4;

            } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
                partNiv = comboNivel.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                niveles = 4;

            }

            if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
                niveles = 5;
            } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
                partEsp = comboEspecialidades.getValue().split(" - ");
                //idEsp = Integer.parseInt(partEsp[0]);
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                niveles = 5;
            }

            if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
                niveles = 6;
            } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
                partSub = comboSubespecialidades.getValue().split(" - ");
                // idSub = Integer.parseInt(partSub[0]);
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                niveles = 6;

            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                // idEmp = Integer.parseInt(partEmp[0]);
                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());

            }


            //niveles convinados
            if (comboObras.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 15;
            }

            if (comboObras.getValue() != null && comboZonas.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 125;
            }

            if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 1235;
            }

            if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 12345;
            }

            if (comboObras.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
                niveles = 156;
            }

            if (comboObras.getValue() != null && comboZonas.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
                niveles = 1256;
            }

            if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
                niveles = 12356;
            }
            if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
                niveles = 123456;
            }

            query.append(subQObr);
            qmateriales.append(subQObr);
            if (subQZon != null) {
                query.append(subQZon);
                qmateriales.append(subQZon);
            }
            if (subQObj != null) {
                query.append(subQObj);
                qmateriales.append(subQObj);
            }
            if (subQNiv != null) {
                query.append(subQNiv);
                qmateriales.append(subQNiv);

            }

            if (subQEsp != null) {
                query.append(subQEsp);
                qmateriales.append(subQEsp);
            }

            if (subQSub != null) {
                query.append(subQSub);
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
                qmateriales.append(subQEmp);
            }

            if (checkPresup.isSelected() == true) {

                date = LocalDate.now();
                parametros = new HashMap<>();
                int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                obra = reportProjectStructureSingelton.getObra(id);

                parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
                if (checkFecha.isSelected()) {
                    parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
                } else {
                    parametros.put("fecha", " ");
                }
                int templete = 0;
                if (comboConfecionado.getValue() == null) {
                    templete = 1;
                    parametros.put("empresa", empresa.getNombre());
                    parametros.put("comercial", empresa.getComercial());
                    parametros.put("reportName", "Presupuesto por Unidad de Obra");
                    parametros.put("image", "templete/logoReport.jpg");
                } else if (comboConfecionado.getValue() != null) {
                    templete = 2;
                    String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                    String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                    String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                    parametros.put("empresa", empresa.getNombre());
                    parametros.put("comercial", empresa.getComercial());
                    parametros.put("image", "templete/logoReport.jpg");
                    parametros.put("conf", "Confeccionado: " + confe);
                    parametros.put("rev", "Revisado: " + rev);
                    parametros.put("aprub", "Aprobado: " + apro);
                    parametros.put("reportName", "Presupuesto por Unidad de Obra");
                }

                table = false;
                if (checkTable.isSelected() == false) {
                    table = true;
                }

                try {
                    ArrayList<RenglonVarianteReportModel> renglonVarianteReportModeList = cfr.getRenglonesVariantesList(reportesController, query.toString().trim() + " ORDER BY uo.id ASC ", qmateriales.toString().trim() + " ORDER BY uo.id ASC ", obra.getId());
                    renglonVarianteReportModeList.sort(Comparator.comparing(RenglonVarianteReportModel::getEmpresa).thenComparing(RenglonVarianteReportModel::getCodeZona).thenComparing(RenglonVarianteReportModel::getCodeObjeto).thenComparing(RenglonVarianteReportModel::getCodeNivel).thenComparing(RenglonVarianteReportModel::getCodeEspecialidad).thenComparing(RenglonVarianteReportModel::getCodeSub).thenComparing(RenglonVarianteReportModel::getUnidad).thenComparing(RenglonVarianteReportModel::getCodigo));

                    presupuestoUORVNArrayList = new ArrayList<>();
                    presupuestoUORVNArrayList = cfr.createReportesUORVFormater(reportesController, renglonVarianteReportModeList, obra);

                    tarea = createTime(50);
                    stage = new ProgressDialog(tarea);
                    stage.setContentText("Preparando el reporte...");
                    stage.setTitle("Espere");
                    new Thread(tarea).start();
                    stage.showAndWait();

                    List<ConceptosReporte> reportFormaters = new ArrayList<>();
                    for (PresupuestoUORVN totalReportFormater : presupuestoUORVNArrayList) {
                        reportFormaters.addAll(totalReportFormater.getBodyConceptos());
                    }
                    List<ResumenCostosList> resumenList = new ArrayList<>();
                    resumenList = getResmenListReport(obra, reportFormaters);
                    parametros.put("resumen", resumenList);

                    if (checkExp.isSelected() == false) {
                        DynamicReport dr = bdr.createControlPresupReportUORV(reportesController, niveles, templete, table);
                        JRDataSource ds = new JRBeanCollectionDataSource(presupuestoUORVNArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        JasperViewer.viewReport(jp, false);

                    } else {
                        parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                        DynamicReport dr = bdr.createControlPresupReportUORV(reportesController, niveles, templete, table);
                        JRDataSource ds = new JRBeanCollectionDataSource(presupuestoUORVNArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        exportarExcel(jp);
                    }

                } catch (Exception ex) {
                    ex.printStackTrace();
                    Alert alert = new Alert(Alert.AlertType.WARNING);
                    VBox dialogPaneContent = new VBox();
                    Label label = new Label("Error:");
                    TextArea textArea = new TextArea();
                    textArea.setText(ex.getMessage());
                    dialogPaneContent.getChildren().addAll(label, textArea);
                    // Set content for Dialog Pane
                    alert.getDialogPane().setContent(dialogPaneContent);
                    alert.showAndWait();
                }
            }

        } else if (checkUnidad.isSelected() == true && tipoTotales.isSelected() == true && checkCertif.isSelected() == false && ceckCertifmes.isSelected() == false) {
            myFlag = true;
            niveles = 0;
            Subquery = " SUM(uo.costoMaterial), SUM(uo.costomano), SUM(uo.costoequipo) FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            if (comboObras.getValue() != null) {
                partObras = comboObras.getValue().split(" - ");
                select = "SELECT ec.id, ec.codigo, ec.descripcion, ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion ";

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                niveles = 1;
            }

            if (comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                select = "SELECT ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion  ";
                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                partZonas = comboZonas.getValue().split(" - ");
                if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                } else if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                }
                niveles = 2;
            } else if (comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                select = "SELECT ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";

                partZonas = comboZonas.getValue().split(" - ");
                if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                } else if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                }

                partObj = comboObjetos.getValue().split(" - ");
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }
                niveles = 3;

            } else if (comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                select = "SELECT ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion,  ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion ";

                partZonas = comboZonas.getValue().split(" - ");
                if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                } else if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                }

                partObj = comboObjetos.getValue().split(" - ");
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }

                partNiv = comboNivel.getValue().split(" - ");
                if (comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " ";
                } else if (!comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                }
                niveles = 4;

            } else if (comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                select = "SELECT ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion  ";

                partZonas = comboZonas.getValue().split(" - ");
                if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                } else if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                }

                partObj = comboObjetos.getValue().split(" - ");
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }

                partNiv = comboNivel.getValue().split(" - ");
                if (comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " ";
                } else if (!comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                }

                partEsp = comboEspecialidades.getValue().split(" - ");
                if (comboEspecialidades.getValue().contentEquals("Todas")) {
                    subQEsp = " ";
                } else if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                }
                niveles = 5;
            } else if (comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
                niveles = 0;
                select = "SELECT ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion,  ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";
                partZonas = comboZonas.getValue().split(" - ");
                if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                } else if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                }

                partObj = comboObjetos.getValue().split(" - ");
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }

                partNiv = comboNivel.getValue().split(" - ");
                if (comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " ";
                } else if (!comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                }

                partEsp = comboEspecialidades.getValue().split(" - ");
                if (comboEspecialidades.getValue().contentEquals("Todas")) {
                    subQEsp = " ";
                } else if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                }

                partSub = comboSubespecialidades.getValue().split(" - ");
                if (comboSubespecialidades.getValue().equals("Todas")) {
                    subQSub = " ";
                } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                    subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                    ;
                    ;
                }

                niveles = 6;

            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;
            }

            if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);
            }

            if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);


            }
            if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);
            }
            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {

                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);

            }

            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);
            }

            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);
            }

            if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQSub == null && comboEspecialidades.getValue() != null) {
                niveles = 0;
                query = new StringBuilder();
                String myQuery = "SELECT ec.id, ec.codigo, ec.descripcion, esp.codigo, esp.descripcion, SUM(uo.costoMaterial), SUM(uo.costomano), SUM(uo.costoequipo) FROM Unidadobra uo INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id WHERE ";
                query.append(myQuery);
                query.append(subQObr);
                if (comboEspecialidades.getValue().equals("Todas")) {
                    query.append(" ");
                } else if (!comboEspecialidades.getValue().equals("Todas")) {
                    query.append(subQEsp);
                }

                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, esp.codigo, esp.descripcion ");
                niveles = 15;

            }
            System.out.println(niveles);
            System.out.println(query.toString().trim());

            date = LocalDate.now();
            parametros = new HashMap<>();
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);

            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            if (checkFecha.isSelected()) {
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            } else {
                parametros.put("fecha", " ");
            }
            int templete = 0;
            if (comboConfecionado.getValue() == null) {
                templete = 1;
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("reportName", "Resumen de Costos Directos");
                parametros.put("image", "templete/logoReport.jpg");
            } else if (comboConfecionado.getValue() != null) {
                templete = 2;
                String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("conf", "Confeccionado: " + confe);
                parametros.put("rev", "Revisado: " + rev);
                parametros.put("aprub", "Aprobado: " + apro);
                parametros.put("reportName", "Resumen de Costos Directos");
            }
            List<TotalReportFormater> totalReportFormaterList = new ArrayList<>();
            try {

                totalReportModelArrayList = new ArrayList<>();
                totalReportModelArrayList = cfr.getTotales(reportesController, query.toString().trim(), niveles);

                totalReportFormaterList = cfr.createReportTotalesFormater(totalReportModelArrayList, obra);

                if (niveles == 1) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa));
                } else if (niveles == 2) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getZona));
                } else if (niveles == 3) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getZona).thenComparing(TotalReportFormater::getObjeto));
                } else if (niveles == 4) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getZona).thenComparing(TotalReportFormater::getObjeto).thenComparing(TotalReportFormater::getNivel));
                } else if (niveles == 5) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getZona).thenComparing(TotalReportFormater::getObjeto).thenComparing(TotalReportFormater::getNivel).thenComparing(TotalReportFormater::getEspecialidad));
                } else if (niveles == 6) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getZona).thenComparing(TotalReportFormater::getObjeto).thenComparing(TotalReportFormater::getNivel).thenComparing(TotalReportFormater::getEspecialidad).thenComparing(TotalReportFormater::getSubespecialidad));
                } else if (niveles == 15) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getEspecialidad));
                }


            } catch (Exception ex) {
                ex.printStackTrace();

                Alert alert = new Alert(Alert.AlertType.WARNING);

                VBox dialogPaneContent = new VBox();
                Label label = new Label("Error:");

                TextArea textArea = new TextArea();
                textArea.setText(ex.getMessage());
                dialogPaneContent.getChildren().addAll(label, textArea);
                // Set content for Dialog Pane
                alert.getDialogPane().setContent(dialogPaneContent);
                alert.showAndWait();
            }

            indication.setText(" ");
            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();
            /*
             * Copiar esto en los otros reportes
             */
            List<ConceptosReporte> reportFormaters = new ArrayList<>();
            for (TotalReportFormater totalReportFormater : totalReportFormaterList) {
                reportFormaters.addAll(totalReportFormater.getBodyConceptos());
            }
            List<ResumenCostosList> resumenList = new ArrayList<>();
            resumenList = getResmenListReport(obra, reportFormaters);
            parametros.put("resumen", resumenList);

            try {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createTotalReport(reportesController, niveles);
                    JRDataSource ds = new JRBeanCollectionDataSource(totalReportFormaterList.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList()));
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createTotalReport(reportesController, niveles);
                    JRDataSource ds = new JRBeanCollectionDataSource(totalReportFormaterList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    exportarExcel(jp);
                }
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (JRException e) {
                e.printStackTrace();
            }

        }
        // System.out.println("aqui");
        if (checkCertif.isSelected() == true && tipoUO.isSelected() == true && tipoRV.isSelected() == false && othersOptions.getValue() == null) {
            myFlag = true;
            createCertificacionOrigenUOMethod();
        }
        if (checkCertif.isSelected() == true && tipoUO.isSelected() == true && tipoRV.isSelected() == true) {
            myFlag = true;
            createCertificacionOrigenUORVMethod();
        }
        if (ceckCertifmes.isSelected() == true && tipoUO.isSelected() == true && tipoRV.isSelected() == false && checkSalarios.isSelected() == false && checlRecu.isSelected() == false) {
            myFlag = true;
            createReportCertificacionTimeUO();

        } else if (ceckCertifmes.isSelected() == true && tipoUO.isSelected() == true && tipoRV.isSelected() == true && checkSalarios.isSelected() == false && checlRecu.isSelected() == false) {
            myFlag = true;
            createReportcertificaUORV();
        }

        if (checkPlan.isSelected() == true && tipoUO.isSelected() == true && tipoRV.isSelected() == false && checlRecu.isSelected() == false) {
            myFlag = true;
            createReportPlanUOMES();
        } else if (checkPlan.isSelected() == true && tipoUO.isSelected() == true && tipoRV.isSelected() == true) {
            myFlag = true;
            createReportPlanUORV();
        }
        /**aqui*/
        if (checkUnidad.isSelected() == true && checkPresup.isSelected() == true && checlRecu.isSelected() == true && tipoUO.isSelected() == false && checkSalarios.isSelected() == false) {
            myFlag = true;
            createrQueryCunatitativaGeneral();
        }

        if (checkUnidad.isSelected() && checkPresup.isSelected() == true && checlRecu.isSelected() == true && tipoUO.isSelected() == true && checkSalarios.isSelected() == false && tipoRV.isDisable() == true) {
            myFlag = true;
            createReportCuantitativaUO();
        }

        if (checkUnidad.isSelected() && checkCertif.isSelected() == true && othersOptions.getValue() != null && othersOptions.getValue().equals("Acumulado") && tipoUO.isSelected() == false && tipoRV.isSelected() == false) {
            myFlag = true;
            createReportAcomulado();
        }

        if (!checlRecu.isSelected() && checkUnidad.isSelected() == true && checkCertif.isSelected() == true && othersOptions.getValue().equals("Resumen HH y HE")) {
            myFlag = true;
            createResumenHorasEspecialidad();
        }

        /**
         * Presupuesto por RV
         */
        if (checkRV.isSelected() == true && tipoRV.isSelected() == true && checlRecu.isSelected() == false && checkSalarios.isSelected() == false) {
            myFlag = true;

            Subquery = "SELECT ec.id, ec.descripcion, zon.id, zon.desripcion, ob.id, ob.descripcion, niv.id, niv.descripcion, esp.id, esp.descripcion, sub.id, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, rv.id, rv.codigo, rv.descripcion, rv.um, SUM(uor.cantidad), SUM(uor.costmaterial), SUM(uor.costmano), SUM(uor.costequipo), uor.conmat, rv.costomat, rv.costmano, rv.costequip, zon.codigo as c1, ob.codigo as c2, niv.codigo as c3, esp.codigo as c4, sub.codigo as c5 FROM Renglonnivelespecifico uor INNER JOIN Nivelespecifico uo ON uor.nivelespecificoId = uo.id INNER JOIN Renglonvariante rv ON uor.renglonvarianteId  = rv.id  INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.descripcion, zon.id, zon.desripcion, ob.id, ob.descripcion, niv.id, niv.descripcion, esp.id, esp.descripcion, sub.id, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, SUM(bajo.cantidad), SUM(bajo.costo), bajo.idsuministro, bajo.tipo, rv.id, rv.codigo, rv.descripcion, rv.um, SUM(uor.cantidad), zon.codigo as c1, ob.codigo as c2, niv.codigo as c3, esp.codigo as c4, sub.codigo as c5 FROM Nivelespecifico uo INNER JOIN Bajoespecificacionrv bajo ON uo.id = bajo.nivelespecificoId INNER JOIN Renglonvariante rv ON bajo.renglonvarianteId = rv.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId AND rv.id = uor.renglonvarianteId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            qmateriales.append(Subquery1);

            if (comboObras.getValue() != null) {
                partObras = comboObras.getValue().split(" - ");
                subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                niveles = 1;

            }

            if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
                subQZon = " ";
                niveles = 2;
            } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

                partZonas = comboZonas.getValue().split(" - ");
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                niveles = 2;
            }

            if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
                subQObj = " ";
                niveles = 3;
            } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
                partObj = comboObjetos.getValue().split(" - ");
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;

                niveles = 3;

            }

            if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
                subQNiv = " ";
                niveles = 4;

            } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
                partNiv = comboNivel.getValue().split(" - ");
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;

                niveles = 4;

            }

            if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
                subQEsp = " ";
                niveles = 5;
            } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
                partEsp = comboEspecialidades.getValue().split(" - ");
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;

                niveles = 5;
            }

            if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
                subQSub = " ";
                niveles = 6;
            } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
                partSub = comboSubespecialidades.getValue().split(" - ");
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                niveles = 6;

            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());

            }

            //niveles convinados
            if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 15;
            } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 125;
            } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 1235;
            } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
                niveles = 156;
            }

            query.append(subQObr);
            qmateriales.append(subQObr);
            if (subQZon != null) {
                query.append(subQZon);
                qmateriales.append(subQZon);
            }
            if (subQObj != null) {
                query.append(subQObj);
                qmateriales.append(subQObj);
            }
            if (subQNiv != null) {
                query.append(subQNiv);
                qmateriales.append(subQNiv);

            }

            if (subQEsp != null) {
                query.append(subQEsp);
                qmateriales.append(subQEsp);
            }

            if (subQSub != null) {
                query.append(subQSub);
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
                qmateriales.append(subQEmp);
            }

            if (checkPresup.isSelected() == true) {

                renglonVarianteReportModelExtendArrayList = new ArrayList<>();
                presupuestoUORVNExtendArrayList = new ArrayList<>();

                date = LocalDate.now();
                parametros = new HashMap<>();
                int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                obra = reportProjectStructureSingelton.getObra(id);

                parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());

                if (checkFecha.isSelected()) {
                    parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
                } else {
                    parametros.put("fecha", " ");
                }
                int templete = 0;
                if (comboConfecionado.getValue() == null) {
                    templete = 1;
                    parametros.put("reportName", "Presupuesto por Renglón Variante");
                    parametros.put("empresa", empresa.getNombre());
                    parametros.put("comercial", empresa.getComercial());
                    parametros.put("image", "templete/logoReport.jpg");

                } else if (comboConfecionado.getValue() != null) {
                    templete = 2;
                    String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                    String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                    String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                    parametros.put("empresa", empresa.getNombre());
                    parametros.put("reportName", "Presupuesto por Renglón Variante");
                    parametros.put("comercial", empresa.getComercial());
                    parametros.put("image", "templete/logoReport.jpg");
                    parametros.put("conf", "Confeccionado: " + confe);
                    parametros.put("rev", "Revisado: " + rev);
                    parametros.put("aprub", "Aprobado: " + apro);
                }

                table = false;
                if (checkTable.isSelected() == false) {
                    table = true;
                }

                query.append(" GROUP BY ec.id, ec.descripcion, zon.id, zon.desripcion, ob.id, ob.descripcion, niv.id, niv.descripcion, esp.id, esp.descripcion, sub.id, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, rv.id, rv.codigo, rv.descripcion, rv.um, uor.conmat, rv.costomat, rv.costmano, rv.costequip, zon.codigo, ob.codigo, niv.codigo, esp.codigo, sub.codigo ");
                qmateriales.append(" GROUP BY ec.id, ec.descripcion, zon.id, zon.desripcion, ob.id, ob.descripcion, niv.id, niv.descripcion, esp.id, esp.descripcion, sub.id, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, bajo.idsuministro, bajo.tipo, rv.id, rv.codigo, rv.descripcion, rv.um, zon.codigo, ob.codigo, niv.codigo, esp.codigo, sub.codigo ");

                //System.out.println("Nivel: " + niveles);
                System.out.println("Query " + qmateriales.toString().trim());
                try {

                    renglonVarianteReportModelExtendArrayList = cfr.getRenglonesVariantesListPresRV(reportesController, query.toString().trim() + " ORDER BY uo.id, rv.id ASC ", qmateriales.toString().trim() + " ORDER BY uo.id, rv.id ASC ", obra);
                    System.out.println(renglonVarianteReportModelExtendArrayList.size() + " ***** ");
                    // renglonVarianteReportModelExtendArrayList.sort(Comparator.comparing(RenglonVarianteReportModelExtend::getIdEmpesa).thenComparing(RenglonVarianteReportModelExtend::getCodeZona).thenComparing(RenglonVarianteReportModelExtend::getCodeObjeto).thenComparing(RenglonVarianteReportModelExtend::getCodeNivel).thenComparing(RenglonVarianteReportModelExtend::getCodeEspecialidad).thenComparing(RenglonVarianteReportModelExtend::getCodeSub).thenComparing(RenglonVarianteReportModelExtend::getCodigo).thenComparing(RenglonVarianteReportModelExtend::getSobreGrup).thenComparing(RenglonVarianteReportModelExtend::getRvGrup).thenComparing(RenglonVarianteReportModelExtend::getGetSubreGrup));
                    presupuestoUORVNExtendArrayList = cfr.createReportesUORVExtendFormater(reportesController, renglonVarianteReportModelExtendArrayList, obra);

                    tarea = createTime(50);
                    stage = new ProgressDialog(tarea);
                    stage.setContentText("Preparando el reporte...");
                    stage.setTitle("Espere...");
                    new Thread(tarea).start();
                    stage.showAndWait();

                    boolean newG = false;
                    if (checkEsp.isSelected()) {
                        niveles = 0;
                        niveles = 9;
                        newG = true;
                        //presupuestoUORVNExtendArrayList.sort(Comparator.comparing(PresupuestoUORVNExtend::getIdEmpresa).thenComparing(PresupuestoUORVNExtend::getIdZona).thenComparing(PresupuestoUORVNExtend::getIdObjeto).thenComparing(PresupuestoUORVNExtend::getIdNivel).thenComparing(PresupuestoUORVNExtend::getIdEspecialidad).thenComparing(PresupuestoUORVNExtend::getIdSub).thenComparing(PresupuestoUORVNExtend::getIdUnidad).thenComparing(PresupuestoUORVNExtend::getSobreGrup).thenComparing(PresupuestoUORVNExtend::getRvGrup).thenComparing(PresupuestoUORVNExtend::getGetSubreGrup));
                    }
                    presupuestoUORVNExtendArrayList.sort(Comparator.comparing(PresupuestoUORVNExtend::getIdEmpresa).thenComparing(PresupuestoUORVNExtend::getZona).thenComparing(PresupuestoUORVNExtend::getIdObjeto).thenComparing(PresupuestoUORVNExtend::getIdNivel).thenComparing(PresupuestoUORVNExtend::getEspecialidad).thenComparing(PresupuestoUORVNExtend::getSubespecialidad).thenComparing(PresupuestoUORVNExtend::getUnidad).thenComparing(PresupuestoUORVNExtend::getId));

                    boolean agr = false;
                    if (checkAgrup.isSelected()) {
                        agr = true;
                    }

                    if (checkExp.isSelected() == false) {
                        DynamicReport dr = bdr.createControlPresupReportUORVToRVExtend(reportesController, niveles, newG, templete, table, agr);
                        JRDataSource ds = new JRBeanCollectionDataSource(presupuestoUORVNExtendArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        JasperViewer.viewReport(jp, false);
                        garbage.gc();
                    } else {
                        parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                        DynamicReport dr = bdr.createControlPresupReportUORVToRVExtend(reportesController, niveles, newG, templete, table, agr);
                        JRDataSource ds = new JRBeanCollectionDataSource(presupuestoUORVNExtendArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        exportarExcel(jp);
                        garbage.gc();
                    }
                } catch (Exception ex) {
                    logger.info(ex.getMessage());
                }

            }

            /**
             * Totales por RV
             */
        } else if (checkRV.isSelected() == true && tipoTotales.isSelected() == true && checkCertif.isSelected() == false && ceckCertifmes.isSelected() == false && checkSalarios.isSelected() == false) {
            myFlag = true;

            query = new StringBuilder();
            niveles = 0;
            Subquery = null;
            Subquery = " SUM(uo.costomaterial), SUM(uo.costomano), SUM(uo.costoequipo) FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";

            if (comboObras.getValue() != null) {
                partObras = comboObras.getValue().split(" - ");
                select = "SELECT ec.id, ec.codigo, ec.descripcion, ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion ";

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                niveles = 1;
            }

            if (comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                select = "SELECT ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion  ";
                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                partZonas = comboZonas.getValue().split(" - ");
                if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                } else if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                }
                niveles = 2;
            } else if (comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                select = "SELECT ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";

                partZonas = comboZonas.getValue().split(" - ");
                if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                } else if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                }

                partObj = comboObjetos.getValue().split(" - ");
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }
                niveles = 3;

            } else if (comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                select = "SELECT ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion,  ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion ";

                partZonas = comboZonas.getValue().split(" - ");
                if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                } else if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                }

                partObj = comboObjetos.getValue().split(" - ");
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }

                partNiv = comboNivel.getValue().split(" - ");
                if (comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " ";
                } else if (!comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                }
                niveles = 4;

            } else if (comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                select = "SELECT ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion  ";

                partZonas = comboZonas.getValue().split(" - ");
                if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                } else if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                }

                partObj = comboObjetos.getValue().split(" - ");
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }

                partNiv = comboNivel.getValue().split(" - ");
                if (comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " ";
                } else if (!comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                }

                partEsp = comboEspecialidades.getValue().split(" - ");
                if (comboEspecialidades.getValue().contentEquals("Todas")) {
                    subQEsp = " ";
                } else if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                }
                niveles = 5;
            } else if (comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
                niveles = 0;
                select = "SELECT ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion,  ";
                group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";
                partZonas = comboZonas.getValue().split(" - ");
                if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                } else if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                }

                partObj = comboObjetos.getValue().split(" - ");
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }

                partNiv = comboNivel.getValue().split(" - ");
                if (comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " ";
                } else if (!comboNivel.getValue().contentEquals("Todos")) {
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                }

                partEsp = comboEspecialidades.getValue().split(" - ");
                if (comboEspecialidades.getValue().contentEquals("Todas")) {
                    subQEsp = " ";
                } else if (!comboEspecialidades.getValue().contentEquals("Todas")) {
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                }

                partSub = comboSubespecialidades.getValue().split(" - ");
                if (comboSubespecialidades.getValue().equals("Todas")) {
                    subQSub = " ";
                } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                    subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue().trim());
                    ;
                }

                niveles = 6;

            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;
            }

            query = new StringBuilder();

            if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);
            }

            if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);
            }
            if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);
            }
            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {

                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);
            }

            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);
            }

            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(group);
            }

            if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQSub == null && comboEspecialidades.getValue() != null) {
                niveles = 0;
                query = new StringBuilder();
                String myQuery = "SELECT ec.id, ec.codigo, ec.descripcion, esp.codigo, esp.descripcion, SUM(uo.costomaterial), SUM(uo.costomano), SUM(uo.costoequipo) FROM Nivelespecifico uo INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id WHERE ";
                query.append(myQuery);
                query.append(subQObr);
                if (comboEspecialidades.getValue().equals("Todas")) {
                    query.append(" ");
                } else if (!comboEspecialidades.getValue().equals("Todas")) {
                    query.append(subQEsp);
                }

                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, esp.codigo, esp.descripcion ");
                niveles = 15;

            }

            System.out.println(niveles);
            System.out.println(query.toString().trim());

            date = LocalDate.now();
            parametros = new HashMap<>();
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            if (checkFecha.isSelected()) {
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            } else {
                parametros.put("fecha", " ");
            }
            int templete = 0;
            if (comboConfecionado.getValue() == null) {
                templete = 1;
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("reportName", "Resumen de Costos Directos");
                parametros.put("image", "templete/logoReport.jpg");
            } else if (comboConfecionado.getValue() != null) {
                templete = 2;
                String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("conf", "Confeccionado: " + confe);
                parametros.put("rev", "Revisado: " + rev);
                parametros.put("aprub", "Aprobado: " + apro);
                parametros.put("reportName", "Resumen de Costos Directos");
            }
            List<TotalReportFormater> totalReportFormaterList = new ArrayList<>();
            try {

                totalReportModelArrayList = new ArrayList<>();
                totalReportModelArrayList = cfr.getTotales(reportesController, query.toString().trim(), niveles);

                //List<TotalReportModel>
                totalReportFormaterList = cfr.createReportTotalesFormater(totalReportModelArrayList, obra);

                if (niveles == 1) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa));
                } else if (niveles == 2) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getZona));
                } else if (niveles == 3) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getZona).thenComparing(TotalReportFormater::getObjeto));
                } else if (niveles == 4) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getZona).thenComparing(TotalReportFormater::getObjeto).thenComparing(TotalReportFormater::getNivel));
                } else if (niveles == 5) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getZona).thenComparing(TotalReportFormater::getObjeto).thenComparing(TotalReportFormater::getNivel).thenComparing(TotalReportFormater::getEspecialidad));
                } else if (niveles == 6) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getZona).thenComparing(TotalReportFormater::getObjeto).thenComparing(TotalReportFormater::getNivel).thenComparing(TotalReportFormater::getEspecialidad).thenComparing(TotalReportFormater::getSubespecialidad));
                } else if (niveles == 15) {
                    totalReportFormaterList.sort(Comparator.comparing(TotalReportFormater::getIdEmpresa).thenComparing(TotalReportFormater::getEspecialidad));
                }

            } catch (Exception ex) {
                ex.printStackTrace();

                Alert alert = new Alert(Alert.AlertType.WARNING);

                VBox dialogPaneContent = new VBox();
                Label label = new Label("Error:");

                TextArea textArea = new TextArea();
                textArea.setText(ex.getMessage());
                dialogPaneContent.getChildren().addAll(label, textArea);
                // Set content for Dialog Pane
                alert.getDialogPane().setContent(dialogPaneContent);
                alert.showAndWait();
            }

            indication.setText(" ");
            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();


            try {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createTotalReport(reportesController, niveles);
                    JRDataSource ds = new JRBeanCollectionDataSource(totalReportFormaterList.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList()));
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createTotalReport(reportesController, niveles);
                    JRDataSource ds = new JRBeanCollectionDataSource(totalReportFormaterList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    exportarExcel(jp);
                }
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (JRException e) {
                e.printStackTrace();
            }

        }
        if (checkRV.isSelected() == true && tipoRV.isSelected() == true && checkPlan.isSelected() == true && checlRecu.isSelected() == false) {
            myFlag = true;
            query = new StringBuilder();
            qmateriales = new StringBuilder();
            niveles = 0;

            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, rv.id, rv.codigo,  rv.descripcion, rv.um, cert.cantidad, cert.costomano, cert.costoequipo, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion FROM Nivelespecifico uo LEFT JOIN Planrenglonvariante cert ON uo.id  = cert.nivelespecificoId LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id LEFT JOIN Renglonvariante rv ON cert.renglonvarianteId = rv.id LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, rv.id, rv.codigo,  rv.descripcion, rv.um, cert.cantidad, cuo.cantidad, cuo.costo, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, cuo.recursoId, cuo.tipo FROM Nivelespecifico uo INNER JOIN Planrenglonvariante cert ON uo.id  = cert.nivelespecificoId LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id  LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id  LEFT JOIN Planrecrv cuo ON cert.id = cuo.planId LEFT JOIN Renglonvariante rv ON cuo.renglonId = rv.id LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            qmateriales.append(Subquery1);

            if (comboObras.getValue() != null) {
                partObras = comboObras.getValue().split(" - ");
                //idObr = Integer.parseInt(partObras[0]);

                subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                niveles = 1;

            }

            if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
                niveles = 2;
            } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

                partZonas = comboZonas.getValue().split(" - ");
                //idZon = Integer.parseInt(partZonas[0]);

                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                niveles = 2;
            }

            if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
                niveles = 3;
            } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
                partObj = comboObjetos.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;

                niveles = 3;

            }

            if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
                niveles = 4;

            } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
                partNiv = comboNivel.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;

                niveles = 4;

            }

            if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
                niveles = 5;
            } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
                partEsp = comboEspecialidades.getValue().split(" - ");
                //idEsp = Integer.parseInt(partEsp[0]);
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;

                niveles = 5;
            }

            if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
                niveles = 6;
            } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
                partSub = comboSubespecialidades.getValue().split(" - ");
                // idSub = Integer.parseInt(partSub[0]);
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
                niveles = 6;

            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                // idEmp = Integer.parseInt(partEmp[0]);

                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;
            }

            if (comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {
                niveles = 7;
            } else if (comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
                partBrig = comboBrigada.getValue().split(" - ");

                subQBrig = " AND pl.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                niveles = 7;
            }

            if (comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todas")) {
                niveles = 8;
            } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todas")) {
                partGrup = comboGrupo.getValue().split(" - ");

                subQGrup = " AND pl.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                niveles = 8;
            }

            if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
                niveles = 9;
            } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
                partCuad = comboCuadrilla.getValue().split(" - ");

                subQCuad = " AND pl.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
                niveles = 9;
            }

            query.append(subQObr);
            qmateriales.append(subQObr);
            if (subQZon != null) {
                query.append(subQZon);
                qmateriales.append(subQZon);


            }
            if (subQObj != null) {
                query.append(subQObj);
                qmateriales.append(subQObj);

            }
            if (subQNiv != null) {
                query.append(subQNiv);
                qmateriales.append(subQNiv);


            }

            if (subQEsp != null) {
                query.append(subQEsp);
                qmateriales.append(subQEsp);

            }

            if (subQSub != null) {
                query.append(subQSub);
                qmateriales.append(subQSub);

            }

            if (subQEmp != null) {
                query.append(subQEmp);
                qmateriales.append(subQEmp);

            }

            if (subQBrig != null) {
                query.append(subQBrig);
                qmateriales.append(subQBrig);
            }

            if (subQGrup != null) {
                query.append(subQGrup);
                qmateriales.append(subQGrup);
            }

            if (subQCuad != null) {
                query.append(subQCuad);
                qmateriales.append(subQCuad);
            }


            if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
                alert.showAndWait();
            } else {
                LocalDate dateDes = pickerDesde.getValue();
                LocalDate dateHast = pickerHasta.getValue();
                desdeDate = Date.valueOf(dateDes);
                hastaData = Date.valueOf(dateHast);
                String timeRestrict = " AND cert.desde >= '" + desdeDate.toString().trim() + "' AND cert.hasta <= '" + hastaData.toString().trim() + "'";
                query.append(timeRestrict);
                qmateriales.append(timeRestrict);

                qmateriales.append(" ORDER BY cuo.tipo ");

                intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
            }


            date = LocalDate.now();
            parametros = new HashMap<>();
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());

            if (othersOptions.getValue() != null && othersOptions.getValue().equals("Inversionista")) {
                System.out.println(othersOptions.getValue());
                parametros.put("inver", "Cliente: " + obra.getInversionistaByInversionistaId().getCodigo() + " " + obra.getInversionistaByInversionistaId().getDescripcion());
            } else {
                parametros.put("inver", " ");
            }

            if (checkFecha.isSelected()) {
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            } else {
                parametros.put("fecha", " ");
            }
            int templete = 0;
            if (comboConfecionado.getValue() == null) {
                templete = 1;
                parametros.put("reportName", "Planificación: " + intervalo);
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");

            } else if (comboConfecionado.getValue() != null) {
                templete = 2;
                String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                parametros.put("empresa", empresa.getNombre());
                parametros.put("reportName", "Certificación Origen por Unidades de Obra");
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("conf", "Confeccionado: " + confe);
                parametros.put("rev", "Revisado: " + rev);
                parametros.put("aprub", "Aprobado: " + apro);
            }

            table = false;
            if (checkTable.isSelected() == false) {
                table = true;
            }

            try {

                System.out.println(query.toString().trim());
                planificacionMesUORVArrayList = new ArrayList<>();
                planificacionMesUORVArrayList = cfr.getDatosPlanificacionMesUORVRVModelArrayList(reportesController, query.toString().trim(), qmateriales.toString().trim());


                if (planificacionMesUORVArrayList.size() != 0) {

                    planificacionMesUOinRVArrayList = new ArrayList<PlanificacionMesUOinRV>();
                    planificacionMesUOinRVArrayList = cfr.createReportesPlanMesUORVFormater(reportesController, planificacionMesUORVArrayList, obra);
                    indication.setText(" ");
                    tarea = createTime(50);
                    stage = new ProgressDialog(tarea);
                    stage.setContentText("Preparando el reporte...");
                    stage.setTitle("Espere...");
                    new Thread(tarea).start();
                    stage.showAndWait();


                    if (checkExp.isSelected() == false) {
                        DynamicReport dr = bdr.createCertificacionOrigenUORV(reportesController, niveles, templete, table);
                        JRDataSource ds = new JRBeanCollectionDataSource(planificacionMesUOinRVArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        stage.close();
                        JasperViewer.viewReport(jp, false);
                    } else {
                        parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                        DynamicReport dr = bdr.createCertificacionOrigenUORV(reportesController, niveles, templete, table);
                        JRDataSource ds = new JRBeanCollectionDataSource(planificacionMesUOinRVArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        stage.close();
                        exportarExcel(jp);
                    }


                } else {

                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setHeaderText("Información");
                    alert.setContentText("No exiten planificaciones en esta ObraPCW");
                    alert.showAndWait();
                }

            } catch (Exception ex) {
                logger.info(ex.getMessage());
            }

        }
        if (checkRV.isSelected() == true && tipoRV.isSelected() == true && checkCertif.isSelected() == true) {
            myFlag = true;
            query = new StringBuilder();
            qmateriales = new StringBuilder();
            niveles = 0;

            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, cert.cantidad, cert.costomaterial, cert.costomano, cert.costoequipo, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cert.id, cuad.codigo, cuad.descripcion, rv.id, rv.costomat, rv.costmano, rv.costequip FROM Nivelespecifico uo INNER JOIN CertificacionRenglonVariante cert ON uo.id  = cert.nivelespecificoId LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id LEFT JOIN  Renglonvariante rv ON cert.renglonvarianteId = rv.id LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, cert.cantidad, cuo.cantidad, cuo.costo, cuo.tipo, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, cert.id, rv.id, cuo.recursoId FROM Nivelespecifico uo LEFT JOIN CertificacionRenglonVariante cert ON uo.id  = cert.nivelespecificoId LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id LEFT JOIN  Certificacionrecrv cuo ON cert.id = cuo.certificacionId LEFT JOIN Renglonvariante rv ON cuo.renglonId = rv.id LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            qmateriales.append(Subquery1);

            if (comboObras.getValue() != null) {
                partObras = comboObras.getValue().split(" - ");
                //idObr = Integer.parseInt(partObras[0]);

                subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                niveles = 1;
            }

            if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
                niveles = 2;
            } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

                partZonas = comboZonas.getValue().split(" - ");
                //idZon = Integer.parseInt(partZonas[0]);

                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                niveles = 2;
            }

            if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
                niveles = 3;
            } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
                partObj = comboObjetos.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;

                niveles = 3;

            }

            if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
                niveles = 4;

            } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
                partNiv = comboNivel.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;

                niveles = 4;

            }

            if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
                niveles = 5;
            } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
                partEsp = comboEspecialidades.getValue().split(" - ");
                //idEsp = Integer.parseInt(partEsp[0]);
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;

                niveles = 5;
            }

            if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
                niveles = 6;
            } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
                partSub = comboSubespecialidades.getValue().split(" - ");
                // idSub = Integer.parseInt(partSub[0]);
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
                niveles = 6;

            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                // idEmp = Integer.parseInt(partEmp[0]);

                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;


            }

            if (comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {
                niveles = 7;
            } else if (comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
                partBrig = comboBrigada.getValue().split(" - ");

                subQBrig = "AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                ;
                niveles = 7;
                System.out.println(subQBrig);
            }

            if (comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todas")) {
                niveles = 8;
            } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todas")) {
                partGrup = comboGrupo.getValue().split(" - ");

                subQGrup = "AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                ;
                niveles = 8;
            }

            if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
                niveles = 9;
            } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
                partCuad = comboCuadrilla.getValue().split(" - ");

                subQCuad = "AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
                ;
                niveles = 9;
            }

            query.append(subQObr);
            qmateriales.append(subQObr);
            if (subQZon != null) {
                query.append(subQZon);
                qmateriales.append(subQZon);


            }
            if (subQObj != null) {
                query.append(subQObj);
                qmateriales.append(subQObj);

            }
            if (subQNiv != null) {
                query.append(subQNiv);
                qmateriales.append(subQNiv);


            }

            if (subQEsp != null) {
                query.append(subQEsp);
                qmateriales.append(subQEsp);

            }

            if (subQSub != null) {
                query.append(subQSub);
                qmateriales.append(subQSub);

            }

            if (subQEmp != null) {
                query.append(subQEmp);
                qmateriales.append(subQEmp);

            }

            if (subQBrig != null) {
                query.append(subQBrig);
                qmateriales.append(subQBrig);

            }

            if (subQGrup != null) {
                query.append(subQGrup);
                qmateriales.append(subQGrup);

            }

            if (subQCuad != null) {
                query.append(subQCuad);
                qmateriales.append(subQCuad);

            }

            date = LocalDate.now();
            parametros = new HashMap<>();
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());

            if (othersOptions.getValue() != null && othersOptions.getValue().equals("Inversionista")) {
                System.out.println(othersOptions.getValue());
                parametros.put("inver", "Cliente: " + obra.getInversionistaByInversionistaId().getCodigo() + " " + obra.getInversionistaByInversionistaId().getDescripcion());
            } else {
                parametros.put("inver", " ");
            }

            if (checkFecha.isSelected()) {
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            } else {
                parametros.put("fecha", " ");
            }
            int templete = 0;
            if (comboConfecionado.getValue() == null) {
                templete = 1;
                parametros.put("reportName", "Certificación Origen por Renglón Variante");
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");

            } else if (comboConfecionado.getValue() != null) {
                templete = 2;
                String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                parametros.put("empresa", empresa.getNombre());
                parametros.put("reportName", "Certificación Origen por Renglón Variante");
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("conf", "Confeccionado: " + confe);
                parametros.put("rev", "Revisado: " + rev);
                parametros.put("aprub", "Aprobado: " + apro);
            }

            table = false;
            if (checkTable.isSelected() == false) {
                table = true;
            }


            query.append(" ORDER BY cert.id");
            qmateriales.append(" ORDER BY cert.id, cuo.tipo");

            try {
                datosCertificacionOrigenUORVArrayList = new ArrayList<>();
                datosCertificacionOrigenUORVArrayList = cfr.getDatosCertificacionOrigenUOinRVRVArrayList(reportesController, query.toString().trim(), qmateriales.toString().trim(), obra.getId());

                if (datosCertificacionOrigenUORVArrayList.size() != 0) {

                    certificacionOrigenUOinRVArrayList = new ArrayList<>();
                    certificacionOrigenUOinRVArrayList = cfr.createReportesCOUORVFormater(reportesController, datosCertificacionOrigenUORVArrayList, obra);
                    indication.setText(" ");
                    tarea = createTime(50);
                    stage = new ProgressDialog(tarea);
                    stage.setContentText("Preparando el reporte...");
                    stage.setTitle("Espere...");
                    new Thread(tarea).start();
                    stage.showAndWait();


                    if (checkExp.isSelected() == false) {
                        DynamicReport dr = bdr.createCertificacionOrigenRVRV(reportesController, niveles, templete, table);
                        JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOinRVArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        stage.close();
                        JasperViewer.viewReport(jp, false);
                    } else {
                        parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                        DynamicReport dr = bdr.createCertificacionOrigenRVRV(reportesController, niveles, templete, table);
                        JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOinRVArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        stage.close();
                        exportarExcel(jp);
                    }
                } else {

                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setHeaderText("Información");
                    alert.setContentText("No exiten certificaciones en esta ObraPCW");
                    alert.showAndWait();
                }

            } catch (Exception ex) {
                logger.info(ex.getMessage());
            }
        } else if (checkRV.isSelected() == true && ceckCertifmes.isSelected() == true && tipoRV.isSelected() == true && checlRecu.isSelected() == false) {
            myFlag = true;
            query = new StringBuilder();
            qmateriales = new StringBuilder();

            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, cert.cantidad, cert.costomaterial, cert.costomano, cert.costoequipo, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cert.id, cuad.codigo, cuad.descripcion, rv.id, rv.costomat, rv.costmano, rv.costequip FROM Nivelespecifico uo INNER JOIN CertificacionRenglonVariante cert ON uo.id  = cert.nivelespecificoId LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id LEFT JOIN  Renglonvariante rv ON cert.renglonvarianteId = rv.id LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, cert.cantidad, cuo.cantidad, cuo.costo, cuo.tipo, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, cert.id, rv.id, cuo.recursoId FROM Nivelespecifico uo LEFT JOIN CertificacionRenglonVariante cert ON uo.id  = cert.nivelespecificoId LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id LEFT JOIN  Certificacionrecrv cuo ON cert.id = cuo.certificacionId LEFT JOIN Renglonvariante rv ON cuo.renglonId = rv.id LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            qmateriales.append(Subquery1);

            if (comboObras.getValue() != null) {
                partObras = comboObras.getValue().split(" - ");
                //idObr = Integer.parseInt(partObras[0]);

                subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                niveles = 1;

            }

            if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
                niveles = 2;
            } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {
                partZonas = comboZonas.getValue().split(" - ");
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                niveles = 2;
            }

            if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
                niveles = 3;
            } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
                partObj = comboObjetos.getValue().split(" - ");
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                niveles = 3;

            }

            if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
                niveles = 4;

            } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
                partNiv = comboNivel.getValue().split(" - ");
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                niveles = 4;

            }

            if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
                niveles = 5;
            } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
                partEsp = comboEspecialidades.getValue().split(" - ");
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
                niveles = 5;
            }

            if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
                niveles = 6;
            } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
                partSub = comboSubespecialidades.getValue().split(" - ");
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
                niveles = 6;

            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;
            }

            if (comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {
                niveles = 7;
            } else if (comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
                partBrig = comboBrigada.getValue().split(" - ");

                subQBrig = " AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                ;
                niveles = 7;
            }

            if (comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todas")) {
                niveles = 8;
            } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todas")) {
                partGrup = comboGrupo.getValue().split(" - ");

                subQGrup = " AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                ;
                niveles = 8;
            }

            if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
                niveles = 9;
            } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
                partCuad = comboCuadrilla.getValue().split(" - ");

                subQCuad = " AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
                ;
                niveles = 9;
            }

            query.append(subQObr);
            qmateriales.append(subQObr);
            if (subQZon != null) {
                query.append(subQZon);
                qmateriales.append(subQZon);


            }
            if (subQObj != null) {
                query.append(subQObj);
                qmateriales.append(subQObj);

            }
            if (subQNiv != null) {
                query.append(subQNiv);
                qmateriales.append(subQNiv);


            }

            if (subQEsp != null) {
                query.append(subQEsp);
                qmateriales.append(subQEsp);

            }

            if (subQSub != null) {
                query.append(subQSub);
                qmateriales.append(subQSub);

            }

            if (subQEmp != null) {
                query.append(subQEmp);
                qmateriales.append(subQEmp);

            }

            if (subQBrig != null) {
                query.append(subQBrig);
                qmateriales.append(subQBrig);
            }

            if (subQGrup != null) {
                query.append(subQGrup);
                qmateriales.append(subQGrup);
            }

            if (subQCuad != null) {
                query.append(subQCuad);
                qmateriales.append(subQCuad);
            }


            if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
                alert.showAndWait();
            } else {
                LocalDate dateDes = pickerDesde.getValue();
                LocalDate dateHast = pickerHasta.getValue();
                desdeDate = Date.valueOf(dateDes);
                hastaData = Date.valueOf(dateHast);
                String timeRestrict = " AND cert.desde >= '" + desdeDate.toString().trim() + "' AND cert.hasta <= '" + hastaData.toString().trim() + "'";
                query.append(timeRestrict);
                qmateriales.append(timeRestrict);

                intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
            }


            date = LocalDate.now();
            parametros = new HashMap<>();
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());

            if (othersOptions.getValue() != null && othersOptions.getValue().equals("Inversionista")) {
                System.out.println(othersOptions.getValue());
                parametros.put("inver", "Cliente: " + obra.getInversionistaByInversionistaId().getCodigo() + " " + obra.getInversionistaByInversionistaId().getDescripcion());
            } else {
                parametros.put("inver", " ");
            }

            if (checkFecha.isSelected()) {
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            } else {
                parametros.put("fecha", " ");
            }
            int templete = 0;
            if (comboConfecionado.getValue() == null) {
                templete = 1;
                parametros.put("reportName", "Certificación: " + intervalo);
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");

            } else if (comboConfecionado.getValue() != null) {
                templete = 2;
                String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                parametros.put("empresa", empresa.getNombre());
                parametros.put("reportName", "Certificación: " + intervalo);
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("conf", "Confeccionado: " + confe);
                parametros.put("rev", "Revisado: " + rev);
                parametros.put("aprub", "Aprobado: " + apro);
            }

            table = false;
            if (checkTable.isSelected() == false) {
                table = true;
            }

            qmateriales.append(" ORDER BY cert.id");
            System.out.println(query.toString().trim());
            try {
                datosCertificacionOrigenUORVArrayList = new ArrayList<>();
                datosCertificacionOrigenUORVArrayList = cfr.getDatosCertificacionOrigenUOinRVRVArrayList(reportesController, query.toString().trim(), qmateriales.toString().trim(), obra.getId());

                if (datosCertificacionOrigenUORVArrayList.size() != 0) {

                    certificacionOrigenUOinRVArrayList = new ArrayList<CertificacionOrigenUOinRV>();
                    certificacionOrigenUOinRVArrayList = cfr.createReportesCOUORVFormater(reportesController, datosCertificacionOrigenUORVArrayList, obra);
                    indication.setText(" ");
                    tarea = createTime(50);
                    stage = new ProgressDialog(tarea);
                    stage.setContentText("Preparando el reporte...");
                    stage.setTitle("Espere...");
                    new Thread(tarea).start();
                    stage.showAndWait();


                    if (checkExp.isSelected() == false) {
                        DynamicReport dr = bdr.createCertificacionOrigenUORV(reportesController, niveles, templete, table);
                        JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOinRVArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        stage.close();
                        JasperViewer.viewReport(jp, false);
                    } else {
                        parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                        DynamicReport dr = bdr.createCertificacionOrigenUORV(reportesController, niveles, templete, table);
                        JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOinRVArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        stage.close();
                        exportarExcel(jp);
                    }

                } else {

                    Alert alert = new Alert(Alert.AlertType.INFORMATION);
                    alert.setHeaderText("Información");
                    alert.setContentText("No exiten certificaciones en esta ObraPCW");
                    alert.showAndWait();
                }
            } catch (Exception ex) {
                logger.info(ex.getMessage());
            }
        }

        if (checkUnidad.isSelected() == true && checkPresup.isSelected() == true && tipoRV.isSelected() == true && tipoUO.isSelected() == false) {
            myFlag = true;
            createReportObraRV();
        }

        if (checkCertif.isSelected() == true && checkUnidad.isSelected() == true && checlRecu.isSelected() == true && othersOptions.getValue() != null && othersOptions.getValue().equals("Pendientes")) {

            createReportPendientes();
        }

        if (checkRV.isSelected() == true && checkPresup.isSelected() == true && checlRecu.isSelected() == true && tipoRV.isSelected() == false && checkSalarios.isSelected() == false && checkSalarios.isSelected() == false) {
            myFlag = true;
            query = new StringBuilder();
            qmateriales = new StringBuilder();
            queryRecursos = new StringBuilder();
            qRecursos = null;
            niveles = 0;
            groupRcRV = null;

            if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
                Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
                Subquery1 = " SUM(bajo.cantidad), bajo.idsuministro, bajo.tipo FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN Bajoespecificacionrv bajo ON uo.id = bajo.nivelespecifico__id AND uor.renglonvariante__id = bajo.renglonvariante__id WHERE ";
                qRecursos = " uor.cantidad, uor.renglonvarianteId FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId WHERE uor.conmat = '1 ' AND ";
            } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
                Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
                Subquery1 = null;
                qRecursos = null;
            } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
                Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '3' AND ";
                Subquery1 = null;
                qRecursos = null;
            } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
                Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '2' AND ";
                Subquery1 = null;
                qRecursos = null;
            } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
                Subquery = null;
                Subquery1 = " SUM(bajo.cantidad), bajo.idsuministro, bajo.tipo FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN Bajoespecificacionrv bajo ON uo.id = bajo.nivelespecifico__id AND uor.renglonvariante__id = bajo.renglonvariante__id WHERE ";
                qRecursos = " uor.cantidad, uor.renglonvarianteId FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId WHERE uor.conmat = '1 ' AND ";
            } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
                Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '3' AND ";
                Subquery1 = " SUM(bajo.cantidad), bajo.idsuministro, bajo.tipo FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN Bajoespecificacionrv bajo ON uo.id = bajo.nivelespecifico__id AND uor.renglonvariante__id = bajo.renglonvariante__id WHERE ";
                qRecursos = " uor.cantidad, uor.renglonvarianteId FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId WHERE uor.conmat = '1 ' AND ";

            } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
                Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '2' AND ";
                Subquery1 = " SUM(bajo.cantidad), bajo.idsuministro, bajo.tipo FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN Bajoespecificacionrv bajo ON uo.id = bajo.nivelespecifico__id AND uor.renglonvariante__id = bajo.renglonvariante__id WHERE ";
                qRecursos = " uor.cantidad, uor.renglonvarianteId FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId WHERE uor.conmat = '1 ' AND ";
            }


            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;
                subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;
            }


            if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {

                partObras = comboObras.getValue().split(" - ");

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                select = "SELECT ";
                group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
                groupM = " GROUP BY bajo.idsuministro, bajo.tipo ";

                niveles = 1;
            } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
                partObras = comboObras.getValue().split(" - ");
                partZonas = comboZonas.getValue().split(" - ");

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                    subQZonM = " ";
                } else if (!comboZonas.getValue().equals("Todas")) {
                    partZonas = comboZonas.getValue().split(" - ");
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                }

                select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ";
                group = " GROUP BY zon.codigo, zon.desripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
                groupM = " GROUP BY bajo.idsuministro, bajo.tipo, zon.codigo, zon.desripcion ";
                groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ";

                niveles = 2;
            } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
                niveles = 0;

                partObras = comboObras.getValue().split(" - ");
                partZonas = comboZonas.getValue().split(" - ");
                partObj = comboObjetos.getValue().split(" - ");

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                    subQZonM = " ";
                } else if (!comboZonas.getValue().equals("Todas")) {

                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                }

                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                    subQObjM = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }

                select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, ";
                group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
                groupM = " GROUP BY bajo.idsuministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion  ";
                groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

                niveles = 3;

            } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                partObras = comboObras.getValue().split(" - ");
                partZonas = comboZonas.getValue().split(" - ");
                partObj = comboObjetos.getValue().split(" - ");
                partNiv = comboNivel.getValue().split(" - ");

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                    subQZonM = " ";
                } else if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                }
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                    subQObjM = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }

                if (comboNivel.getValue().equals("Todos")) {
                    subQNiv = " ";
                    subQNivM = " ";
                } else if (!comboNivel.getValue().equals("Todos")) {
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                    subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                }

                select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
                group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.codigo, rec.descripcion, rec.um, rec.id ";
                groupM = " GROUP BY bajo.idsuministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion,  niv.codigo, niv.descripcion  ";
                groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
                niveles = 4;

            } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 0;

                partObras = comboObras.getValue().split(" - ");
                partZonas = comboZonas.getValue().split(" - ");
                partObj = comboObjetos.getValue().split(" - ");
                partNiv = comboNivel.getValue().split(" - ");
                partEsp = comboEspecialidades.getValue().split(" - ");

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                    subQZonM = " ";
                } else if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                }
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                    subQObjM = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }


                if (comboNivel.getValue().equals("Todos")) {
                    subQNiv = " ";
                    subQNivM = " ";
                } else if (!comboNivel.getValue().equals("Todos")) {
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                    subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                }

                if (comboEspecialidades.getValue().equals("Todas")) {
                    subQEsp = " ";
                    subQEspM = " ";
                } else if (!comboEspecialidades.getValue().equals("Todas")) {
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                }

                select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, ";
                group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
                groupM = " GROUP BY bajo.idsuministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion  ";
                niveles = 5;
                groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, ";

            } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
                niveles = 0;

                partObras = comboObras.getValue().split(" - ");
                partZonas = comboZonas.getValue().split(" - ");
                partObj = comboObjetos.getValue().split(" - ");
                partNiv = comboNivel.getValue().split(" - ");
                partEsp = comboEspecialidades.getValue().split(" - ");
                partSub = comboSubespecialidades.getValue().split(" - ");

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                if (comboZonas.getValue().equals("Todas")) {
                    subQZon = " ";
                    subQZonM = " ";
                } else if (!comboZonas.getValue().equals("Todas")) {
                    subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                    subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    ;
                }
                if (comboObjetos.getValue().equals("Todos")) {
                    subQObj = " ";
                    subQObjM = " ";
                } else if (!comboObjetos.getValue().equals("Todos")) {
                    subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                    subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                    ;
                }
                if (comboNivel.getValue().equals("Todos")) {
                    subQNiv = " ";
                    subQNivM = " ";
                } else if (!comboNivel.getValue().equals("Todos")) {
                    subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                    subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                    ;
                }
                if (comboEspecialidades.getValue().equals("Todas")) {
                    subQEsp = " ";
                    subQEsp = " ";
                } else if (!comboEspecialidades.getValue().equals("Todas")) {
                    subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                    subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    ;
                }
                if (comboSubespecialidades.getValue().equals("Todas")) {
                    subQSub = " ";
                    subQSubM = " ";
                } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                    subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                    subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());


                }
                select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, sub.codigo as codeSub, sub.descripcion as subdesc, ";
                group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
                groupM = " GROUP BY bajo.idsuministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  sub.codigo, sub.descripcion  ";
                groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
                niveles = 6;
            } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                partObras = comboObras.getValue().split(" - ");
                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


                select = "SELECT esp.codigo, esp.descripcion, ";
                group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
                groupM = " GROUP BY bajo.idsuministro, bajo.tipo, esp.codigo, esp.descripcion  ";

                groupRcRV = " GROUP BY esp.codigo, esp.descripcion, ";

                if (Subquery != null) {
                    if (subQEmp != null) {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        query.append(subQEsp);
                        query.append(subQEmp);
                        query.append(group);
                    } else {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                            query.append(subQEsp);
                        }
                        query.append(group);
                    }
                }
                if (Subquery1 != null) {
                    if (subQEmp != null) {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEspM = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;

                        }
                        qmateriales.append(subQEspM);
                        qmateriales.append(subQEmpM);
                        qmateriales.append(groupM);
                    } else {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEspM = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;

                        }
                        qmateriales.append(subQEspM);
                        qmateriales.append(groupM);
                    }
                }

                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                            queryRecursos.append(subQEsp);
                        }
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    }
                }

                niveles = 15;

            } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                partObras = comboObras.getValue().split(" - ");

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                select = "SELECT esp.codigo as codEs, esp.descripcion as desEs, zon.codigo, zon.desripcion, ";
                group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
                groupM = " GROUP BY bajo.idsuministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion ";

                groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ";

                if (Subquery != null) {
                    if (subQEmp != null) {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);

                        if (comboZonas.getValue().equals("Todas")) {
                            subQZon = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;
                        }
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;

                        }
                        query.append(subQZon);
                        query.append(subQEsp);
                        query.append(subQEmp);
                        query.append(group);
                    } else {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        if (comboZonas.getValue().equals("Todas")) {
                            subQZon = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;

                        }
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        query.append(subQZon);
                        query.append(subQEsp);
                        query.append(group);
                    }
                }
                if (Subquery1 != null) {
                    if (subQEmp != null) {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        if (comboZonas.getValue().equals("Todas")) {
                            subQZonM = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;
                        }
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEspM = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQEspM);
                        qmateriales.append(subQEmpM);
                        qmateriales.append(groupM);
                    } else {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        if (comboZonas.getValue().equals("Todas")) {
                            subQZonM = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;
                        }
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEspM = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;

                        }
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQEspM);
                        qmateriales.append(groupM);
                    }
                }

                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);

                        if (comboZonas.getValue().equals("Todas")) {
                            subQZon = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;
                        }
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;

                        }
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        if (comboZonas.getValue().equals("Todas")) {
                            subQZon = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;

                        }
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    }
                }

                niveles = 125;
            } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
                niveles = 0;
                partObras = comboObras.getValue().split(" - ");

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                select = "SELECT esp.codigo as espCo, esp.descripcion as espDe, zon.codigo as zonC, zon.desripcion as zonD, ob.codigo, ob.descripcion, ";
                group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, ob.codigo, ob.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
                groupM = " GROUP BY bajo.idsuministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
                groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

                if (Subquery != null) {
                    if (subQEmp != null) {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);

                        if (comboZonas.getValue().equals("Todas")) {
                            subQZon = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;
                        }

                        if (comboObjetos.getValue().equals("Todos")) {
                            subQObj = " ";

                        } else if (!comboObjetos.getValue().equals("Todos")) {
                            partObj = comboObjetos.getValue().split(" - ");
                            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                            ;

                        }

                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;

                        }
                        query.append(subQZon);
                        query.append(subQObj);
                        query.append(subQEsp);
                        query.append(subQEmp);
                        query.append(group);
                    } else {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        if (comboZonas.getValue().equals("Todas")) {
                            subQZon = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;

                        }
                        if (comboObjetos.getValue().equals("Todos")) {
                            subQObj = " ";
                        } else if (!comboObjetos.getValue().equals("Todos")) {
                            partObj = comboObjetos.getValue().split(" - ");
                            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                            ;

                        }
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        query.append(subQZon);
                        query.append(subQObj);
                        query.append(subQEsp);
                        query.append(group);
                    }
                }
                if (Subquery1 != null) {
                    if (subQEmp != null) {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        if (comboZonas.getValue().equals("Todas")) {
                            subQZonM = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;
                        }
                        if (comboObjetos.getValue().equals("Todos")) {
                            subQObjM = " ";
                        } else if (!comboObjetos.getValue().equals("Todos")) {
                            partObj = comboObjetos.getValue().split(" - ");
                            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                            ;
                        }
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEspM = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQObjM);
                        qmateriales.append(subQEspM);
                        qmateriales.append(subQEmpM);
                        qmateriales.append(groupM);
                    } else {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        if (comboZonas.getValue().equals("Todas")) {
                            subQZonM = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;
                        }
                        if (comboObjetos.getValue().equals("Todos")) {
                            subQObjM = " ";
                        } else if (!comboObjetos.getValue().equals("Todos")) {
                            partObj = comboObjetos.getValue().split(" - ");
                            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                            ;
                        }
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEspM = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQObjM);
                        qmateriales.append(subQEspM);
                        qmateriales.append(groupM);
                    }
                }

                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);

                        if (comboZonas.getValue().equals("Todas")) {
                            subQZon = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;
                        }

                        if (comboObjetos.getValue().equals("Todos")) {
                            subQObj = " ";

                        } else if (!comboObjetos.getValue().equals("Todos")) {
                            partObj = comboObjetos.getValue().split(" - ");
                            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                            ;

                        }

                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;

                        }
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQObj);
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        if (comboZonas.getValue().equals("Todas")) {
                            subQZon = " ";
                        } else if (!comboZonas.getValue().equals("Todas")) {
                            partZonas = comboZonas.getValue().split(" - ");
                            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                            ;

                        }
                        if (comboObjetos.getValue().equals("Todos")) {
                            subQObj = " ";
                        } else if (!comboObjetos.getValue().equals("Todos")) {
                            partObj = comboObjetos.getValue().split(" - ");
                            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                            ;

                        }
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQObj);
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    }
                }

                niveles = 1235;
            } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
                niveles = 0;
                partObras = comboObras.getValue().split(" - ");

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                select = "SELECT esp.codigo as esC, esp.descripcion as esDes, sub.codigo, sub.descripcion,";
                group = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
                groupM = " GROUP BY bajo.idsuministro, bajo.tipo, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";
                groupRcRV = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
                if (Subquery != null) {
                    if (subQEmp != null) {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        if (comboSubespecialidades.getValue().equals("Todas")) {
                            subQSub = " ";
                        } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                            partSub = comboSubespecialidades.getValue().split(" - ");
                            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                            ;
                            ;
                        }
                        query.append(subQEsp);
                        query.append(subQSub);
                        query.append(subQEmp);
                        query.append(group);
                    } else {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;

                        }
                        if (comboSubespecialidades.getValue().equals("Todas")) {
                            subQSub = " ";
                        } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                            partSub = comboSubespecialidades.getValue().split(" - ");
                            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                            ;
                            ;
                        }
                        query.append(subQEsp);
                        query.append(subQSub);
                        query.append(group);
                    }
                }
                if (Subquery1 != null) {
                    if (subQEmp != null) {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEspM = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;
                        }
                        if (comboSubespecialidades.getValue().equals("Todas")) {
                            subQSubM = " ";
                        } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                            partSub = comboSubespecialidades.getValue().split(" - ");
                            subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                            ;
                            ;
                        }
                        qmateriales.append(subQEspM);
                        qmateriales.append(subQSubM);
                        qmateriales.append(subQEmpM);
                        qmateriales.append(groupM);
                    } else {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEspM = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;

                        }
                        if (comboSubespecialidades.getValue().equals("Todas")) {
                            subQSubM = " ";
                        } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                            partSub = comboSubespecialidades.getValue().split(" - ");
                            subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        }
                        qmateriales.append(subQEspM);
                        qmateriales.append(subQSubM);
                        qmateriales.append(groupM);
                    }
                }

                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                        }
                        if (comboSubespecialidades.getValue().equals("Todas")) {
                            subQSub = " ";
                        } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                            partSub = comboSubespecialidades.getValue().split(" - ");
                            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                            ;
                            System.out.println(" *** " + subQSub);
                        }
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(subQSub);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        }
                        if (comboSubespecialidades.getValue().equals("Todas")) {
                            subQSub = " ";
                        } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                            partSub = comboSubespecialidades.getValue().split(" - ");
                            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());

                        }
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(subQSub);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    }
                }

                niveles = 156;
            }
            if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {
                if (Subquery != null) {
                    if (subQEmp != null) {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQEmp);
                        query.append(group);
                    } else {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(group);
                    }
                }
                if (Subquery1 != null) {
                    if (subQEmp != null) {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQEmpM);
                        qmateriales.append(groupM);
                    } else {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(groupM);
                    }

                }
                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(" GROUP BY uor.cantidad, uor.renglonvarianteId");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(" GROUP BY uor.cantidad, uor.renglonvarianteId");
                    }
                }

            } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {

                if (Subquery != null) {
                    if (subQEmp != null) {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQZon);
                        query.append(subQEmp);
                        query.append(group);
                    } else {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQZon);
                        query.append(group);
                    }
                }
                if (Subquery1 != null) {
                    if (subQEmp != null) {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQEmpM);
                        qmateriales.append(groupM);
                    } else {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQZonM);
                        qmateriales.append(groupM);
                    }

                }
                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQZon);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    }
                }

            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && comboEspecialidades.getValue() == null) {

                if (Subquery != null) {
                    if (subQEmp != null) {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQZon);
                        query.append(subQObj);
                        query.append(subQEmp);
                        query.append(group);
                    } else {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQZon);
                        query.append(subQObj);
                        query.append(group);
                    }
                }
                if (Subquery1 != null) {
                    if (subQEmp != null) {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQObjM);
                        qmateriales.append(subQEmpM);
                        qmateriales.append(groupM);
                    } else {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQObjM);
                        qmateriales.append(groupM);
                    }
                }

                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQObj);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQObj);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    }
                }


            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
                if (Subquery != null) {
                    if (subQEmp != null) {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQZon);
                        query.append(subQObj);
                        query.append(subQNiv);
                        query.append(subQEmp);
                        query.append(group);
                    } else {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQZon);
                        query.append(subQObj);
                        query.append(subQNiv);
                        query.append(group);
                    }
                }
                if (Subquery1 != null) {
                    if (subQEmp != null) {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQObjM);
                        qmateriales.append(subQNivM);
                        qmateriales.append(subQEmpM);
                        qmateriales.append(groupM);
                    } else {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQObjM);
                        qmateriales.append(subQNivM);
                        qmateriales.append(groupM);
                    }
                }
                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQObj);
                        queryRecursos.append(subQNiv);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQObj);
                        queryRecursos.append(subQNiv);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    }
                }

            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
                if (Subquery != null) {
                    if (subQEmp != null) {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQZon);
                        query.append(subQObj);
                        query.append(subQNiv);
                        query.append(subQEsp);
                        query.append(subQEmp);
                        query.append(group);
                    } else {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQZon);
                        query.append(subQObj);
                        query.append(subQNiv);
                        query.append(subQEsp);
                        query.append(group);
                    }
                }
                if (Subquery1 != null) {
                    if (subQEmp != null) {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQObjM);
                        qmateriales.append(subQNivM);
                        qmateriales.append(subQEspM);
                        qmateriales.append(subQEmpM);
                        qmateriales.append(groupM);
                    } else {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQObjM);
                        qmateriales.append(subQNivM);
                        qmateriales.append(subQEspM);
                        qmateriales.append(groupM);
                    }
                }
                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQObj);
                        queryRecursos.append(subQNiv);
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQObj);
                        queryRecursos.append(subQNiv);
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    }
                }
            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
                if (Subquery != null) {
                    if (subQEmp != null) {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQZon);
                        query.append(subQObj);
                        query.append(subQNiv);
                        query.append(subQEsp);
                        query.append(subQSub);
                        query.append(subQEmp);
                        query.append(group);
                    } else {
                        query.append(select);
                        query.append(Subquery);
                        query.append(subQObr);
                        query.append(subQZon);
                        query.append(subQObj);
                        query.append(subQNiv);
                        query.append(subQEsp);
                        query.append(subQSub);
                        query.append(group);
                    }
                }
                if (Subquery1 != null) {
                    if (subQEmp != null) {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQObjM);
                        qmateriales.append(subQNivM);
                        qmateriales.append(subQEspM);
                        qmateriales.append(subQSubM);
                        qmateriales.append(subQEmpM);
                        qmateriales.append(groupM);
                    } else {
                        qmateriales.append(select);
                        qmateriales.append(Subquery1);
                        qmateriales.append(subQObrM);
                        qmateriales.append(subQZonM);
                        qmateriales.append(subQObjM);
                        qmateriales.append(subQNivM);
                        qmateriales.append(subQEspM);
                        qmateriales.append(subQSubM);
                        qmateriales.append(groupM);
                    }
                }
                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQObj);
                        queryRecursos.append(subQNiv);
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(subQSub);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        queryRecursos.append(subQZon);
                        queryRecursos.append(subQObj);
                        queryRecursos.append(subQNiv);
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(subQSub);
                        queryRecursos.append(groupRcRV + " uor.cantidad, uor.renglonvarianteId ");
                    }
                }

            }

            ArrayList<DatosCuantitativaGenreralModel> temp = new ArrayList<>();
            ArrayList<DatosCuantitativaGenreralModel> dataToFilter = new ArrayList<>();
            parametros = new HashMap<>();
            Empresaconstructora empresaconstructora = new Empresaconstructora();
            if (comboEmpresas.getValue() == null) {
                parametros.put("empName", " ");
            } else if (comboEmpresas.getValue() != null) {
                int id = reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                empresaconstructora = reportProjectStructureSingelton.getEmpresaconstructora(id);
                parametros.put("empName", "Empresa: " + empresaconstructora.getCodigo() + " - " + empresaconstructora.getDescripcion());
            }
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            System.out.printf(qmateriales.toString().trim());

            try {
                ArrayList<DatosCuantitativaGenreralModel> tempNoMat = new ArrayList<>();
                tempNoMat = cfr.getRecursosGeneral(reportesController, query.toString().trim(), niveles, empresaconstructora, obra, queryRecursos.toString().trim());
                dataToFilter.addAll(tempNoMat);

                temp.addAll(dataToFilter);
                ifDesglose = false;
                if (checkDesglose.isSelected()) {
                    ifDesglose = true;
                }
                if (Subquery1 != null) {
                    ArrayList<DatosCuantitativaGenreralModel> tempMat = new ArrayList<>();
                    tempMat = cfr.getRecursosGeneralMateriales(reportesController, qmateriales.toString().trim(), niveles, ifDesglose, obra, empresaconstructora);
                    temp.addAll(tempMat);
                }


                date = LocalDate.now();
                parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("reportName", "Cuantitativa");

                parametros.put("image", "templete/logoReport.jpg");


                temp.size();
                List<DatosCuantitativaGenreralModel> datosList = new ArrayList<>();
                datosList = temp.parallelStream().filter(i -> Collections.frequency(temp, i) > 1).collect(Collectors.toList());
                datosList.size();
                List<DatosCuantitativaGenreralModel> uniqDatos = new ArrayList<>();
                for (DatosCuantitativaGenreralModel datos : datosList.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
                    double valCant = getCantSum(temp, datos);
                    double valCosto = getCostSum(temp, datos);
                    uniqDatos.add(new DatosCuantitativaGenreralModel(datos.getEmpresa(), datos.getZona(), datos.getObjeto(), datos.getNivel(), datos.getEspecialidad(), datos.getSubespecialidad(), datos.getCodigo(), datos.getDescripcion(), datos.getUm(), datos.getTipo(), datos.getCpo(), datos.getCpe(), datos.getCet(), datos.getOtra(), valCant, datos.getPrecio(), datos.getPreciomlc(), Math.round(valCosto * 100d) / 100d));
                }

                temp.removeAll(datosList);
                temp.addAll(uniqDatos);
                uniqDatos.size();

                ArrayList<DatosCuantitativaGenreralModel> endDatosCuantitativaGenreralModels = new ArrayList<>();
                endDatosCuantitativaGenreralModels.addAll(temp);


                endDatosCuantitativaGenreralModels.size();
                List<DatosCuantitativaGenreralForReportModel> datosToReportList = cfr.createReportCuantitativaGeneralFormater(reportesController, endDatosCuantitativaGenreralModels, obra);
                datosToReportList.size();

                //System.out.println("Consulta: " + queryRecursos);


                if (niveles <= 6) {
                    datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModel::getNivel).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));

                } else if (niveles == 15) {
                    datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
                } else if (niveles == 125) {
                    datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
                } else if (niveles == 1235) {
                    datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
                } else if (niveles == 156) {
                    datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
                }

                datosToReportList.size();

                tarea = createTime(50);
                stage = new ProgressDialog(tarea);
                stage.setContentText("Preparando el reporte...");
                stage.setTitle("Espere...");
                new Thread(tarea).start();
                stage.showAndWait();

                garbage = Runtime.getRuntime();

                if (checkAmbMonedas.isSelected() == true) {
                    if (checkExp.isSelected() == false) {
                        DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, true);
                        JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        JasperViewer.viewReport(jp, false);
                        garbage.gc();
                    } else {
                        parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                        DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, true);
                        JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        exportarExcel(jp);
                        garbage.gc();
                    }

                } else {
                    if (checkExp.isSelected() == false) {
                        DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, false);
                        JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        JasperViewer.viewReport(jp, false);
                        garbage.gc();
                    } else {
                        parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                        DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, false);
                        JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        exportarExcel(jp);
                        garbage.gc();
                    }

                }


            } catch (Exception ex) {
                ex.printStackTrace();

                Alert alert = new Alert(Alert.AlertType.WARNING);

                VBox dialogPaneContent = new VBox();
                Label label = new Label("Error: " + ReportesController.class.getName());

                TextArea textArea = new TextArea();
                textArea.setText(ex.getMessage());
                dialogPaneContent.getChildren().addAll(label, textArea);
                // Set content for Dialog Pane
                alert.getDialogPane().setContent(dialogPaneContent);

                alert.showAndWait();

            }
        }

        if (checkRV.isSelected() == true && checkPresup.isSelected() == true && checlRecu.isSelected() == true && tipoRV.isSelected() == true && checkSalarios.isSelected() == false && checkSalarios.isSelected() == false) {
            myFlag = true;
            query = new StringBuilder();
            qmateriales = new StringBuilder();
            niveles = 0;

            if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
                //rec.codigo, rec.descripcion, rec.um, rec.preciomn,
                Subquery = " rv.id as idUO , rv.codigo as codeUO, rv.descripcion as descUO, rv.um, uor.cantidad as canti, rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Renglonvariante rv ON uor.renglonvarianteId = rv.id INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
                Subquery1 = " rv.id as idUO , rv.codigo as codeUO, rv.descripcion as descUO, rv.um, uor.cantidad as canti, bajo.cantidad, bajo.costo, bajo.idsuministro, bajo.tipo FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN Bajoespecificacionrv bajo ON uor.renglonvariante__id = bajo.renglonvariante__id AND uor.nivelespecifico__id = bajo.nivelespecifico__id INNER JOIN Renglonvariante rv ON uor.renglonvariante__id = rv.id WHERE ";

            } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
                Subquery = " rv.id as idUO , rv.codigo as codeUO, rv.descripcion as descUO, rv.um, uor.cantidad as canti, rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Renglonvariante rv ON uor.renglonvarianteId = rv.id INNER JOIN Recursos rec ON rvr.recursosId = rec.id  LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
                Subquery1 = null;

            } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
                Subquery = " rv.id as idUO , rv.codigo as codeUO, rv.descripcion as descUO, rv.um, uor.cantidad as canti, rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Renglonvariante rv ON uor.renglonvarianteId = rv.id INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND ";
                Subquery1 = null;
            } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
                Subquery = " rv.id as idUO , rv.codigo as codeUO, rv.descripcion as descUO, rv.um, uor.cantidad as canti, rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Renglonvariante rv ON uor.renglonvarianteId = rv.id INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND ";
                Subquery1 = null;
            } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
                Subquery = null;
                Subquery1 = " rv.id as idUO , rv.codigo as codeUO, rv.descripcion as descUO, rv.um, uor.cantidad as canti, bajo.cantidad, bajo.costo, bajo.idsuministro, bajo.tipo FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN Bajoespecificacionrv bajo ON uor.renglonvariante__id = bajo.renglonvariante__id AND uor.nivelespecifico__id == bajo.nivelespecifico__id INNER JOIN Renglonvariante rv ON uor.renglonvariante__id = rv.id WHERE ";

            } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
                Subquery = " rv.id as idUO , rv.codigo as codeUO, rv.descripcion as descUO, rv.um, uor.cantidad as canti, rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Renglonvariante rv ON uor.renglonvarianteId = rv.id INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND ";
                Subquery1 = " rv.id as idUO , rv.codigo as codeUO, rv.descripcion as descUO, rv.um, uor.cantidad as canti, bajo.cantidad, bajo.costo, bajo.idsuministro, bajo.tipo FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN Bajoespecificacionrv bajo ON uor.renglonvariante__id = bajo.renglonvariante__id AND uor.nivelespecifico__id = bajo.nivelespecifico__id INNER JOIN Renglonvariante rv ON uor.renglonvariante__id = rv.id WHERE ";

            } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
                Subquery = " rv.id as idUO , rv.codigo as codeUO, rv.descripcion as descUO, rv.um, uor.cantidad as canti, rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as acpo, eoe.cpe as acpe, eoe.cet as cet, eoe.otra as aotra FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Renglonvariante rv ON uor.renglonvarianteId = rv.id INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND ";
                Subquery1 = " rv.id as idUO , rv.codigo as codeUO, rv.descripcion as descUO, rv.um, uor.cantidad as canti, bajo.cantidad, bajo.costo as costo, bajo.idsuministro, bajo.tipo FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN Bajoespecificacionrv bajo ON uor.renglonvariante__id = bajo.renglonvariante__id AND uor.nivelespecifico__id = bajo.nivelespecifico__id INNER JOIN Renglonvariante rv ON uor.renglonvariante__id = rv.id WHERE ";
            }

            if (comboObras.getValue() != null && comboZonas.getValue() == null) {

                partObras = comboObras.getValue().split(" - ");


                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";

                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";

                niveles = 1;
            }

            if (comboObras != null && comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
                niveles = 0;
                partObras = comboObras.getValue().split(" - ");
                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";

                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";
                niveles = 2;


            } else if (comboObras != null && comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

                partZonas = comboZonas.getValue().split(" - ");
                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";

                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";
                partObras = comboObras.getValue().split(" - ");
                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;


                niveles = 2;
            }

            if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
                niveles = 0;

                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";

                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";
                niveles = 3;

            } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

                niveles = 0;

                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";
                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";

                partObj = comboObjetos.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;


                niveles = 3;

            }

            if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
                niveles = 0;


                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";
                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";

                niveles = 4;

            } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
                partNiv = comboNivel.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                niveles = 0;


                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";
                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";
                niveles = 4;

            }

            if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
                niveles = 0;


                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";
                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";
                niveles = 5;


            } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
                partEsp = comboEspecialidades.getValue().split(" - ");
                //idEsp = Integer.parseInt(partEsp[0]);
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;

                niveles = 0;


                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";

                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";

                niveles = 5;
            }

            if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
                niveles = 0;


                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";

                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";

                niveles = 6;
            } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
                partSub = comboSubespecialidades.getValue().split(" - ");
                // idSub = Integer.parseInt(partSub[0]);
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());

                subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                niveles = 0;


                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.id, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, eoe.cpo , eoe.cpe, eoe.cet, eoe.otra  ";
                groupM = "  GROUP BY rv.id, rv.codigo, rv.descripcion, rv.um, uor.cantidad, bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, bajo.cantidad, bajo.costo  ";

                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC ";
                orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC ";


                niveles = 6;

            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                // idEmp = Integer.parseInt(partEmp[0]);

                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;
                subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;

                niveles = 1;
            }


            if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(group);
                    query.append(order);
                }
                if (Subquery1 != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(groupM);
                    qmateriales.append(orderm);
                }


            } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(group);
                    query.append(order);
                }
                if (Subquery1 != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(groupM);
                    qmateriales.append(orderm);
                }


            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(group);
                    query.append(order);
                }
                if (Subquery1 != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(groupM);
                    qmateriales.append(orderm);

                }
            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(group);
                    query.append(order);
                }
                if (Subquery1 != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(groupM);
                    qmateriales.append(orderm);

                }

            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(group);
                    query.append(order);
                }
                if (Subquery1 != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                    qmateriales.append(orderm);

                }
            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(group);
                    query.append(order);
                }
                if (Subquery1 != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(groupM);
                    qmateriales.append(orderm);

                }
            } else if (subQObr != null && subQEmp != null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQEmp);
                    query.append(group);
                    query.append(order);
                }
                if (Subquery1 != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                    qmateriales.append(orderm);

                }

            }
            ArrayList<DatosCuantitativaUOGRUPModel> tempNoMat = new ArrayList<DatosCuantitativaUOGRUPModel>();
            ArrayList<DatosCuantitativaUOGRUPModel> tempMat = new ArrayList<DatosCuantitativaUOGRUPModel>();
            ArrayList<DatosCuantitativaUOGRUPModel> temp = new ArrayList<DatosCuantitativaUOGRUPModel>();

            date = LocalDate.now();
            parametros = new HashMap<>();
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            if (Subquery != null) {
                tempNoMat = cfr.getRecursosUOGRUPModelRV(reportesController, query.toString().trim(), niveles, obra);
                temp.addAll(tempNoMat);
            }
            if (Subquery1 != null) {
                ifDesglose = false;
                ifDesglose = checkDesglose.isSelected() == true;
                tempMat = cfr.getRecursosMaterialesUOGROUPRVM(reportesController, qmateriales.toString().trim(), niveles, ifDesglose);
                temp.addAll(tempMat);
            }

            System.out.println(qmateriales.toString().trim());

            datosCuantitativaUOGRUPModelArrayList = new ArrayList<DatosCuantitativaUOGRUPModel>();
            datosCuantitativaUOGRUPModelArrayList.addAll(temp);

            cuantitativaUOGROUPModelArrayList = new ArrayList<CuantitativaUOGROUPModel>();
            cuantitativaUOGROUPModelArrayList = cfr.createReportCuantitativaUOGROUPFormater(reportesController, datosCuantitativaUOGRUPModelArrayList, obra);


            cuantitativaUOGROUPModelArrayList.sort(Comparator.comparing(CuantitativaUOGROUPModel::getIdEmpresa).thenComparing(CuantitativaUOGROUPModel::getZona).thenComparing(CuantitativaUOGROUPModel::getObjeto).thenComparing(CuantitativaUOGROUPModel::getNivel).thenComparing(CuantitativaUOGROUPModel::getEspecialidad).thenComparing(CuantitativaUOGROUPModel::getSubespecialidad).thenComparing(CuantitativaUOGROUPModel::getDescripUO));


            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("titlereport", "Cuantitativa");
            parametros.put("image", "templete/logoReport.jpg");

            indication.setText(" ");
            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            try {
                if (checkAmbMonedas.isSelected() == true) {
                    if (checkExp.isSelected() == false) {
                        DynamicReport dr = bdr.cuantitativaReportRVGROUP(reportesController, niveles, true);
                        JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaUOGROUPModelArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        stage.close();
                        JasperViewer.viewReport(jp, false);
                    } else {
                        parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                        DynamicReport dr = bdr.cuantitativaReportRVGROUP(reportesController, niveles, true);
                        JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaUOGROUPModelArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        stage.close();
                        exportarExcel(jp);
                    }
                } else {
                    if (checkExp.isSelected() == false) {
                        DynamicReport dr = bdr.cuantitativaReportRVGROUP(reportesController, niveles, false);
                        JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaUOGROUPModelArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        stage.close();
                        JasperViewer.viewReport(jp, false);
                    } else {
                        parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                        DynamicReport dr = bdr.cuantitativaReportRVGROUP(reportesController, niveles, false);
                        JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaUOGROUPModelArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        stage.close();
                        exportarExcel(jp);
                    }
                }
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (JRException e) {
                e.printStackTrace();
            }

        }

//Salario por UO
        if (checkUnidad.isSelected() == true && checkSalarios.isSelected() == true && ceckCertifmes.isSelected() == false && checlRecu.isSelected() == false) {
            myFlag = true;
            if (tipoUO.isSelected() && !tipoRV.isSelected()) {
                getSalarioByUO();
            } else if (tipoUO.isSelected() && tipoRV.isSelected()) {
                myFlag = true;
                getSalarioByUORV();
            }
        }
        if (checkUnidad.isSelected() == true && checkSalarios.isSelected() == true && ceckCertifmes.isSelected() == true && checlRecu.isSelected() == false) {
            myFlag = true;
            if (tipoUO.isSelected() && !tipoRV.isSelected()) {
                getSalarioByUOCertificacion();
            } else if (tipoUO.isSelected() && tipoRV.isSelected()) {
                myFlag = true;
                getSalarioByUORVCertificacion();
            }
        }
        if (checkRV.isSelected() == true && checkSalarios.isSelected() == true && ceckCertifmes.isSelected() == false && checlRecu.isSelected() == false) {
            myFlag = true;
            query = new StringBuilder();
            niveles = 0;
            Subquery = " uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, SUM(rvr.cantidas * uor.cantidad), uor.salario FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecificoId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Renglonvariante rv ON rvr.renglonvarianteId = rv.id INNER JOIN Recursos rec ON rvr.recursosId = rec.id WHERE rec.tipo = '2' AND ";

            if (comboObras.getValue() != null && comboZonas.getValue() == null) {

                partObras = comboObras.getValue().split(" - ");
                select = "SELECT ec.id, ec.codigo as empC, ec.descripcion as emp, ";

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;


                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, rec.tipo ";
                order = " ORDER BY rec.tipo ASC";

                niveles = 1;
            }

            if (comboObras != null && comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
                niveles = 0;

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;


                select = "SELECT ec.id as idEmp, ec.codigo as codeEmp, ec.descripcion as emp, zon.id, zon.codigo as codeZon, zon.desripcion, ";
                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, rec.tipo";
                order = " ORDER BY zon.id, rec.tipo ASC";
                niveles = 2;


            } else if (comboObras != null && comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

                partZonas = comboZonas.getValue().split(" - ");
                select = "SELECT ec.id as idEmp, ec.codigo as codeEmp, ec.descripcion as emp, zon.id, zon.codigo as codeZon, zon.desripcion, ";
                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, rec.tipo ";

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;


                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;


                order = " ORDER BY zon.id, rec.tipo ASC";
                niveles = 2;
            }

            if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
                niveles = 0;

                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, ";
                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, rec.tipo ";

                order = " ORDER BY zon.id, ob.id, rec.tipo ASC";
                niveles = 3;

            } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

                niveles = 0;

                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, ";
                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, rec.tipo ";

                partObj = comboObjetos.getValue().split(" - ");
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;


                order = " ORDER BY zon.id, ob.id, rec.tipo ASC";
                niveles = 3;

            }

            if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
                niveles = 0;

                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, rec.tipo ";
                order = " ORDER BY zon.id, ob.id, niv.id, rec.tipo ASC";

                niveles = 4;

            } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
                partNiv = comboNivel.getValue().split(" - ");
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;

                niveles = 0;

                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, rec.tipo ";

                order = " ORDER BY zon.id, ob.id, niv.id, rec.tipo ASC";
                niveles = 4;

            }

            if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
                niveles = 0;


                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, ";
                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, rec.tipo";
                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, rec.tipo ASC";
                niveles = 5;


            } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
                partEsp = comboEspecialidades.getValue().split(" - ");
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;

                niveles = 0;

                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, ";
                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, rec.tipo";
                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, rec.tipo ASC";

                niveles = 5;
            }

            if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
                niveles = 0;

                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.tipo  ";
                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";

                niveles = 6;
            } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
                partSub = comboSubespecialidades.getValue().split(" - ");
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;

                niveles = 0;

                select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
                group = " GROUP BY uo.id, uo.codigo, uo.descripcion, rv.codigo, rv.descripcion, rv.um, uor.cantidad, uor.salario, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.tipo  ";
                order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";


                niveles = 6;

            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;

                niveles = 1;
            }


            if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(group);
                    query.append(order);
                }


            } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(group);
                    query.append(order);
                }


            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(group);
                    query.append(order);
                }

            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(group);
                    query.append(order);
                }


            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(group);
                    query.append(order);
                }

            } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(group);
                    query.append(order);
                }

            } else if (subQObr != null && subQEmp != null) {
                if (Subquery != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQEmp);
                    query.append(group);
                    query.append(order);
                }

            }

            date = LocalDate.now();
            parametros = new HashMap<>();
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);

            salarioUORVReportModelArrayList = new ArrayList<>();
            salarioUORVReportModelArrayList = cfr.getSalarioRVinRVDEF(reportesController, query.toString(), niveles, obra);
            salarioUORVReportModelArrayList.sort(Comparator.comparing(SalarioUORVReportModel::getCodigo));


            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");
            parametros.put("reportName", "Salario Presupuestado");

            if (salarioUORVReportModelArrayList.size() == 0) {

                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("No hay información que mostrar, revise sus datos");
                alert.showAndWait();

            } else if (salarioUORVReportModelArrayList.size() > 0) {
                indication.setText(" ");
                tarea = createTime(50);
                stage = new ProgressDialog(tarea);
                stage.setContentText("Preparando el reporte...");
                stage.setTitle("Espere...");
                new Thread(tarea).start();
                stage.showAndWait();
                System.out.println("Datos: " + niveles);

                try {
                    if (checkExp.isSelected() == false) {
                        DynamicReport dr = bdr.salarioUORVReport(reportesController, niveles);
                        JRDataSource ds = new JRBeanCollectionDataSource(salarioUORVReportModelArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        // stage.close();
                        JasperViewer.viewReport(jp, false);
                    } else {
                        parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                        DynamicReport dr = bdr.salarioUORVReport(reportesController, niveles);
                        JRDataSource ds = new JRBeanCollectionDataSource(salarioUORVReportModelArrayList);
                        JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                        JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                        //  stage.close();
                        exportarExcel(jp);
                    }
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                } catch (JRException e) {
                    e.printStackTrace();
                }
            }

        }

        if (checkRV.isSelected() == true && checkCertif.isSelected() == true && tipoTotales.isSelected() == true && ceckCertifmes.isSelected() == false) {
            myFlag = true;

            query = new StringBuilder();
            qmateriales = new StringBuilder();
            qmano = new StringBuilder();
            qequipos = new StringBuilder();
            niveles = 0;

            Subquery = " SUM(cert.salario)  FROM Nivelespecifico uo INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            subqueryCostMateriales = " SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '1' AND ";
            subqueryCostMano = " SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '2' AND ";
            subqueryCostEquipo = " SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '3' AND ";


            if (comboObras.getValue() != null) {

                partObras = comboObras.getValue().split(" - ");
                select = "SELECT ec.codigo, ec.descripcion, ";

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                group = " GROUP BY ec.codigo, ec.descripcion";

                niveles = 1;
            }

            if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion ";

                niveles = 2;


            } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

                partZonas = comboZonas.getValue().split(" - ");
                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion ";

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                niveles = 2;
            }

            if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
                niveles = 3;

            } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob. descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob. descripcion ";


                partObj = comboObjetos.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;

                niveles = 3;

            }

            if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion ";
                niveles = 4;

            } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
                partNiv = comboNivel.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion ";
                niveles = 4;

            }

            if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion ";

                niveles = 5;


            } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
                partEsp = comboEspecialidades.getValue().split(" - ");
                //idEsp = Integer.parseInt(partEsp[0]);
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion ";

                niveles = 5;
            }

            if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";
                niveles = 6;
            } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
                partSub = comboSubespecialidades.getValue().split(" - ");
                // idSub = Integer.parseInt(partSub[0]);
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";

                niveles = 6;
            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                // idEmp = Integer.parseInt(partEmp[0]);

                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;

                niveles = 1;
            }


            if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(group);

            }

            if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(group);

            }
            if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMateriales);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostMateriales);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(group);
            }
            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(subQNiv);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(subQNiv);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(subQNiv);
                qequipos.append(group);

            }

            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(subQNiv);
                qmateriales.append(subQEsp);
                qmateriales.append(group);

                qmateriales.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(subQNiv);
                qmano.append(subQEsp);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(subQNiv);
                qequipos.append(subQEsp);
                qequipos.append(group);

            }

            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(subQNiv);
                qmateriales.append(subQEsp);
                qmateriales.append(subQSub);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(subQNiv);
                qmano.append(subQEsp);
                qmano.append(subQSub);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostMateriales);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(subQNiv);
                qequipos.append(subQEsp);
                qequipos.append(subQSub);
                qequipos.append(group);
            }

            if (subQObr != null && subQEmp != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQEmp);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQEmp);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQEmp);
                qequipos.append(group);
            }

            System.out.println(query.toString().trim());

            date = LocalDate.now();
            parametros = new HashMap<>();
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("tipoReport", "Valores Certificados a la Obra");
            parametros.put("image", "templete/logoReport.jpg");

            totalReportCertModelArrayList = cfr.getTotalesToCertPlan(reportesController, query.toString().trim(), qmateriales.toString().trim(), qmano.toString().trim(), qequipos.toString().trim(), niveles);
            indication.setText(" ");
            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            try {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createTotalReportToRVCetToPlan(reportesController, niveles);
                    JRDataSource ds = new JRBeanCollectionDataSource(totalReportCertModelArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createTotalReportToRVCetToPlan(reportesController, niveles);
                    JRDataSource ds = new JRBeanCollectionDataSource(totalReportCertModelArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    stage.close();
                    exportarExcel(jp);
                }
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (JRException e) {
                e.printStackTrace();
            }

        }

        if (checkUnidad.isSelected() == true && checkCertif.isSelected() == true && tipoTotales.isSelected() == true && ceckCertifmes.isSelected() == false) {

            myFlag = true;
            query = new StringBuilder();
            qmateriales = new StringBuilder();
            qequipos = new StringBuilder();
            qmano = new StringBuilder();
            niveles = 0;

            Subquery = " SUM(cert.salario) FROM Unidadobra uo INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";

            subqueryCostMateriales = " SUM(cert.costo) FROM Unidadobra uo INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '1' AND ";
            subqueryCostMano = " SUM(cert.costo) FROM Unidadobra uo INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '2' AND ";
            subqueryCostEquipo = " SUM(cert.costo) FROM Unidadobra uo INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '3' AND ";


            if (comboObras.getValue() != null) {

                partObras = comboObras.getValue().split(" - ");
                select = "SELECT ec.codigo, ec.descripcion, ";

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                group = " GROUP BY ec.codigo, ec.descripcion";

                niveles = 1;
            }

            if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
                niveles = 0;

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion ";

                niveles = 2;


            } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

                partZonas = comboZonas.getValue().split(" - ");
                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion ";

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                niveles = 2;
            }

            if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
                niveles = 0;

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
                niveles = 3;

            } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

                niveles = 0;

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob. descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob. descripcion ";


                partObj = comboObjetos.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;

                niveles = 3;

            }

            if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion ";
                niveles = 4;

            } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
                partNiv = comboNivel.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;

                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion ";
                niveles = 4;

            }

            if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion ";

                niveles = 5;


            } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
                partEsp = comboEspecialidades.getValue().split(" - ");
                //idEsp = Integer.parseInt(partEsp[0]);
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;

                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion ";

                niveles = 5;
            }

            if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";


                niveles = 6;
            } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
                partSub = comboSubespecialidades.getValue().split(" - ");
                // idSub = Integer.parseInt(partSub[0]);
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";


                niveles = 6;

            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                // idEmp = Integer.parseInt(partEmp[0]);

                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;

                niveles = 1;
            }

            if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(group);

            }

            if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(group);

            }
            if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMateriales);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostMateriales);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(group);
            }
            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(subQNiv);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(subQNiv);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(subQNiv);
                qequipos.append(group);

            }

            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(subQNiv);
                qmateriales.append(subQEsp);
                qmateriales.append(group);

                qmateriales.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(subQNiv);
                qmano.append(subQEsp);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(subQNiv);
                qequipos.append(subQEsp);
                qequipos.append(group);

            }

            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(subQNiv);
                qmateriales.append(subQEsp);
                qmateriales.append(subQSub);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(subQNiv);
                qmano.append(subQEsp);
                qmano.append(subQSub);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostMateriales);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(subQNiv);
                qequipos.append(subQEsp);
                qequipos.append(subQSub);
                qequipos.append(group);
            }

            if (subQObr != null && subQEmp != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQEmp);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQEmp);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQEmp);
                qequipos.append(group);
            }
            // System.out.println(qmateriales.toString().trim());

            date = LocalDate.now();
            parametros = new HashMap<>();
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("tipoReport", "Valores Certificados a la ObraPCW");
            parametros.put("image", "templete/logoReport.jpg");

            totalReportCertModelArrayList = cfr.getTotalesToCertPlan(reportesController, query.toString().trim(), qmateriales.toString().trim(), qmano.toString().trim(), qequipos.toString().trim(), niveles);
            indication.setText(" ");
            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            try {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createTotalReportToRVCetToPlan(reportesController, niveles);
                    JRDataSource ds = new JRBeanCollectionDataSource(totalReportCertModelArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createTotalReportToRVCetToPlan(reportesController, niveles);
                    JRDataSource ds = new JRBeanCollectionDataSource(totalReportCertModelArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    stage.close();
                    exportarExcel(jp);
                }
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (JRException e) {
                e.printStackTrace();
            }

        }


        if (checkUnidad.isSelected() == true && ceckCertifmes.isSelected() == true && tipoTotales.isSelected() == true && checkCertif.isSelected() == false) {
            myFlag = true;
            query = new StringBuilder();
            qmateriales = new StringBuilder();
            qequipos = new StringBuilder();
            qmano = new StringBuilder();
            niveles = 0;

            Subquery = " SUM(cert.salario)  FROM Unidadobra uo INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            subqueryCostMateriales = " SUM(cert.costo) FROM Unidadobra uo INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '1' AND ";
            subqueryCostMano = " SUM(cert.costo) FROM Unidadobra uo INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '2' AND ";
            subqueryCostEquipo = " SUM(cert.costo) FROM Unidadobra uo INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '3' AND ";


            if (comboObras.getValue() != null) {

                partObras = comboObras.getValue().split(" - ");
                select = "SELECT ec.codigo, ec.descripcion, ";

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;

                group = " GROUP BY ec.codigo, ec.descripcion";

                niveles = 1;
            }

            if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
                niveles = 0;

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion ";

                niveles = 2;


            } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

                partZonas = comboZonas.getValue().split(" - ");
                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion ";

                subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                ;
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                niveles = 2;
            }

            if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
                niveles = 0;

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
                niveles = 3;

            } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

                niveles = 0;

                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob. descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob. descripcion ";


                partObj = comboObjetos.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;

                niveles = 3;

            }

            if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion ";
                niveles = 4;

            } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
                partNiv = comboNivel.getValue().split(" - ");
                //idObj = Integer.parseInt(partObj[0]);
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;

                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion ";
                niveles = 4;

            }

            if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion ";

                niveles = 5;


            } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
                partEsp = comboEspecialidades.getValue().split(" - ");
                //idEsp = Integer.parseInt(partEsp[0]);
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;

                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion ";

                niveles = 5;
            }

            if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";


                niveles = 6;
            } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
                partSub = comboSubespecialidades.getValue().split(" - ");
                // idSub = Integer.parseInt(partSub[0]);
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
                niveles = 0;


                select = "SELECT ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion,  ";
                group = " GROUP BY ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";


                niveles = 6;

            }

            if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
                alert.showAndWait();
            } else {
                LocalDate dateDes = pickerDesde.getValue();
                LocalDate dateHast = pickerHasta.getValue();
                desdeDate = Date.valueOf(dateDes);
                hastaData = Date.valueOf(dateHast);
                timeRestrictCert = " AND cert.fini >= '" + desdeDate.toString().trim() + "' AND cert.ffin <= '" + hastaData.toString().trim() + "'";

                intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
            }

            if (comboEmpresas.getValue() != null) {
                partEmp = comboEmpresas.getValue().split(" - ");
                // idEmp = Integer.parseInt(partEmp[0]);

                subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                ;

                niveles = 1;
            }

            if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(timeRestrictCert);
                query.append(group);


                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(timeRestrictCert);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmateriales.append(timeRestrictCert);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(timeRestrictCert);
                qequipos.append(group);

            }

            if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(timeRestrictCert);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(timeRestrictCert);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(timeRestrictCert);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(timeRestrictCert);
                qequipos.append(group);

            }
            if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(timeRestrictCert);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(timeRestrictCert);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMateriales);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(timeRestrictCert);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostMateriales);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(timeRestrictCert);
                qequipos.append(group);
            }
            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                qequipos.append(timeRestrictCert);
                query.append(group);

                qmateriales.append(select);

                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(subQNiv);
                qmateriales.append(timeRestrictCert);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(subQNiv);
                qmano.append(timeRestrictCert);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(subQNiv);
                qequipos.append(timeRestrictCert);
                qequipos.append(group);

            }

            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(timeRestrictCert);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(subQNiv);
                qmateriales.append(subQEsp);
                qmateriales.append(timeRestrictCert);
                qmateriales.append(group);

                qmateriales.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(subQNiv);
                qmano.append(subQEsp);
                qmano.append(timeRestrictCert);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(subQNiv);
                qequipos.append(subQEsp);
                qequipos.append(timeRestrictCert);
                qequipos.append(group);

            }

            if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                query.append(timeRestrictCert);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQZon);
                qmateriales.append(subQObj);
                qmateriales.append(subQNiv);
                qmateriales.append(subQEsp);
                qmateriales.append(subQSub);
                qmateriales.append(timeRestrictCert);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQZon);
                qmano.append(subQObj);
                qmano.append(subQNiv);
                qmano.append(subQEsp);
                qmano.append(subQSub);
                qmano.append(timeRestrictCert);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostMateriales);
                qequipos.append(subQObr);
                qequipos.append(subQZon);
                qequipos.append(subQObj);
                qequipos.append(subQNiv);
                qequipos.append(subQEsp);
                qequipos.append(subQSub);
                qequipos.append(timeRestrictCert);
                qequipos.append(group);
            }

            if (subQObr != null && subQEmp != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(timeRestrictCert);
                query.append(group);

                qmateriales.append(select);
                qmateriales.append(subqueryCostMateriales);
                qmateriales.append(subQObr);
                qmateriales.append(subQEmp);
                qmateriales.append(timeRestrictCert);
                qmateriales.append(group);

                qmano.append(select);
                qmano.append(subqueryCostMano);
                qmano.append(subQObr);
                qmano.append(subQEmp);
                qmano.append(timeRestrictCert);
                qmano.append(group);

                qequipos.append(select);
                qequipos.append(subqueryCostEquipo);
                qequipos.append(subQObr);
                qequipos.append(subQEmp);
                qequipos.append(timeRestrictCert);
                qequipos.append(group);
            }

            date = LocalDate.now();
            parametros = new HashMap<>();
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("tipoReport", "Total certificación desde " + intervalo);
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");

            totalReportCertModelArrayList = cfr.getTotalesToCertPlan(reportesController, query.toString().trim(), qmateriales.toString().trim(), qmano.toString().trim(), qequipos.toString().trim(), niveles);
            indication.setText(" ");
            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            try {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createTotalReportToRVCetToPlan(reportesController, niveles);
                    JRDataSource ds = new JRBeanCollectionDataSource(totalReportCertModelArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createTotalReportToRVCetToPlan(reportesController, niveles);
                    JRDataSource ds = new JRBeanCollectionDataSource(totalReportCertModelArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    stage.close();
                    exportarExcel(jp);
                }

            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (JRException e) {
                e.printStackTrace();
            }

        }

        if (checkRV.isSelected() == true && ceckCertifmes.isSelected() == true && tipoTotales.isSelected() == true && checkCertif.isSelected() == false) {
            myFlag = true;
            datoscertificacionDatosRV();
        }

        /**
         * para la cuentitativa de las planificaciones y la certificaciones
         */

        if (checkUnidad.isSelected() == true && ceckCertifmes.isSelected() == true && checkSalarios.isSelected() == false && checlRecu.isSelected() == true && checkPresup.isSelected() == false && tipoUO.isSelected() == true && othersOptions.getValue() == null) {
            myFlag = true;
            createReportToCertifUO();
        }

        if (checkUnidad.isSelected() == true && ceckCertifmes.isSelected() == true && checkSalarios.isSelected() == false && checlRecu.isSelected() == true && checkPresup.isSelected() == false && tipoUO.isSelected() == false && othersOptions.getValue() == null) {
            myFlag = true;
            createReportToCertifUOGeneral();

        }

        if (checkUnidad.isSelected() == true && checkCertif.isSelected() == true && checkSalarios.isSelected() == false && checlRecu.isSelected() == true && checkPresup.isSelected() == false && tipoUO.isSelected() == false && othersOptions.getValue() == null) {
            myFlag = true;
            createReportToCertifUOGeneralOrigen();
        }

        if (checkRV.isSelected() == true && ceckCertifmes.isSelected() == true && checlRecu.isSelected() == true) {
            System.out.println("Este es el matodo!!!!!---");
            myFlag = true;
            createReportToCertifRV();
        }

        if (checkUnidad.isSelected() == true && checkPlan.isSelected() == true && checlRecu.isSelected() == true && checlRecu.isSelected() == true && checkPresup.isSelected() == false && tipoUO.isSelected() == true) {
            myFlag = true;
            createReportPlanUO();
        }

        if (checkUnidad.isSelected() == true && checkPlan.isSelected() == true && checlRecu.isSelected() == true && checlRecu.isSelected() == true && checkPresup.isSelected() == false && tipoUO.isSelected() == false) {
            myFlag = true;
            createReportPlanUOGeneral();

        }

        if (checkRV.isSelected() == true && checkPlan.isSelected() == true && checlRecu.isSelected() == true) {
            myFlag = true;
            createReportPlanRV();
        }


        /**
         * Para el calculo del certifico
         */

        if (checkUnidad.isSelected() == true && ceckCertifmes.isSelected() == true && othersOptions.getValue().equals("Certifico") && !checlRecu.isSelected()) {
            myFlag = true;
            createReportcertifico();
        }

        if (checkUnidad.isSelected() == true && checkPlan.isSelected() == true && othersOptions.getValue().equals("Certifico") && !checlRecu.isSelected()) {
            myFlag = true;
            createReportcertificoPlan();
        }

        /**
         * Para los reportes de convenios
         *
         */
        if (checkUnidad.isSelected() == true && ceckCertifmes.isSelected() == true && othersOptions.getValue().equals("Convenios")) {
            myFlag = true;
            createReporteConvenios();
        }

        if (checkUnidad.isSelected() == true && checkPlan.isSelected() == true && othersOptions.getValue().equals("Convenios")) {
            myFlag = true;
            createReporteConveniosPlan();
        }

        /**
         * Para calcular el impacto del salarios en obras de la 15
         */


        if (checkUnidad.isSelected() == true && checkPresup.isSelected() == true && checkSalarios.isSelected() == true && checlRecu.isSelected() == true && tipoUO.isSelected() == true) {
            myFlag = true;
            String[] partes = comboObras.getValue().split(" - ");
            obra = new Obra();
            obra = reportProjectStructureSingelton.getObra(Integer.parseInt(partes[0]));

            if (obra.getSalarioId() == 2) {
                createReporteSalarioImpacto();
            } else {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("Este reporte es solo para obras de la resolución 15");
                alert.showAndWait();
            }


        }

        if (checkRV.isSelected() == true && checkPresup.isSelected() == true && checkSalarios.isSelected() == true && checlRecu.isSelected() == true && tipoRV.isSelected() == true) {
            myFlag = true;
            String[] partes = comboObras.getValue().split(" - ");
            obra = new Obra();
            obra = reportProjectStructureSingelton.getObra(Integer.parseInt(partes[0]));

            if (obra.getSalarioId() == 2) {
                createReporteSalarioImpactoRV();
            } else {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("Este reporte es solo para obras de la resolución 15");
                alert.showAndWait();
            }
        }


        if (checkUnidad.isSelected() == true && ceckCertifmes.isSelected() == true && checkSalarios.isSelected() == true && checlRecu.isSelected() == true && tipoUO.isSelected() == true) {
            myFlag = true;
            String[] partes = comboObras.getValue().split(" - ");
            obra = new Obra();
            obra = reportProjectStructureSingelton.getObra(Integer.parseInt(partes[0]));

            if (obra.getSalarioId() == 2) {
                createReporteSalarioImpactoCert();
            } else {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("Este reporte es solo para obras de la resolución 15");
                alert.showAndWait();
            }


        }

        if (checkRV.isSelected() == true && ceckCertifmes.isSelected() == true && checkSalarios.isSelected() == true && checlRecu.isSelected() == true && tipoRV.isSelected() == true) {
            myFlag = true;
            String[] partes = comboObras.getValue().split(" - ");
            obra = new Obra();
            obra = reportProjectStructureSingelton.getObra(Integer.parseInt(partes[0]));

            if (obra.getSalarioId() == 2) {
                createReporteSalarioImpactoCertRV();
            } else {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("Este reporte es solo para obras de la resolución 15");
                alert.showAndWait();
            }

        }
/*
        if (checkUnidad.isSelected() == true && checkPresup.isSelected() == true && checlRecu.isSelected() == true && checkGES.isSelected() == true) {
            myFlag = true;

            reportbyGrupoEscalaUO();
        }

        if (checkRV.isSelected() == true && checkPresup.isSelected() == true && checlRecu.isSelected() == true && checkGES.isSelected() == true) {
            myFlag = true;

            reportbyGrupoEscalaRV();
        }
*/
        if (myFlag == false) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setContentText(" La estructura de reporte declarada no es correcta");
            alert.showAndWait();
        }

    }

    private void createReportPresupUO() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        myFlag = true;

        if (comboObras.getValue() != null) {
            niveles = 0;
            subQObr = "obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            niveles = 2;
        } else if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 3;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            niveles = 3;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            niveles = 3;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            niveles = 4;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && !comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            subQNiv = " AND nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            niveles = 4;
        } else if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 4;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            niveles = 4;
        } else if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 5;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            niveles = 5;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            niveles = 5;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && !comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            subQNiv = " AND nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            niveles = 5;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && !comboNivel.getValue().contentEquals("Todos") && !comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            subQNiv = " AND nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            subQEsp = " AND especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            niveles = 5;
        } else if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            niveles = 6;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            niveles = 6;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && !comboNivel.getValue().contentEquals("Todos") && comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            subQNiv = " AND nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            niveles = 6;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && !comboNivel.getValue().contentEquals("Todos") && !comboEspecialidades.getValue().contentEquals("Todas") && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            subQNiv = " AND nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            subQEsp = " AND especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            niveles = 6;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && !comboNivel.getValue().contentEquals("Todos") && !comboEspecialidades.getValue().contentEquals("Todas") && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            subQNiv = " AND nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            subQEsp = " AND especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            subQSub = " AND subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            niveles = 6;
        }
/*
        if (comboZonas.getValue() != null && !comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null) {
            niveles = 0;
            niveles = 3;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && !comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null) {
            niveles = 0;
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            niveles = 3;

        }
        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            subQNiv = " AND nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            niveles = 4;
        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            niveles = 6;

        }
*/
        /*
        //niveles convinados
        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 15;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 156;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 1256;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 12356;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 123456;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 123;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 1234;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue().equals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue().equals("Todas") && comboSubespecialidades.getValue().equals("Todas")) {
            niveles = 0;
            niveles = 1234569;
        }
*/

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
        }


        String Subquery = " FROM Unidadobra WHERE ";
        query.append(Subquery);
        query.append(subQObr);

        if (subQZon != null) {
            query.append(subQZon);
        }
        if (subQObj != null) {
            query.append(subQObj);
        }
        if (subQNiv != null) {
            query.append(subQNiv);
        }

        if (subQEsp != null) {
            query.append(subQEsp);
        }

        if (subQSub != null) {
            query.append(subQSub);
        }

        if (subQEmp != null) {
            query.append(subQEmp);
        }

        System.out.println("Imprimiendo Niveles: " + niveles);

        if (checkPresup.isSelected() == true) {
            try {

                uoReportModelArrayList = new ArrayList<>();
                uoReportModelArrayList = cfr.getUnidadObraList(reportesController, query.toString().trim() + " ORDER BY objetosId, nivelId  ASC ");
                int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
                obra = reportProjectStructureSingelton.getObra(id);
                date = LocalDate.now();
                parametros = new HashMap<>();
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
                parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
                if (checkFecha.isSelected()) {
                    parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
                } else {
                    parametros.put("fecha", " ");
                }
                int templete = 0;
                if (comboConfecionado.getValue() == null) {
                    templete = 1;
                    parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
                    parametros.put("empresa", empresa.getNombre());
                    parametros.put("comercial", empresa.getComercial());
                    parametros.put("image", "templete/logoReport.jpg");
                    parametros.put("reportName", "Presupuesto por Unidad de Obra");


                } else if (comboConfecionado.getValue() != null) {
                    templete = 2;
                    String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                    String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                    String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);

                    parametros.put("empresa", empresa.getNombre());
                    parametros.put("comercial", empresa.getComercial());
                    parametros.put("image", "templete/logoReport.jpg");
                    parametros.put("conf", "Confeccionado: " + confe);
                    parametros.put("rev", "Revisado: " + rev);
                    parametros.put("aprub", "Aprobado: " + apro);
                    parametros.put("reportName", "Presupuesto por Unidad de Obra");

                }


                BuildDynamicReport bdr = new BuildDynamicReport();
                presupuestoUOArrayList = new ArrayList<>();
                presupuestoUOArrayList = cfr.createReportesUOFormater(reportesController, uoReportModelArrayList, obra);

                presupuestoUOArrayList.sort(Comparator.comparing(PresupuestoUO::getIdEmpresa).thenComparing(PresupuestoUO::getIdZona).thenComparing(PresupuestoUO::getIdObjeto).thenComparing(PresupuestoUO::getIdNivel).thenComparing(PresupuestoUO::getIdEsp).thenComparing(PresupuestoUO::getIdSub));

                tarea = createTime(50);
                stage = new ProgressDialog(tarea);
                stage.setContentText("Preparando el reporte...");
                stage.setTitle("Espere...");
                new Thread(tarea).start();
                stage.showAndWait();

                garbage = Runtime.getRuntime();
                presupuestoUOArrayList.size();

                table = false;
                if (checkTable.isSelected() == false) {
                    table = true;
                }

                List<ConceptosReporte> reportFormaters = new ArrayList<>();
                for (PresupuestoUO totalReportFormater : presupuestoUOArrayList) {
                    reportFormaters.addAll(totalReportFormater.getBodyConceptos());
                }
                List<ResumenCostosList> resumenList = new ArrayList<>();
                resumenList = getResmenListReport(obra, reportFormaters);
                parametros.put("resumen", resumenList);


                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createControlPresupReport(reportesController, niveles, table, templete);
                    JRDataSource ds = new JRBeanCollectionDataSource(presupuestoUOArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createControlPresupReport(reportesController, niveles, table, templete);
                    JRDataSource ds = new JRBeanCollectionDataSource(presupuestoUOArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);
                }


            } catch (Exception ex) {
                ex.printStackTrace();
                Alert alert = new Alert(Alert.AlertType.WARNING);
                VBox dialogPaneContent = new VBox();
                Label label = new Label("Error:");

                TextArea textArea = new TextArea();
                textArea.setText(ex.getMessage());
                dialogPaneContent.getChildren().addAll(label, textArea);
                alert.getDialogPane().setContent(dialogPaneContent);
                alert.showAndWait();
            }
        }

    }


    private void createReportPlanUOMES() {


        query = new StringBuilder();
        niveles = 0;

        Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, pl.cantidad, pl.costomaterial, pl.costomano, pl.costoequipo, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion FROM Unidadobra uo INNER JOIN Planificacion pl ON uo.id  = pl.unidadobraId INNER JOIN Brigadaconstruccion brig ON pl.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON pl.grupoconstruccionId = grup.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 3;
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;

            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;

            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }


        if (comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {
            subQBrig = " ";
            niveles = 7;
        } else if (comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
            partBrig = comboBrigada.getValue().split(" - ");

            subQBrig = " AND pl.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;
            niveles = 7;
        }

        if (comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todos")) {
            subQGrup = " ";
            niveles = 8;
        } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todos")) {
            partGrup = comboGrupo.getValue().split(" - ");

            subQGrup = " AND pl.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
            niveles = 8;
        }

        if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
            niveles = 9;
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, pl.cantidad, pl.costomaterial, pl.costomano, pl.costoequipo, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion FROM Unidadobra uo INNER JOIN Planificacion pl ON uo.id  = pl.unidadobraId INNER JOIN Brigadaconstruccion brig ON pl.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON pl.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON pl.cuadrillaconstruccionId = cuad.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";

        } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
            partCuad = comboCuadrilla.getValue().split(" - ");
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, pl.cantidad, pl.costomaterial, pl.costomano, pl.costoequipo, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion FROM Unidadobra uo INNER JOIN Planificacion pl ON uo.id  = pl.unidadobraId INNER JOIN Brigadaconstruccion brig ON pl.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON pl.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON pl.cuadrillaconstruccionId = cuad.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";

            subQCuad = " AND pl.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
            niveles = 9;
        }

        query.append(Subquery);
        query.append(subQObr);
        qmateriales.append(subQObr);
        if (subQZon != null) {
            query.append(subQZon);

        }
        if (subQObj != null) {
            query.append(subQObj);

        }
        if (subQNiv != null) {
            query.append(subQNiv);


        }

        if (subQEsp != null) {
            query.append(subQEsp);

        }

        if (subQSub != null) {
            query.append(subQSub);

        }

        if (subQEmp != null) {
            query.append(subQEmp);

        }

        if (subQBrig != null) {
            query.append(subQBrig);
        }

        if (subQGrup != null) {
            query.append(subQGrup);
        }

        if (subQCuad != null) {
            query.append(subQCuad);
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);


            String timeRestrict = " AND pl.desde >= '" + desdeDate.toString().trim() + "' AND pl.hasta <= '" + hastaData.toString().trim() + "'";
            query.append(timeRestrict);

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }


        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        if (checkFecha.isSelected()) {
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        } else {
            parametros.put("fecha", " ");
        }
        int templete = 0;
        if (comboConfecionado.getValue() == null) {
            templete = 1;
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("reportName", "Planificación: " + intervalo);
            parametros.put("image", "templete/logoReport.jpg");
            parametros.put("inver", " ");

        } else if (comboConfecionado.getValue() != null) {
            templete = 2;
            String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");
            parametros.put("conf", "Confeccionado: " + confe);
            parametros.put("rev", "Revisado: " + rev);
            parametros.put("aprub", "Aprobado: " + apro);
            parametros.put("reportName", "Planificación: " + intervalo);
        }

        datosPlanificacionMesUOArrayList = new ArrayList<DatosPlanificacionMesUO>();
        try {
            datosPlanificacionMesUOArrayList = cfr.getDatosPlanificacionMesUOArrayList(reportesController, query.toString().trim(), niveles);


            if (datosPlanificacionMesUOArrayList.size() != 0) {
                planificacionMesUOArrayList = new ArrayList<PlanificacionMesUO>();
                planificacionMesUOArrayList = cfr.createReportesPlanMesUOFormater(reportesController, datosPlanificacionMesUOArrayList, obra);
                indication.setText(" ");
                tarea = createTime(50);
                stage = new ProgressDialog(tarea);
                stage.setContentText("Preparando el reporte...");
                stage.setTitle("Espere...");
                new Thread(tarea).start();
                stage.showAndWait();


                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createCertificacionOrigen(reportesController, niveles, 1, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(planificacionMesUOArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createCertificacionOrigen(reportesController, niveles, 1, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(planificacionMesUOArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    exportarExcel(jp);
                }
                List<ConceptosReporte> reportFormaters = new ArrayList<>();
                for (PlanificacionMesUO totalReportFormater : planificacionMesUOArrayList) {
                    reportFormaters.addAll(totalReportFormater.getBodyConceptos());
                }
                List<ResumenCostosList> resumenList = new ArrayList<>();
                resumenList = getResmenListReport(obra, reportFormaters);
                parametros.put("resumen", resumenList);

            } else {

                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("No existe planificación en esta ObraPCW para el periodo especificado");
                alert.showAndWait();
            }
        } catch (
                Exception ex) {

            Alert alert = new Alert(Alert.AlertType.WARNING);
            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");
            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();

        }

    }

    StringBuilder queriGeneral;

    private StringBuilder queryCalc;
    private String stringQueryCal;

    private void createrQueryCunatitativaGeneral() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        queryRecursos = new StringBuilder();
        qRecursos = null;
        niveles = 0;
        groupRcRV = null;
        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
            qRecursos = " uor.cantRv, uor.renglonvarianteId FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId WHERE uor.conMat = '1' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '3' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '2' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = null;
            Subquery1 = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
            qRecursos = " uor.cantRv, uor.renglonvarianteId FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON rvr.renglonvarianteId =  uor.renglonvarianteId   WHERE uor.conMat = '1' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '3' AND ";
            Subquery1 = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
            qRecursos = " uor.cantRv, uor.renglonvarianteId FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId WHERE uor.conMat = '1' AND ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '2' AND ";
            Subquery1 = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
            qRecursos = " uor.cantRv, uor.renglonvarianteId FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId WHERE uor.conMat = '1' AND ";
        }


        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());

            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());

        }
        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            select = "SELECT ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ";

            niveles = 1;
        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                partZonas = comboZonas.getValue().split(" - ");
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ";

            niveles = 2;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {

                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }

            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            niveles = 3;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }

            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.codigo, rec.descripcion, rec.um, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion,  niv.codigo, niv.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
            niveles = 4;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }


            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }

            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion  ";
            niveles = 5;
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, ";

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            System.out.println("<<<<<<<<Aqui entro yo>>>>>>>");
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");
            partSub = comboSubespecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }
            if (comboNivel.getValue().trim().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().trim().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            }
            if (comboEspecialidades.getValue().trim().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else if (!comboEspecialidades.getValue().trim().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            }
            if (comboSubespecialidades.getValue().trim().equals("Todas")) {
                subQSub = " ";
                subQSubM = " ";
            } else if (!comboSubespecialidades.getValue().trim().equals("Todas")) {
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());

            }
            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, sub.codigo as codeSub, sub.descripcion as subdesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
            niveles = 6;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo, esp.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion  ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        query.append(subQEsp);
                    }
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        queryRecursos.append(subQEsp);
                    }
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 15;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            select = "SELECT esp.codigo as codEs, esp.descripcion as desEs, zon.codigo, zon.desripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion ";

            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    query.append(subQZon);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());


                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    query.append(subQZon);
                    query.append(subQEsp);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());


                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo as espCo, esp.descripcion as espDe, zon.codigo as zonC, zon.desripcion as zonD, ob.codigo, ob.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, ob.codigo, ob.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());


                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());


                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());


                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEsp);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());


                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());


                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());


                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo as esC, esp.descripcion as esDes, sub.codigo, sub.descripcion,";
            group = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 156;
        }
        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(groupM);
                }

            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(" GROUP BY uor.cantRv, uor.renglonvarianteId");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(" GROUP BY uor.cantRv, uor.renglonvarianteId");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(groupM);
                }

            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && comboEspecialidades.getValue() == null) {

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    System.out.println("sqjadkjhewdkjh: " + subQSubM);
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(groupM);
                    System.out.println("gggg: " + qmateriales.toString());
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

        }
        ArrayList<DatosCuantitativaGenreralModel> temp = new ArrayList<>();
        ArrayList<DatosCuantitativaGenreralModel> dataToFilter = new ArrayList<>();
        parametros = new HashMap<>();
        Empresaconstructora empresaconstructora = new Empresaconstructora();
        if (comboEmpresas.getValue() == null) {
            parametros.put("empName", " ");
        } else if (comboEmpresas.getValue() != null) {
            int id = reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            empresaconstructora = reportProjectStructureSingelton.getEmpresaconstructora(id);
            parametros.put("empName", "Empresa: " + empresaconstructora.getCodigo() + " - " + empresaconstructora.getDescripcion());
        }
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);
        System.out.printf("---" + niveles);
        System.out.print(query.toString());
        System.out.printf("otra: " + queryRecursos.toString());
        try {
            ArrayList<DatosCuantitativaGenreralModel> tempNoMat = new ArrayList<>();
            tempNoMat = cfr.getRecursosGeneral(reportesController, query.toString().trim(), niveles, empresaconstructora, obra, queryRecursos.toString().trim());
            dataToFilter.addAll(tempNoMat);

            temp.addAll(dataToFilter);
            ifDesglose = false;
            if (checkDesglose.isSelected()) {
                ifDesglose = true;
            }

            if (Subquery1 != null) {
                ArrayList<DatosCuantitativaGenreralModel> tempMat = new ArrayList<>();
                tempMat = cfr.getRecursosGeneralMateriales(reportesController, qmateriales.toString().trim(), niveles, ifDesglose, obra, empresaconstructora);
                temp.addAll(tempMat);
            }
            date = LocalDate.now();
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("reportName", "Cuantitativa");
            parametros.put("image", "templete/logoReport.jpg");
            System.out.printf("DATOS: " + temp.size() + " *** " + tempNoMat.size());

            temp.size();
            List<DatosCuantitativaGenreralModel> datosList = new ArrayList<>();
            datosList = temp.parallelStream().filter(i -> Collections.frequency(temp, i) > 1).collect(Collectors.toList());
            datosList.size();
            List<DatosCuantitativaGenreralModel> uniqDatos = new ArrayList<>();
            for (DatosCuantitativaGenreralModel datos : datosList.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
                double valCant = getCantSum(temp, datos);
                double valCosto = getCostSum(temp, datos);
                uniqDatos.add(new DatosCuantitativaGenreralModel(datos.getEmpresa(), datos.getZona(), datos.getObjeto(), datos.getNivel(), datos.getEspecialidad(), datos.getSubespecialidad(), datos.getCodigo(), datos.getDescripcion(), datos.getUm(), datos.getTipo(), datos.getCpo(), datos.getCpe(), datos.getCet(), datos.getOtra(), valCant, datos.getPrecio(), datos.getPreciomlc(), Math.round(valCosto * 100d) / 100d));
            }

            temp.removeAll(datosList);
            temp.addAll(uniqDatos);
            uniqDatos.size();

            ArrayList<DatosCuantitativaGenreralModel> endDatosCuantitativaGenreralModels = new ArrayList<>();
            endDatosCuantitativaGenreralModels.addAll(temp);


            endDatosCuantitativaGenreralModels.size();
            List<DatosCuantitativaGenreralForReportModel> datosToReportList = cfr.createReportCuantitativaGeneralFormater(reportesController, endDatosCuantitativaGenreralModels, obra);
            datosToReportList.size();

            if (niveles <= 6) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModel::getNivel).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 15) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 125) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 1235) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 156) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            }

            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();
            garbage = Runtime.getRuntime();

            if (checkAmbMonedas.isSelected() == true) {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);

                }

            } else {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);

                }

            }


        } catch (Exception ex) {
            ex.printStackTrace();

            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error: " + ReportesController.class.getName());

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();

        }

    }

    private void createrQueryCunatitativaGeneralPendientes() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        queryRecursos = new StringBuilder();
        qRecursos = null;
        niveles = 0;
        groupRcRV = null;
        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
            qRecursos = " uor.cantRv, uor.renglonvarianteId FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId WHERE uor.conMat = '1' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) FROM Unidadobra uo  INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId LEFT JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '3' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '2' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = null;
            Subquery1 = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
            qRecursos = " uor.cantRv, uor.renglonvarianteId FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON rvr.renglonvarianteId =  uor.renglonvarianteId   WHERE uor.conMat = '1' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '3' AND ";
            Subquery1 = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
            qRecursos = " uor.cantRv, uor.renglonvarianteId FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId WHERE uor.conMat = '1' AND ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '2' AND ";
            Subquery1 = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
            qRecursos = " uor.cantRv, uor.renglonvarianteId FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId WHERE uor.conMat = '1' AND ";
        }


        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());

            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());

        }
        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            select = "SELECT ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo ";

            niveles = 1;
        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                partZonas = comboZonas.getValue().split(" - ");
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ";

            niveles = 2;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {

                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }

            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            niveles = 3;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }

            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.codigo, rec.descripcion, rec.um, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion,  niv.codigo, niv.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
            niveles = 4;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }


            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }

            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion  ";
            niveles = 5;
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, ";

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            System.out.println("<<<<<<<<Aqui entro yo>>>>>>>");
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");
            partSub = comboSubespecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }
            if (comboNivel.getValue().trim().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().trim().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            }
            if (comboEspecialidades.getValue().trim().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else if (!comboEspecialidades.getValue().trim().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            }
            if (comboSubespecialidades.getValue().trim().equals("Todas")) {
                subQSub = " ";
                subQSubM = " ";
            } else if (!comboSubespecialidades.getValue().trim().equals("Todas")) {
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());

            }
            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, sub.codigo as codeSub, sub.descripcion as subdesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
            niveles = 6;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo, esp.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion  ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        query.append(subQEsp);
                    }
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        queryRecursos.append(subQEsp);
                    }
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 15;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            select = "SELECT esp.codigo as codEs, esp.descripcion as desEs, zon.codigo, zon.desripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion ";

            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    query.append(subQZon);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());


                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    query.append(subQZon);
                    query.append(subQEsp);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());


                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo as espCo, esp.descripcion as espDe, zon.codigo as zonC, zon.desripcion as zonD, ob.codigo, ob.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, ob.codigo, ob.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());


                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());


                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());


                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEsp);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());


                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());


                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());


                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo as esC, esp.descripcion as esDes, sub.codigo, sub.descripcion,";
            group = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;

                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 156;
        }
        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(groupM);
                }

            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(" GROUP BY uor.cantRv, uor.renglonvarianteId");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(" GROUP BY uor.cantRv, uor.renglonvarianteId");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(groupM);
                }

            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && comboEspecialidades.getValue() == null) {

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(subQEmp);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    System.out.println("sqjadkjhewdkjh: " + subQSubM);
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(groupM);
                    System.out.println("gggg: " + qmateriales.toString());
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

        }
        ArrayList<DatosCuantitativaGenreralModel> temp = new ArrayList<>();
        ArrayList<DatosCuantitativaGenreralModel> dataToFilter = new ArrayList<>();
        parametros = new HashMap<>();
        Empresaconstructora empresaconstructora = new Empresaconstructora();
        if (comboEmpresas.getValue() == null) {
            parametros.put("empName", " ");
        } else if (comboEmpresas.getValue() != null) {
            int id = reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            empresaconstructora = reportProjectStructureSingelton.getEmpresaconstructora(id);
            parametros.put("empName", "Empresa: " + empresaconstructora.getCodigo() + " - " + empresaconstructora.getDescripcion());
        }
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);
        try {
            ArrayList<DatosCuantitativaGenreralModel> tempNoMat = new ArrayList<>();
            tempNoMat = cfr.getRecursosGeneral(reportesController, query.toString().trim(), niveles, empresaconstructora, obra, queryRecursos.toString().trim());
            dataToFilter.addAll(tempNoMat);

            temp.addAll(dataToFilter);
            ifDesglose = false;
            if (checkDesglose.isSelected()) {
                ifDesglose = true;
            }

            if (Subquery1 != null) {
                ArrayList<DatosCuantitativaGenreralModel> tempMat = new ArrayList<>();
                tempMat = cfr.getRecursosGeneralMateriales(reportesController, qmateriales.toString().trim(), niveles, ifDesglose, obra, empresaconstructora);
                temp.addAll(tempMat);
            }
            date = LocalDate.now();
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("reportName", "Cuantitativa");
            parametros.put("image", "templete/logoReport.jpg");


            temp.size();
            List<DatosCuantitativaGenreralModel> datosList = new ArrayList<>();
            datosList = temp.parallelStream().filter(i -> Collections.frequency(temp, i) > 1).collect(Collectors.toList());
            datosList.size();
            List<DatosCuantitativaGenreralModel> uniqDatos = new ArrayList<>();
            for (DatosCuantitativaGenreralModel datos : datosList.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
                double valCant = getCantSum(temp, datos);
                double valCosto = getCostSum(temp, datos);
                uniqDatos.add(new DatosCuantitativaGenreralModel(datos.getEmpresa(), datos.getZona(), datos.getObjeto(), datos.getNivel(), datos.getEspecialidad(), datos.getSubespecialidad(), datos.getCodigo(), datos.getDescripcion(), datos.getUm(), datos.getTipo(), datos.getCpo(), datos.getCpe(), datos.getCet(), datos.getOtra(), valCant, datos.getPrecio(), datos.getPreciomlc(), Math.round(valCosto * 100d) / 100d));
            }

            temp.removeAll(datosList);
            temp.addAll(uniqDatos);
            uniqDatos.size();

            ArrayList<DatosCuantitativaGenreralModel> endDatosCuantitativaGenreralModels = new ArrayList<>();
            endDatosCuantitativaGenreralModels.addAll(temp);


            endDatosCuantitativaGenreralModels.size();
            List<DatosCuantitativaGenreralForReportModel> datosToReportList = cfr.createReportCuantitativaGeneralFormater(reportesController, endDatosCuantitativaGenreralModels, obra);
            datosToReportList.size();

            if (niveles <= 6) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModel::getNivel).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 15) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 125) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 1235) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 156) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            }

            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();
            garbage = Runtime.getRuntime();

            if (checkAmbMonedas.isSelected() == true) {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);

                }

            } else {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);

                }

            }


        } catch (Exception ex) {
            ex.printStackTrace();

            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error: " + ReportesController.class.getName());

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();

        }

    }

    private void createReportAcomulado() {
        query = new StringBuilder();
        niveles = 0;
        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 3;
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 4;
        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 6;

        }


        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }

        if (subQObr != null && subQZon == null && subQObj == null) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, uo.cantidad, uo.costototal, SUM(cert.cantidad) as cant, SUM(cert.costmaterial)as mater, SUM(cert.costmano) as mano, SUM(cert.costequipo) as equip FROM Unidadobra uo LEFT JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);
            if (subQEmp != null) {
                query.append(subQEmp);
            }
            query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um ");

        } else if (subQObr != null && subQZon != null && subQObj == null) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, uo.cantidad, uo.costototal, SUM(cert.cantidad) as cant, SUM(cert.costmaterial)as mater, SUM(cert.costmano) as mano, SUM(cert.costequipo) as equip FROM Unidadobra uo LEFT JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            if (subQEmp != null) {
                query.append(subQEmp);
            }
            query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um ");

        } else if (subQObr != null && subQObj != null && subQZon != null && subQNiv == null) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, uo.cantidad, uo.costototal, SUM(cert.cantidad) as cant, SUM(cert.costmaterial)as mater, SUM(cert.costmano) as mano, SUM(cert.costequipo) as equip FROM Unidadobra uo LEFT JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            if (subQEmp != null) {
                query.append(subQEmp);
            }
            query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um ");

        } else if (subQObr != null && subQNiv != null && subQObj != null && subQZon != null && subQEsp == null && subQEmp == null) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, uo.cantidad, uo.costototal, SUM(cert.cantidad) as cant, SUM(cert.costmaterial)as mater, SUM(cert.costmano) as mano, SUM(cert.costequipo) as equip FROM Unidadobra uo LEFT JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            if (subQEmp != null) {
                query.append(subQEmp);
            }
            query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um ");
        }

        if (subQObr != null && subQEsp != null && subQNiv != null && subQObj != null && subQZon != null && subQSub == null && subQEmp == null) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, uo.cantidad, uo.costototal, SUM(cert.cantidad) as cant, SUM(cert.costmaterial)as mater, SUM(cert.costmano) as mano, SUM(cert.costequipo) as equip FROM Unidadobra uo LEFT JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            if (subQEmp != null) {
                query.append(subQEmp);
            }
            query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um ");

        } else if (subQObr != null && subQSub != null && subQEsp != null && subQNiv != null && subQObj != null && subQZon != null && subQEmp == null) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, uo.cantidad, uo.costototal, SUM(cert.cantidad) as cant, SUM(cert.costmaterial)as mater, SUM(cert.costmano) as mano, SUM(cert.costequipo) as equip FROM Unidadobra uo LEFT JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            if (subQEmp != null) {
                query.append(subQEmp);
            }
            query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um ");

        }

        System.out.println(niveles);
        System.out.println(query.toString().trim());
        List<AcomuladoModel> list = new ArrayList<>();
        list = cfr.getAcomuladoModelList(reportesController, query.toString().trim());


        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("titleReport", "Acumulado");
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");

        if (niveles == 1) {
            list.sort(Comparator.comparing(AcomuladoModel::getEmpresa));
        } else if (niveles == 2) {
            list.sort(Comparator.comparing(AcomuladoModel::getEmpresa).thenComparing(AcomuladoModel::getZona));
        } else if (niveles == 3) {
            list.sort(Comparator.comparing(AcomuladoModel::getEmpresa).thenComparing(AcomuladoModel::getZona).thenComparing(AcomuladoModel::getObjeto));
        } else if (niveles == 4) {
            list.sort(Comparator.comparing(AcomuladoModel::getEmpresa).thenComparing(AcomuladoModel::getZona).thenComparing(AcomuladoModel::getObjeto).thenComparing(AcomuladoModel::getNivel));
        } else if (niveles == 5) {
            list.sort(Comparator.comparing(AcomuladoModel::getEmpresa).thenComparing(AcomuladoModel::getZona).thenComparing(AcomuladoModel::getObjeto).thenComparing(AcomuladoModel::getNivel).thenComparing(AcomuladoModel::getEspecialidad));
        } else if (niveles == 6) {
            list.sort(Comparator.comparing(AcomuladoModel::getEmpresa).thenComparing(AcomuladoModel::getZona).thenComparing(AcomuladoModel::getObjeto).thenComparing(AcomuladoModel::getNivel).thenComparing(AcomuladoModel::getEspecialidad).thenComparing(AcomuladoModel::getSubespecialidad));
        }

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.createReportAcomulado(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(list);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                // stage.close();
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.createReportAcomulado(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(list);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                //stage.close();
                exportarExcel(jp);
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (JRException e) {
            e.printStackTrace();
        }
    }

    private void createReportPendientes() {
        myFlag = true;
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        queryRecursos = new StringBuilder();
        qequipos = new StringBuilder();
        qRecursos = null;
        niveles = 0;
        groupRcRV = null;
        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as a1, eoe.cpe as a2, eoe.cet as a3, eoe.otra as a4, rec.id , SUM(rvr.cantidas * uor.cantRv)   FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Certificacion ctr On uor.unidadobra__id = ctr.unidadobra__id INNER JOIN Renglonrecursos rvr ON uor.renglonvariante__id = rvr.renglonvariante__id INNER JOIN Recursos rec ON rvr.recursos__id = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obra__id = eoe.obra_id AND ec.id = eoe.empresaconstructora_id AND rec.id = eoe.recursos_id WHERE rec.tipo != '1' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad) as certif, bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id  WHERE ";
            SubQString = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
            qRecursos = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as a1, eoe.cpe as a2, eoe.cet as a3, eoe.otra as a4, rec.id, SUM(rvr.cantidas * uor.cantRv)  FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Certificacion ctr On uor.unidadobra__id = ctr.unidadobra__id INNER JOIN Renglonrecursos rvr ON uor.renglonvariante__id = rvr.renglonvariante__id INNER JOIN Recursos rec ON rvr.recursos__id = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obra__id = eoe.obra_id AND ec.id = eoe.empresaconstructora_id AND rec.id = eoe.recursos_id WHERE rec.tipo != '1' AND ";
            Subquery1 = null;
            SubQString = null;
            qRecursos = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as a1, eoe.cpe as a2, eoe.cet as a3, eoe.otra as a4, rec.id, SUM(rvr.cantidas * uor.cantRv)  FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Certificacion ctr On uor.unidadobra__id = ctr.unidadobra__id INNER JOIN Renglonrecursos rvr ON uor.renglonvariante__id = rvr.renglonvariante__id INNER JOIN Recursos rec ON rvr.recursos__id = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obra__id = eoe.obra_id AND ec.id = eoe.empresaconstructora_id AND rec.id = eoe.recursos_id WHERE rec.tipo = '2' AND ";
            Subquery1 = null;
            SubQString = null;
            qRecursos = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as a1, eoe.cpe as a2, eoe.cet as a3, eoe.otra as a4, rec.id, SUM(rvr.cantidas * uor.cantRv)  FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Certificacion ctr On uor.unidadobra__id = ctr.unidadobra__id INNER JOIN Renglonrecursos rvr ON uor.renglonvariante__id = rvr.renglonvariante__id INNER JOIN Recursos rec ON rvr.recursos__id = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obra__id = eoe.obra_id AND ec.id = eoe.empresaconstructora_id AND rec.id = eoe.recursos_id WHERE rec.tipo = '3' AND ";
            Subquery1 = null;
            qRecursos = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND ";
            SubQString = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = null;
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id  WHERE ";
            SubQString = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as a1, eoe.cpe as a2, eoe.cet as a3, eoe.otra as a4, rec.id, SUM(rvr.cantidas * uor.cantRv)  FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Certificacion ctr On uor.unidadobra__id = ctr.unidadobra__id INNER JOIN Renglonrecursos rvr ON uor.renglonvariante__id = rvr.renglonvariante__id INNER JOIN Recursos rec ON rvr.recursos__id = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obra__id = eoe.obra_id AND ec.id = eoe.empresaconstructora_id AND rec.id = eoe.recursos_id WHERE rec.tipo = '2' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id  WHERE ";
            qRecursos = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND ";
            SubQString = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo as a1, eoe.cpe as a2, eoe.cet as a3, eoe.otra as a4, rec.id, SUM(rvr.cantidas * uor.cantRv)  FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Certificacion ctr On uor.unidadobra__id = ctr.unidadobra__id INNER JOIN Renglonrecursos rvr ON uor.renglonvariante__id = rvr.renglonvariante__id INNER JOIN Recursos rec ON rvr.recursos__id = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obra__id = eoe.obra_id AND ec.id = eoe.empresaconstructora_id AND rec.id = eoe.recursos_id WHERE rec.tipo = '3' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id  WHERE ";
            qRecursos = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND ";
            SubQString = " SUM(bajo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE ";
        }
        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }


        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo ";

            niveles = 1;
        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                partZonas = comboZonas.getValue().split(" - ");
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ";

            niveles = 2;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {

                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }

            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            niveles = 3;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }

            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.codigo, rec.descripcion, rec.um, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion,  niv.codigo, niv.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
            niveles = 4;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }


            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }

            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion  ";
            niveles = 5;
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, ";

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }
            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }
            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            }
            if (comboSubespecialidades.getValue().trim().equals("Todas")) {
                System.out.println("Aqui entro yo!!! V1");
                subQSub = " ";
                subQSubM = " ";
            } else if (!comboSubespecialidades.getValue().trim().equals("Todas")) {
                System.out.println("Aqui entro yo!!! V2");
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            }
            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, sub.codigo as codeSub, sub.descripcion as subdesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
            niveles = 6;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT esp.codigo as v1, esp.descripcion as v2, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo,  rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion  ";

            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQEspM);
                    query.append(subQEmpM);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        query.append(subQEspM);
                    }
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }

            if (SubQString != null) {
                if (subQEmp != null) {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qequipos.append(subQEspM);
                    qequipos.append(subQEmpM);
                    qequipos.append(groupM);
                } else {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qequipos.append(subQEspM);
                    qequipos.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(group);
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        queryRecursos.append(subQEsp);
                    }
                    queryRecursos.append(group);
                }
            }

            niveles = 15;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT esp.codigo as codEs, esp.descripcion as desEs, zon.codigo, zon.desripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion ";

            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    query.append(subQZonM);
                    query.append(subQEspM);
                    query.append(subQEmpM);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQZonM);
                    query.append(subQEspM);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }

            if (SubQString != null) {
                if (subQEmp != null) {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qequipos.append(subQZonM);
                    qequipos.append(subQEspM);
                    qequipos.append(subQEmpM);
                    qequipos.append(groupM);
                } else {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qequipos.append(subQZonM);
                    qequipos.append(subQEspM);
                    qequipos.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(group);
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(group);
                }
            }

            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT esp.codigo as espCo, esp.descripcion as espDe, zon.codigo as zonC, zon.desripcion as zonD, ob.codigo, ob.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, ob.codigo, ob.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    query.append(subQZonM);
                    query.append(subQObjM);
                    query.append(subQEspM);
                    query.append(subQEmpM);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQZonM);
                    query.append(subQObjM);
                    query.append(subQEspM);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }

            if (SubQString != null) {
                if (subQEmp != null) {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qequipos.append(subQZonM);
                    qequipos.append(subQObjM);
                    qequipos.append(subQEspM);
                    qequipos.append(subQEmpM);
                    qequipos.append(groupM);
                } else {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qequipos.append(subQZonM);
                    qequipos.append(subQObjM);
                    qequipos.append(subQEspM);
                    qequipos.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(group);
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(group);
                }
            }

            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            select = "SELECT esp.codigo as esC, esp.descripcion as esDes, sub.codigo, sub.descripcion,";
            group = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    query.append(subQEspM);
                    query.append(subQSubM);
                    query.append(subQEmpM);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    query.append(subQEspM);
                    query.append(subQSubM);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(groupM);
                }
            }

            if (SubQString != null) {
                if (subQEmp != null) {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    qequipos.append(subQEspM);
                    qequipos.append(subQSubM);
                    qequipos.append(subQEmpM);
                    qequipos.append(groupM);
                } else {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    qequipos.append(subQEspM);
                    qequipos.append(subQSubM);
                    qequipos.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(group);
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(group);
                }
            }

            niveles = 156;
        }
        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQEmpM);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(groupM);
                }

            }

            if (SubQString != null) {
                if (subQEmp != null) {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQEmpM);
                    qequipos.append(groupM);
                } else {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(groupM);
                }

            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(group);
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(group);
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQZonM);
                    query.append(subQEmpM);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQZonM);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(groupM);
                }

            }

            if (SubQString != null) {
                if (subQEmp != null) {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQZonM);
                    qequipos.append(subQEmpM);
                    qequipos.append(groupM);
                } else {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQZonM);
                    qequipos.append(groupM);
                }

            }


            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(group);
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(group);
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && comboEspecialidades.getValue() == null) {

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQZonM);
                    query.append(subQObjM);
                    query.append(subQEmpM);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQZonM);
                    query.append(subQObjM);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(groupM);
                }
            }
            if (SubQString != null) {
                if (subQEmp != null) {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQZonM);
                    qequipos.append(subQObjM);
                    qequipos.append(subQEmpM);
                    qequipos.append(groupM);
                } else {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQZonM);
                    qequipos.append(subQObjM);
                    qequipos.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(group);
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(group);
                }
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null && subQSub == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQZonM);
                    query.append(subQObjM);
                    query.append(subQNivM);
                    query.append(subQEmpM);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQZonM);
                    query.append(subQObjM);
                    query.append(subQNivM);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(groupM);
                }
            }
            if (SubQString != null) {
                if (subQEmp != null) {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQZonM);
                    qequipos.append(subQObjM);
                    qequipos.append(subQNivM);
                    qequipos.append(subQEmpM);
                    qequipos.append(groupM);
                } else {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQZonM);
                    qequipos.append(subQObjM);
                    qequipos.append(subQNivM);
                    qequipos.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(group);
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(group);
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQZonM);
                    query.append(subQObjM);
                    query.append(subQNivM);
                    query.append(subQEspM);
                    query.append(subQEmpM);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQZonM);
                    query.append(subQObjM);
                    query.append(subQNivM);
                    query.append(subQEspM);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(groupM);
                }
            }

            if (SubQString != null) {
                if (subQEmp != null) {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQZonM);
                    qequipos.append(subQObjM);
                    qequipos.append(subQNivM);
                    qequipos.append(subQEspM);
                    qequipos.append(subQEmpM);
                    qequipos.append(groupM);
                } else {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQZonM);
                    qequipos.append(subQObjM);
                    qequipos.append(subQNivM);
                    qequipos.append(subQEspM);
                    qequipos.append(groupM);
                }
            }


            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(group);
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(group);
                }
            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQZonM);
                    query.append(subQObjM);
                    query.append(subQNivM);
                    query.append(subQEspM);
                    query.append(subQSubM);
                    query.append(subQEmpM);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObrM);
                    query.append(subQZonM);
                    query.append(subQObjM);
                    query.append(subQNivM);
                    query.append(subQEspM);
                    query.append(subQSubM);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(groupM);
                } else {
                    System.out.println("566556" + subQSubM);
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(groupM);
                }
            }
            if (SubQString != null) {
                if (subQEmp != null) {
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQZonM);
                    qequipos.append(subQObjM);
                    qequipos.append(subQNivM);
                    qequipos.append(subQEspM);
                    qequipos.append(subQSubM);
                    qequipos.append(subQEmpM);
                    qequipos.append(groupM);
                } else {
                    System.out.println("***" + subQSubM);
                    qequipos.append(select);
                    qequipos.append(SubQString);
                    qequipos.append(subQObrM);
                    qequipos.append(subQZonM);
                    qequipos.append(subQObjM);
                    qequipos.append(subQNivM);
                    qequipos.append(subQEspM);
                    qequipos.append(subQSubM);
                    qequipos.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(group);
                } else {
                    System.out.println("******" + subQSubM);
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(group);
                }
            }
        }

        parametros = new HashMap<>();
        Empresaconstructora empresaconstructora = new Empresaconstructora();
        if (comboEmpresas.getValue() == null) {
            parametros.put("empName", " ");
        } else if (comboEmpresas.getValue() != null) {
            int id = reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            empresaconstructora = reportProjectStructureSingelton.getEmpresaconstructora(id);
            parametros.put("empName", "Empresa: " + empresaconstructora.getCodigo() + " - " + empresaconstructora.getDescripcion());
        }
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        System.out.println(niveles);
        //System.out.printf(qequipos.toString().trim());
        System.out.println("RECURSOS: ***" + query.toString().trim());

        try {
            StringBuilder falsequery = new StringBuilder();
            ArrayList<DatosCuantitativaGenreralModel> tempNoMatPresu = new ArrayList<>();
            ArrayList<DatosCuantitativaGenreralModel> tempNoMat = new ArrayList<>();
            if (Subquery != null && queryRecursos != null) {
                // System.out.println("RECURSOS: ***" + queryRecursos.toString().trim());
                tempNoMatPresu = cfr.getRecursosGeneral(reportesController, queryRecursos.toString().trim(), niveles, empresaconstructora, obra, falsequery.toString().trim());

                //  System.out.println("--->: " + query.toString().trim());
                tempNoMat = cfr.getRecursosGeneralCertiFicacionPendientes(reportesController, query.toString().trim(), niveles, empresaconstructora, obra, falsequery.toString().trim());

            }
            ifDesglose = false;
            if (checkDesglose.isSelected()) {
                ifDesglose = true;
            }

            //  System.out.println(qequipos.toString().trim());
            ArrayList<DatosCuantitativaGenreralModel> materialesFinal = new ArrayList<>();
            if (Subquery1 != null && qequipos != null) {
                ArrayList<DatosCuantitativaGenreralModel> tempPresupMat = new ArrayList<>();
                tempPresupMat = cfr.getRecursosGeneralMateriales(reportesController, qequipos.toString().trim(), niveles, ifDesglose, obra, empresaconstructora);

                ArrayList<DatosCuantitativaGenreralModel> tempMat = new ArrayList<>();
                tempMat = cfr.getRecursosGeneralMateriales(reportesController, qmateriales.toString().trim(), niveles, ifDesglose, obra, empresaconstructora);
                materialesFinal.addAll(getFinalCalculateList(tempPresupMat, tempMat, niveles));
            }


            date = LocalDate.now();
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("reportName", "Recursos Pendientes");
            parametros.put("image", "templete/logoReport.jpg");


            ArrayList<DatosCuantitativaGenreralModel> endDatosCuantitativaGenreralModels = new ArrayList<>();
            endDatosCuantitativaGenreralModels.addAll(getFinalCalculateList(tempNoMatPresu, tempNoMat, niveles));
            endDatosCuantitativaGenreralModels.addAll(materialesFinal);


            List<DatosCuantitativaGenreralForReportModel> datosToReportList = cfr.createReportCuantitativaGeneralFormater(reportesController, endDatosCuantitativaGenreralModels, obra);
            datosToReportList.size();

            if (niveles <= 6) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModel::getNivel).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));

            } else if (niveles == 15) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 125) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 1235) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getZona).thenComparing(DatosCuantitativaGenreralForReportModel::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            } else if (niveles == 156) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModel::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModel::getTipo));
            }

            datosToReportList.size();

            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            garbage = Runtime.getRuntime();

            if (checkAmbMonedas.isSelected() == true) {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);

                }

            } else {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneral(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);

                }

            }


        } catch (Exception ex) {
            ex.printStackTrace();

            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error: " + ReportesController.class.getName());

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();

        }

    }


    private void createReportCertificacionTimeUO() {
        query = new StringBuilder();
        niveles = 0;
        String certfGroup = null;

        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            niveles = 1;

        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            //idZon = Integer.parseInt(partZonas[0]);

            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 3;
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;

            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;

            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }


        if (comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {
            subQBrig = " ";
            niveles = 7;
        } else if (comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
            partBrig = comboBrigada.getValue().split(" - ");

            subQBrig = " AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;
            niveles = 7;
        }

        if (comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todos")) {
            subQGrup = " ";
            niveles = 8;
        } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todos")) {
            partGrup = comboGrupo.getValue().split(" - ");

            subQGrup = " AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
            niveles = 8;
        }

        if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
            subQCuad = " ";
            niveles = 9;
        } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
            partCuad = comboCuadrilla.getValue().split(" - ");

            subQCuad = " AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
            niveles = 9;
        }

        if (niveles <= 6) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(cert.costmaterial)as mater, SUM(cert.costmano) as mano, SUM(cert.costequipo) as equip FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";

            query.append(Subquery);
            query.append(subQObr);

            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            certfGroup = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um ";

        } else if (niveles == 7) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(cert.costmaterial)as mater, SUM(cert.costmano) as mano, SUM(cert.costequipo) as equip, br.codigo, br.descripcion FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Brigadaconstruccion br on cert.brigadaconstruccionId = br.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);

            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQBrig);
            }

            certfGroup = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, br.codigo, br.descripcion ";

        } else if (niveles == 8) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(cert.costmaterial)as mater, SUM(cert.costmano) as mano, SUM(cert.costequipo) as equip, br.codigo, br.descripcion, gr.codigo, gr.descripcion FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Brigadaconstruccion br on cert.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr on cert.grupoconstruccionId = gr.id WHERE ";

            query.append(Subquery);
            query.append(subQObr);

            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQBrig);
            }

            if (subQGrup == null || subQGrup.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQGrup);
            }

            certfGroup = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";

        } else if (niveles == 9) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(cert.costmaterial)as mater, SUM(cert.costmano) as mano, SUM(cert.costequipo) as equip, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Brigadaconstruccion br on cert.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr on cert.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad on cert.cuadrillaconstruccionId = cuad.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);

            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQBrig);
            }

            if (subQGrup == null || subQGrup.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQGrup);
            }

            if (subQCuad == null || subQCuad.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQCuad);
            }

            certfGroup = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";

        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {

            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            String timeRestrict = " AND cert.desde >= '" + desdeDate.toString().trim() + "' AND cert.hasta <= '" + hastaData.toString().trim() + "'";
            query.append(timeRestrict);
            query.append(certfGroup);
            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }

        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());

        if (othersOptions.getValue() != null && othersOptions.getValue().equals("Inversionista")) {
            System.out.println(othersOptions.getValue());
            parametros.put("inver", "Cliente: " + obra.getInversionistaByInversionistaId().getCodigo() + " " + obra.getInversionistaByInversionistaId().getDescripcion());
        } else {
            parametros.put("inver", " ");
        }

        if (checkFecha.isSelected()) {
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        } else {
            parametros.put("fecha", " ");
        }
        int templete = 0;
        if (comboConfecionado.getValue() == null) {
            templete = 1;
            parametros.put("reportName", "Certificación período: " + intervalo);
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");

        } else if (comboConfecionado.getValue() != null) {
            templete = 2;
            String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            parametros.put("empresa", empresa.getNombre());
            parametros.put("reportName", "Certificación período: " + intervalo);
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");
            parametros.put("conf", "Confeccionado: " + confe);
            parametros.put("rev", "Revisado: " + rev);
            parametros.put("aprub", "Aprobado: " + apro);
        }

        table = false;
        if (checkTable.isSelected() == false) {
            table = true;
        }


        try {
            datosCertificacionOrigenArrayList = new ArrayList<>();
            datosCertificacionOrigenArrayList = cfr.getDatosCertificacionOrigenArrayList(reportesController, query.toString().trim(), niveles);
        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();
        }

        if (datosCertificacionOrigenArrayList.size() != 0) {
            certificacionOrigenUOArrayList = new ArrayList<CertificacionOrigenUO>();
            certificacionOrigenUOArrayList = cfr.createReportesCOUOFormater(reportesController, datosCertificacionOrigenArrayList, obra);
            indication.setText(" ");
            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            if (niveles < 7) {
                certificacionOrigenUOArrayList.sort(Comparator.comparing(CertificacionOrigenUO::getIdEmpresa).thenComparing(CertificacionOrigenUO::getIdZona).thenComparing(CertificacionOrigenUO::getIdObjeto).thenComparing(CertificacionOrigenUO::getIdNivel).thenComparing(CertificacionOrigenUO::getIdEspecialidad).thenComparing(CertificacionOrigenUO::getIdSub).thenComparing(CertificacionOrigenUO::getIdUnidad));
            } else if (niveles == 7) {
                certificacionOrigenUOArrayList.sort(Comparator.comparing(CertificacionOrigenUO::getIdEmpresa).thenComparing(CertificacionOrigenUO::getBrigada).thenComparing(CertificacionOrigenUO::getIdZona).thenComparing(CertificacionOrigenUO::getIdObjeto).thenComparing(CertificacionOrigenUO::getIdNivel).thenComparing(CertificacionOrigenUO::getIdEspecialidad).thenComparing(CertificacionOrigenUO::getIdSub).thenComparing(CertificacionOrigenUO::getIdUnidad));
            } else if (niveles == 8) {
                certificacionOrigenUOArrayList.sort(Comparator.comparing(CertificacionOrigenUO::getIdEmpresa).thenComparing(CertificacionOrigenUO::getBrigada).thenComparing(CertificacionOrigenUO::getGrupo).thenComparing(CertificacionOrigenUO::getIdZona).thenComparing(CertificacionOrigenUO::getIdObjeto).thenComparing(CertificacionOrigenUO::getIdNivel).thenComparing(CertificacionOrigenUO::getIdEspecialidad).thenComparing(CertificacionOrigenUO::getIdSub).thenComparing(CertificacionOrigenUO::getIdUnidad));
            } else if (niveles == 9) {
                certificacionOrigenUOArrayList.sort(Comparator.comparing(CertificacionOrigenUO::getIdEmpresa).thenComparing(CertificacionOrigenUO::getBrigada).thenComparing(CertificacionOrigenUO::getGrupo).thenComparing(CertificacionOrigenUO::getCuadrilla).thenComparing(CertificacionOrigenUO::getIdZona).thenComparing(CertificacionOrigenUO::getIdObjeto).thenComparing(CertificacionOrigenUO::getIdNivel).thenComparing(CertificacionOrigenUO::getIdEspecialidad).thenComparing(CertificacionOrigenUO::getIdSub).thenComparing(CertificacionOrigenUO::getIdUnidad));
            }
            List<ConceptosReporte> reportFormaters = new ArrayList<>();
            for (CertificacionOrigenUO totalReportFormater : certificacionOrigenUOArrayList) {
                reportFormaters.addAll(totalReportFormater.getBodyConceptos());
            }
            reportFormaters.size();
            List<ResumenCostosList> resumenList = new ArrayList<>();
            resumenList = getResmenListReport(obra, reportFormaters);
            parametros.put("resumen", resumenList);

            try {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createCertificacionOrigen(reportesController, niveles, templete, table);
                    JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createCertificacionOrigen(reportesController, niveles, templete, table);
                    JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    //stage.close();
                    exportarExcel(jp);
                }
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (JRException e) {
                e.printStackTrace();
            }
        } else {

            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("No existen certificaciones en esta ObraPCW para el periodo especificado");
            alert.showAndWait();
        }


    }

    private void reportbyGrupoEscalaUO() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        niveles = 0;

        if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantRv), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, rec.grupoescala FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Renglonrecursos rvr ON uor.renglonvariante__id = rvr.renglonvariante__id INNER JOIN Recursos rec ON rvr.recursos__id = rec.id WHERE rec.tipo = '2' AND  ";

            Subquery1 = " SUM(DISTINCT bajo.cantidad) as cantidad, SUM(DISTINCT bajo.costo) as costo, bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id WHERE uor.conMat = '0' AND ";
        }


        if (comboObras.getValue() != null && comboZonas.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");
            select = "SELECT ec.id, ec.codigo as empC, ec.descripcion as emp, ";

            subQObr = "uo.obra__id= " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, rec.preciomlc, rec.grupoescala ";
            groupM = " GROUP BY  bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion ";
            order = " ORDER BY rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY bajo.tipo ASC";

            niveles = 1;
        }

        if (comboObras != null && comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;

            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id AS idEmp, ec.codigo AS codeEmp, ec.descripcion AS emp, zon.id, zon.codigo AS codeZon, zon.desripcion,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion";
            order = " ORDER BY zon.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, bajo.tipo ASC";
            niveles = 2;


        } else if (comboObras != null && comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            select = "SELECT ec.id as idEmp, ec.codigo as codeEmp, ec.descripcion as emp, zon.id, zon.codigo AS codeZon, zon.desripcion, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, rec.preciomlc, rec.grupoescala ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion ";

            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            subQZon = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;

            order = " ORDER BY zon.id, rec.tipo, rec.grupoescala ASC";
            order = " ORDER BY zon.id, bajo.tipo ASC";
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, rec.preciomlc, rec.grupoescala ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion ";

            order = " ORDER BY zon.id, ob.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, ob.id, bajo.tipo ASC";
            niveles = 3;

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion ";

            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;

            order = " ORDER BY zon.id, ob.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, ob.id, bajo.tipo ASC";
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY  bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, bajo.tipo ASC";

            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, rec.preciomlc, rec.grupoescala ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion ";

            order = " ORDER BY zon.id, ob.id, niv.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, bajo.tipo ASC";
            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, bajo.tipo ASC";
            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, bajo.tipo ASC";

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, rec.grupoescala  ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC";

            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, rec.grupoescala ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC";


            niveles = 6;

        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos") && comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, bajo.tipo ASC";
            niveles = 55;
        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && subQEsp != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQEsp);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQEspM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }

        }
        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 1;
        }


        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }


        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQNivM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQNivM);
                qmateriales.append(subQEspM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQNivM);
                qmateriales.append(subQEspM);
                qmateriales.append(subQSubM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }
        } else if (subQObr != null && subQEmp != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQEmpM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }

        }


        ArrayList<DatosCuantitativaModelVGES> tempNoMat = new ArrayList<DatosCuantitativaModelVGES>();
        ArrayList<DatosCuantitativaModelVGES> tempMat = new ArrayList<DatosCuantitativaModelVGES>();
        ArrayList<DatosCuantitativaModelVGES> temp = new ArrayList<DatosCuantitativaModelVGES>();

        try {
            if (Subquery != null) {
                tempNoMat = cfr.getRecursosConsolidados(reportesController, query.toString().trim(), niveles);
                temp.addAll(tempNoMat);
            }

            ifDesglose = checkDesglose.isSelected() == true;
            if (Subquery1 != null) {

                tempMat = cfr.getRecursosMaterialesConsolidados(reportesController, qmateriales.toString().trim(), niveles, ifDesglose);
                temp.addAll(tempMat);

            }

            Collections.sort(temp);
        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();
        }
        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("titlereport", "Consolidado Mano de ObraPCW y Materiales");
        parametros.put("image", "templete/logoReport.jpg");

        datosCuantitativaModelVGESArrayList = new ArrayList<DatosCuantitativaModelVGES>();
        datosCuantitativaModelVGESArrayList.addAll(temp);


        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.cuantitativaReportConsolidado(reportesController, niveles, true);
                JRDataSource ds = new JRBeanCollectionDataSource(datosCuantitativaModelVGESArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
//                stage.close();
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.cuantitativaReportConsolidado(reportesController, niveles, true);
                JRDataSource ds = new JRBeanCollectionDataSource(datosCuantitativaModelVGESArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                // stage.close();
                exportarExcel(jp);
            }


        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (JRException e) {
            e.printStackTrace();
        }


    }

    /**
     * Para las obras renglones vatiantes
     */
    private void reportbyGrupoEscalaRV() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        niveles = 0;

        if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(rvr.cantidas * uor.cantidad), rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, rec.grupoescala FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN Renglonrecursos rvr ON uor.renglonvariante__id = rvr.renglonvariante__id INNER JOIN Recursos rec ON rvr.recursos__id = rec.id WHERE rec.tipo = '2' AND  ";

            Subquery1 = " SUM(DISTINCT bajo.cantidad) as cantidad, SUM(DISTINCT bajo.costo) as costo, bajo.idsuministro, bajo.tipo FROM Nivelespecifico uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN Bajoespecificacionrv bajo ON uo.id = bajo.nivelespecifico__id WHERE  ";
        }


        if (comboObras.getValue() != null && comboZonas.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");
            select = "SELECT ec.id, ec.codigo as empC, ec.descripcion as emp, ";

            subQObr = "uo.obra__id= " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, rec.preciomlc, rec.grupoescala ";
            groupM = " GROUP BY  bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion ";
            order = " ORDER BY rec.tipo ASC";
            orderm = " ORDER BY bajo.tipo ASC";

            niveles = 1;
        }

        if (comboObras != null && comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;

            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id AS idEmp, ec.codigo AS codeEmp, ec.descripcion AS emp, zon.id, zon.codigo AS codeZon, zon.desripcion,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion";
            order = " ORDER BY zon.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, bajo.tipo ASC";
            niveles = 2;


        } else if (comboObras != null && comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            select = "SELECT ec.id as idEmp, ec.codigo as codeEmp, ec.descripcion as emp, zon.id, zon.codigo AS codeZon, zon.desripcion, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, rec.preciomlc, rec.grupoescala ";
            groupM = " GROUP BY bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion ";

            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            subQZon = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;

            order = " ORDER BY zon.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, bajo.tipo ASC";
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, rec.preciomlc, rec.grupoescala ";
            groupM = " GROUP BY bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion ";

            order = " ORDER BY zon.id, ob.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, bajo.tipo ASC";
            niveles = 3;

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion ";

            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;

            order = " ORDER BY zon.id, ob.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, bajo.tipo ASC";
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY  bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, bajo.tipo ASC";

            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, rec.preciomlc, rec.grupoescala ";
            groupM = " GROUP BY bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion ";

            order = " ORDER BY zon.id, ob.id, niv.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, bajo.tipo ASC";
            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, bajo.tipo ASC";
            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, bajo.tipo ASC";

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, rec.grupoescala  ";
            groupM = " GROUP BY bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC";

            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, rec.grupoescala ";
            groupM = " GROUP BY bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, bajo.tipo ASC";


            niveles = 6;

        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos") && comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, rec.preciomlc, rec.grupoescala";
            groupM = " GROUP BY bajo.idsuministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, rec.tipo, rec.grupoescala ASC";
            orderm = " ORDER BY zon.id, ob.id, niv.id, esp.id, bajo.tipo ASC";
            niveles = 55;
        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && subQEsp != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQEsp);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQEspM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 1;
        }


        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }


        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQNivM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQNivM);
                qmateriales.append(subQEspM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQZonM);
                qmateriales.append(subQObjM);
                qmateriales.append(subQNivM);
                qmateriales.append(subQEspM);
                qmateriales.append(subQSubM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }
        } else if (subQObr != null && subQEmp != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(group);
                query.append(order);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQEmpM);
                qmateriales.append(groupM);
                qmateriales.append(orderm);

            }

        }

        ArrayList<DatosCuantitativaModelVGES> tempNoMat = new ArrayList<DatosCuantitativaModelVGES>();
        ArrayList<DatosCuantitativaModelVGES> tempMat = new ArrayList<DatosCuantitativaModelVGES>();
        ArrayList<DatosCuantitativaModelVGES> temp = new ArrayList<DatosCuantitativaModelVGES>();

        try {
            if (Subquery != null) {
                tempNoMat = cfr.getRecursosConsolidados(reportesController, query.toString().trim(), niveles);
                temp.addAll(tempNoMat);
            }

            ifDesglose = checkDesglose.isSelected() == true;
            if (Subquery1 != null) {

                tempMat = cfr.getRecursosMaterialesConsolidados(reportesController, qmateriales.toString().trim(), niveles, ifDesglose);
                temp.addAll(tempMat);
            }

            Collections.sort(temp);
        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();
        }
        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("titlereport", "Consolidado Mano de ObraPCW y Materiales");
        parametros.put("image", "templete/logoReport.jpg");

        datosCuantitativaModelVGESArrayList = new ArrayList<DatosCuantitativaModelVGES>();
        datosCuantitativaModelVGESArrayList.addAll(temp);

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.cuantitativaReportConsolidado(reportesController, niveles, true);
                JRDataSource ds = new JRBeanCollectionDataSource(datosCuantitativaModelVGESArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.cuantitativaReportConsolidado(reportesController, niveles, true);
                JRDataSource ds = new JRBeanCollectionDataSource(datosCuantitativaModelVGESArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                exportarExcel(jp);
            }


        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (JRException e) {
            e.printStackTrace();
        }


    }

    public void createReporteSalarioImpacto() {
        query = new StringBuilder();

        Subquery = " SELECT ec.codigo as empCod, ec.descripcion as empD,  zon.codigo as zonCo, zon.desripcion as zonDes, obj.codigo as objCo, obj.descripcion as objDes, niv.codigo as nivC, niv.descripcion as nivDes, esp.codigo as espCod, esp.descripcion as espdes, sub.codigo as codeSub, sub.descripcion as subDe, uo.codigo as codeU, uo.descripcion as uoDesc, rec.codigo as coderec, rec.descripcion as descrec, rec.um, rec.grupoescala, SUM(uor.cantrv * rvr.cantidas) as calc, rec.preciomn FROM unidadobra uo INNER JOIN empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos obj ON uo.objetos__id = obj.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN unidadobrarenglon uor ON uo.id = uor.unidadobra__id INNER JOIN renglonrecursos rvr ON uor.renglonvariante__id = rvr.renglonvariante__id INNER JOIN recursos rec ON rvr.recursos__id = rec.id WHERE rec.tipo = '2' AND  ";
        group = " GROUP BY ec.codigo, ec.descripcion,  zon.codigo, zon.desripcion, obj.codigo, obj.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, uo.codigo, uo.descripcion, rec.codigo, rec.descripcion, rec.um, rec.grupoescala, rec.preciomn ";

        if (comboObras.getValue() != null) {

            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 2;


        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQZon = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 3;

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;
            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            niveles = 0;
            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;
            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 1;
        }

        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(group);


        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(group);


        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(group);
        }

        if (subQObr != null && subQEmp != null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQEmp);
            query.append(group);
        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null && subQEmp != null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(subQEmp);
            query.append(group);
        }

        try {


            impactoReportModelArrayList = new ArrayList<>();
            impactoReportModelArrayList = cfr.calcSalImpacto(query.toString().trim());
        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();
        }
        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("Title", "Cálculo Impacto Salario 15");
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.createCalcSalarioImpacto(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(impactoReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                // stage.close();
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.createCalcSalarioImpacto(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(impactoReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                // stage.close();
                exportarExcel(jp);
            }

        } catch (JRException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }


    }

    public void createReporteSalarioImpactoRV() {
        query = new StringBuilder();

        Subquery = " SELECT ec.codigo as empCod, ec.descripcion as empD,  zon.codigo as zonCo, zon.desripcion as zonDes, obj.codigo as objCo, obj.descripcion as objDes, niv.codigo as nivC, niv.descripcion as nivDes, esp.codigo as espCod, esp.descripcion as espdes, sub.codigo as codeSub, sub.descripcion as subDe, uo.codigo as codeU, uo.descripcion as uoDesc, rec.codigo as coderec, rec.descripcion as descrec, rec.um, rec.grupoescala, SUM(uor.cantidad * rvr.cantidas) as calc, rec.preciomn FROM Nivelespecifico uo INNER JOIN empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos obj ON uo.objetos__id = obj.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Renglonnivelespecifico uor ON uo.id = uor.nivelespecifico__id INNER JOIN renglonrecursos rvr ON uor.renglonvariante__id = rvr.renglonvariante__id INNER JOIN recursos rec ON rvr.recursos__id = rec.id WHERE rec.tipo = '2' AND  ";
        group = " GROUP BY ec.codigo, ec.descripcion,  zon.codigo, zon.desripcion, obj.codigo, obj.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, uo.codigo, uo.descripcion, rec.codigo, rec.descripcion, rec.um, rec.grupoescala, rec.preciomn ";

        if (comboObras.getValue() != null) {

            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 2;


        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQZon = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 3;

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;
            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            niveles = 0;
            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;
            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 1;
        }

        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(group);


        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(group);


        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(group);
        }

        if (subQObr != null && subQEmp != null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQEmp);
            query.append(group);
        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null && subQEmp != null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(subQEmp);
            query.append(group);
        }

        try {
            impactoReportModelArrayList = new ArrayList<>();
            impactoReportModelArrayList = cfr.calcSalImpacto(query.toString().trim());
        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();
        }
        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("Title", "Cálculo Impacto Salario 15");
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.createCalcSalarioImpacto(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(impactoReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                //  stage.close();
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.createCalcSalarioImpacto(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(impactoReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                //stage.close();
                exportarExcel(jp);
            }

        } catch (JRException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }


    }

    public void createReporteSalarioImpactoCert() {
        query = new StringBuilder();

        Subquery = " SELECT ec.codigo as empCod, ec.descripcion as empD,  zon.codigo as zonCo, zon.desripcion as zonDes, obj.codigo as objCo, obj.descripcion as objDes, niv.codigo as nivC, niv.descripcion as nivDes, esp.codigo as espCod, esp.descripcion as espdes, sub.codigo as codeSub, sub.descripcion as subDe, uo.codigo as codeU, uo.descripcion as uoDesc, rec.codigo as coderec, rec.descripcion as descrec, rec.um, rec.grupoescala, SUM(cert.cantidad) as calc, rec.preciomn FROM unidadobra uo INNER JOIN empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos obj ON uo.objetos__id = obj.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN certificacionrecuo cert ON uo.id = cert.unidadobra_id INNER JOIN recursos rec ON cert.recurso_id = rec.id WHERE rec.tipo = '2' AND  ";
        group = " GROUP BY ec.codigo, ec.descripcion,  zon.codigo, zon.desripcion, obj.codigo, obj.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, uo.codigo, uo.descripcion, rec.codigo, rec.descripcion, rec.um, rec.grupoescala, rec.preciomn ";

        if (comboObras.getValue() != null) {

            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 2;


        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQZon = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 3;

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;
            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            niveles = 0;
            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;
            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 1;
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.fini >= '" + desdeDate.toString().trim() + "' AND cert.ffin <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());

        }

        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(timeRestrictCert);
            query.append(group);
        }

        if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(timeRestrictCert);
            query.append(group);
        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(timeRestrictCert);
            query.append(group);
        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(timeRestrictCert);
            query.append(group);


        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(timeRestrictCert);
            query.append(group);


        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(timeRestrictCert);
            query.append(group);

        }

        if (subQObr != null && subQEmp != null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQEmp);
            query.append(timeRestrictCert);
            query.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null && subQEmp != null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(subQEmp);
            query.append(timeRestrictCert);
            query.append(group);

        }

        try {
            impactoReportModelArrayList = new ArrayList<>();
            impactoReportModelArrayList = cfr.calcSalImpacto(query.toString().trim());
        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();
        }
        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("Title", "Cálculo Impacto Salario 15: " + intervalo);
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.createCalcSalarioImpacto(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(impactoReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.createCalcSalarioImpacto(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(impactoReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                exportarExcel(jp);
            }


        } catch (JRException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }


    }

    public void createReporteSalarioImpactoCertRV() {
        query = new StringBuilder();

        Subquery = " SELECT ec.codigo as empCod, ec.descripcion as empD,  zon.codigo as zonCo, zon.desripcion as zonDes, obj.codigo as objCo, obj.descripcion as objDes, niv.codigo as nivC, niv.descripcion as nivDes, esp.codigo as espCod, esp.descripcion as espdes, sub.codigo as codeSub, sub.descripcion as subDe, uo.codigo as codeU, uo.descripcion as uoDesc, rec.codigo as coderec, rec.descripcion as descrec, rec.um, rec.grupoescala, SUM(cert.cantidad) as calc, rec.preciomn FROM Nivelespecifico uo INNER JOIN empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos obj ON uo.objetos__id = obj.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN certificacionrecrv cert ON uo.id = cert.nivelesp_id INNER JOIN recursos rec ON cert.recurso_id = rec.id WHERE rec.tipo = '2' AND  ";
        group = " GROUP BY ec.codigo, ec.descripcion,  zon.codigo, zon.desripcion, obj.codigo, obj.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, uo.codigo, uo.descripcion, rec.codigo, rec.descripcion, rec.um, rec.grupoescala, rec.preciomn ";

        if (comboObras.getValue() != null) {

            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 2;


        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQObr = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQZon = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 3;

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;
            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            niveles = 0;
            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;
            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 1;
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.fini >= '" + desdeDate.toString().trim() + "' AND cert.ffin <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());

        }

        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(timeRestrictCert);
            query.append(group);
        }

        if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(timeRestrictCert);
            query.append(group);
        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(timeRestrictCert);
            query.append(group);
        }
        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(timeRestrictCert);
            query.append(group);


        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(timeRestrictCert);
            query.append(group);


        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {

            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(timeRestrictCert);
            query.append(group);

        }

        if (subQObr != null && subQEmp != null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQEmp);
            query.append(timeRestrictCert);
            query.append(group);

        }

        if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null && subQEmp != null) {
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(subQEmp);
            query.append(timeRestrictCert);
            query.append(group);

        }

        try {
            impactoReportModelArrayList = new ArrayList<>();
            impactoReportModelArrayList = cfr.calcSalImpacto(query.toString().trim());
        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();
        }
        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("Title", "Cálculo Impacto Salario 15: " + intervalo);
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.createCalcSalarioImpacto(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(impactoReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.createCalcSalarioImpacto(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(impactoReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                exportarExcel(jp);
            }


        } catch (JRException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }


    }

    private void createReporteConveniosPlan() {

        query = new StringBuilder();
        qmateriales = new StringBuilder();
        qmano = new StringBuilder();

        Subquery = " SELECT ec.id, ec.codigo, ec.descripcion, brig.id, brig.codigo, brig.descripcion, grup.id, grup.codigo, grup.descripcion, cuad.id, cuad.codigo, cuad.descripcion FROM Unidadobra uo INNER JOIN Planificacion cert ON uo.id = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE ";
        Subquery1 = " SELECT brig.id, grup.id, cuad.id, zon.codigo, ob.codigo, niv.codigo, esp.codigo, sub.codigo, uo.codigo, uo.descripcion, cert.cantidad, uo.id, SUM(cert.costomaterial), SUM(cert.costoequipo), SUM(cert.costomano), cert.id FROM Unidadobra uo LEFT JOIN Planificacion cert ON uo.id = cert.unidadobraId LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE ";
        subqueryCostMano = " SELECT brig.id, grup.id, cuad.id, rec.codigo, zon.codigo, ob.codigo, niv.codigo, esp.codigo, sub.codigo, rec.descripcion, rec.um, rec.tipo, SUM(certuo.cantidad) FROM Unidadobra uo LEFT JOIN Planrecuo pln ON uo.id = pln.unidadobraId LEFT JOIN Certificacion cert ON uo.id = cert.unidadobraId INNER JOIN Certificacionrecuo certuo ON uo.id = certuo.unidadobraId AND cert.id = certuo.certificacionId INNER JOIN Recursos rec ON certuo.recursoId = rec.id AND  pln.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE rec.tipo = '2' OR rec.tipo = '3' AND ";


        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {
            partZonas = comboZonas.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            subQObj = " ";
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            subQNiv = " ";
        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            subQEsp = " ";
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");

            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            subQSub = " ";
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
            niveles = 1;
        }

        if (comboBrigada.getValue() != null) {
            partBrig = comboBrigada.getValue().split(" - ");
            subQBrig = " AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;
        }

        if (comboGrupo.getValue() != null) {
            partGrup = comboGrupo.getValue().split(" - ");
            subQGrup = " AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
        }

        if (comboCuadrilla.getValue() != null) {
            partCuad = comboCuadrilla.getValue().split(" - ");
            subQBrig = " AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.desde >= '" + desdeDate.toString().trim() + "' AND cert.hasta <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());

        }

        query.append(Subquery);
        qmano.append(Subquery1);
        qmateriales.append(subqueryCostMano);

        query.append(subQObr);
        qmano.append(subQObr);
        qmateriales.append(subQObr);

        if (subQZon != null) {
            query.append(subQZon);
            qmano.append(subQZon);
            qmateriales.append(subQZon);
        }
        if (subQObj != null) {
            query.append(subQObj);
            qmano.append(subQObj);
            qmateriales.append(subQObj);
        }
        if (subQNiv != null) {
            query.append(subQNiv);
            qmano.append(subQNiv);
            qmateriales.append(subQNiv);
        }

        if (subQEsp != null) {
            query.append(subQEsp);
            qmano.append(subQEsp);
            qmateriales.append(subQEsp);
        }

        if (subQSub != null) {
            query.append(subQSub);
            qmano.append(subQSub);
            qmateriales.append(subQSub);
        }

        if (subQEmp != null) {
            query.append(subQEmp);
            qmano.append(subQEmp);
            qmateriales.append(subQEmp);
        }

        if (subQBrig != null) {
            query.append(subQBrig);
            qmano.append(subQBrig);
            qmateriales.append(subQBrig);
        }

        if (subQGrup != null) {
            query.append(subQGrup);
            qmano.append(subQGrup);
            qmateriales.append(subQGrup);
        }

        if (subQCuad != null) {
            query.append(subQCuad);
            qmano.append(subQCuad);
            qmateriales.append(subQCuad);
        }

        query.append(timeRestrictCert);
        qmano.append(timeRestrictCert);
        qmano.append("GROUP BY brig.id, grup.id, cuad.id, zon.codigo, ob.codigo, niv.codigo, esp.codigo, sub.codigo, uo.codigo, uo.descripcion, cert.cantidad, uo.id, cert.id");
        qmateriales.append(timeRestrictCert);
        qmateriales.append(" GROUP BY cuad.id, rec.codigo, rec.descripcion, rec.um, rec.tipo ORDER BY rec.tipo ASC");


        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);
        double coefSalario = obra.getTarifaSalarialByTarifa().getAutEspecial();


        List<RecursosConvenioModel> datosRecursus = new ArrayList<>();
        try {
            conveniosReportModelArrayList = new ArrayList<>();
            conveniosReportModelArrayList = cfr.getDatosToPlanConveniosPlan(reportesController, query.toString().trim(), qmano.toString().trim(), qmateriales.toString().trim(), desdeDate.toString().trim(), hastaData.toString().trim(), obra.getCodigo() + " " + obra.getDescripion());

        } catch (Exception ex) {
            ex.printStackTrace();

            /*
            Alert alert = new Alert(Alert.AlertType.WARNING);
            VBox dialogPaneContent = new VBox();
            Label label = new Label(" Error: ");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();

             */
        }
        List<ConveniosReportModel> sortedList = conveniosReportModelArrayList.stream().sorted(Comparator.comparing(ConveniosReportModel::getCuadrilla)).collect(Collectors.toList());

        List<ConveniosGenericModel> datosGlobal = new ArrayList<>();
        List<List<ConveniosReportModel>> globalList = new ArrayList<>();
        for (ConveniosReportModel recursus : sortedList) {
            datosGlobal.add(new ConveniosGenericModel(recursus.getIdEmpresa(), recursus.getNameEmp(), recursus.getIdBrigada(), recursus.getBrigada(), recursus.getIdGrupo(), recursus.getGrupo(), recursus.getIdCuadrilla(), recursus.getCuadrilla()));

        }
        List<ConveniosGenericModel> unikList = datosGlobal.parallelStream().collect(Collectors.toSet()).stream().collect(Collectors.toList());
        List<ConveniosGenericModel> sortedList2 = unikList.stream().sorted(Comparator.comparing(ConveniosGenericModel::getCuadrilla)).collect(Collectors.toList());

        for (ConveniosGenericModel dato : sortedList2) {
            globalList.add(createList(dato, conveniosReportModelArrayList));
        }

        List<List<RecursosConvenioModel>> globalListRecursos = new ArrayList<>();
        List<ConveniosGenericModel> datos = new ArrayList<>();


        for (ConveniosGenericModel dato : datosGlobal.parallelStream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
            globalListRecursos.add(createListRecursos(dato, cfr.getListSortRecursosConvenioModelPlan(dato, desdeDate.toString().trim(), hastaData.toString().trim(), obra.getCodigo() + " " + obra.getDescripion())));
        }

        date = LocalDate.now();
        parametros = new HashMap<>();
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        if (checkFecha.isSelected()) {
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        } else {
            parametros.put("fecha", " ");
        }
        int templete = 0;
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");
        parametros.put("reportName", "Convenio de Salarios Plan: " + intervalo);
        String reportName = "Convenio de Salarios: " + intervalo;

        try {
            if (checkExp.isSelected() == false) {

                List<JasperPrint> jasperPrintList = new ArrayList<>();
                for (List<ConveniosReportModel> conveniosReportModel : globalList) {
                    DynamicReport dr = bdr.createConveniosReport(reportesController, niveles, reportName, coefSalario);
                    JRDataSource ds = new JRBeanCollectionDataSource(conveniosReportModel);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    jasperPrintList.add(jp);
                }

                for (List<RecursosConvenioModel> conveniosReportModel : globalListRecursos) {
                    DynamicReport dr = bdr.createFooterSubreportPlanCertRec(reportName);
                    JRDataSource ds = new JRBeanCollectionDataSource(conveniosReportModel);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    jasperPrintList.add(jp);
                }
                //JasperViewer.viewReport(jasperPrintList, false);
                FileChooser fileChooser = new FileChooser();
                fileChooser.setTitle("Salvar informe de convenios");
                FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("Convenios Plan (*.pdf)", "*.pdf");
                fileChooser.getExtensionFilters().add(extFilter);

                //Show save file dialog
                File file = fileChooser.showSaveDialog(null);

                if (file != null) {

                    try {
                        JRPdfExporter exporter = new JRPdfExporter();
                        exporter.setExporterInput(SimpleExporterInput.getInstance(jasperPrintList)); //Set as export input my list with JasperPrint s
                        exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(file.getAbsolutePath())); //or any other out stream
                        SimplePdfExporterConfiguration configuration = new SimplePdfExporterConfiguration();
                        exporter.setConfiguration(configuration);
                        exporter.exportReport();


                        try {
                            if (Desktop.isDesktopSupported()) {
                                Desktop.getDesktop().open(file);
                            } else {
                                Alert alert = new Alert(Alert.AlertType.WARNING);
                                alert.setHeaderText("Información");
                                alert.setContentText("Es imposible abrir la vista de impresión para el reporte del convenio, para solucionar este inconveniente su reporte ha sido guardado en: " + file.getAbsolutePath());
                                alert.showAndWait();
                            }

                        } catch (IOException e) {

                        }
                    } catch (JRException ex) {
                        ex.printStackTrace();
                    }
                }


            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.createConveniosReport(reportesController, niveles, " ", 90.0);
                JRDataSource ds = new JRBeanCollectionDataSource(conveniosReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                exportarExcel(jp);
            }

        } catch (JRException e) {
            e.printStackTrace();
        }
    }

    StringBuilder datoCertif;

    private void createReportcertificaUORV() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        niveles = 0;
        String certRVBuilderRV = null;
        String certRVBuilderMat = null;

        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            niveles = 1;

        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 3;
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;

            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;

            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }

        if (comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {
            subQBrig = " ";
            niveles = 7;
        } else if (comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
            partBrig = comboBrigada.getValue().split(" - ");
            subQBrig = " AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;
            niveles = 7;
        }

        if (comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todos")) {
            subQGrup = " ";
            niveles = 8;
        } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todos")) {
            partGrup = comboGrupo.getValue().split(" - ");

            subQGrup = " AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
            niveles = 8;
        }

        if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
            subQCuad = " ";
            niveles = 9;
        } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
            partCuad = comboCuadrilla.getValue().split(" - ");

            subQCuad = " AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
            niveles = 9;
        }

        if (niveles <= 6) {

            Subquery = "SELECT  ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(ur.cantRv * cert.cantidad / uo.cantidad ) as plCantSu, SUM(cert.costmaterial) as cmater, SUM(cert.costmano) as cmano, SUM(cert.costequipo) as ccequ, rv.codigo,  rv.descripcion, rv.um, rv.costomat, rv.costmano, rv.costequip, rv.id  FROM Unidadobra uo INNER JOIN Unidadobrarenglon ur ON ur.unidadobraId = uo.id INNER JOIN Certificacion cert ON ur.unidadobraId  = cert.unidadobraId INNER JOIN Renglonvariante rv ON ur.renglonvarianteId = rv.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(bajo.cantidad * cert.cantidad/ uo.cantidad) as plCant, SUM(cert.costmano) as cost, bajo.tipo, bajo.idSuministro FROM Unidadobra uo INNER JOIN Bajoespecificacion bajo ON bajo.unidadobraId = uo.id INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN  Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id AND";
            qmateriales.append(Subquery1);


            query.append(subQObr);
            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            qmateriales.append(subQObr);
            if (subQZon == null || subQZon.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                qmateriales.append(subQEmp);
            }

            certRVBuilderRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, rv.codigo,  rv.descripcion, rv.um, rv.costomat, rv.costmano, rv.costequip, rv.id";
            certRVBuilderMat = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, bajo.tipo, bajo.idSuministro";


        } else if (niveles == 7) {
            Subquery = "SELECT  ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(ur.cantRv * cert.cantidad / uo.cantidad ) as plCantSu, SUM(cert.costmaterial) as cmater, SUM(cert.costmano) as cmano, SUM(cert.costequipo) as ccequ, rv.codigo, rv.descripcion, rv.um, brig.codigo, brig.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id FROM Unidadobra uo INNER JOIN Unidadobrarenglon ur ON ur.unidadobraId = uo.id INNER JOIN Certificacion cert ON ur.unidadobraId  = cert.unidadobraId INNER JOIN Renglonvariante rv ON ur.renglonvarianteId = rv.id INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(bajo.cantidad * cert.cantidad/ uo.cantidad) as plCant, SUM(cert.costmano) as cost, brig.codigo, brig.descripcion, bajo.tipo, bajo.idSuministro FROM Unidadobra uo INNER JOIN Bajoespecificacion bajo ON bajo.unidadobraId = uo.id INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id AND";
            qmateriales.append(Subquery1);

            query.append(subQObr);
            qmateriales.append(subQObr);


            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQBrig);
            }

            if (subQZon == null || subQZon.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                qmateriales.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQBrig);
            }

            certRVBuilderRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id";
            certRVBuilderMat = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, bajo.tipo, bajo.idSuministro,  brig.codigo, brig.descripcion";

        } else if (niveles == 8) {
            Subquery = "SELECT  ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(ur.cantRv * cert.cantidad / uo.cantidad ) as plCantSu, SUM(cert.costmaterial) as cmater, SUM(cert.costmano) as cmano, SUM(cert.costequipo) as ccequ, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id FROM Unidadobra uo INNER JOIN Unidadobrarenglon ur ON ur.unidadobraId = uo.id INNER JOIN Certificacion cert ON ur.unidadobraId  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id  INNER JOIN Renglonvariante rv ON ur.renglonvarianteId = rv.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = " SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(bajo.cantidad * cert.cantidad/ uo.cantidad) as plCant, SUM(cert.costmano) as cost, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, bajo.tipo, bajo.idSuministro FROM Unidadobra uo INNER JOIN Bajoespecificacion bajo ON bajo.unidadobraId = uo.id INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id  INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id AND";
            qmateriales.append(Subquery1);

            query.append(subQObr);
            qmateriales.append(subQObr);


            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQBrig);
            }

            if (subQGrup == null || subQGrup.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQGrup);
            }

            if (subQZon == null || subQZon.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                qmateriales.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQBrig);
            }

            if (subQGrup == null || subQGrup.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQGrup);
            }

            certRVBuilderRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, rv.codigo,  rv.descripcion, rv.um ,brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id";
            certRVBuilderMat = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, bajo.tipo, bajo.idSuministro, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion";


        } else if (niveles == 9) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(ur.cantRv * cert.cantidad / uo.cantidad ) as plCantSu, SUM(cert.costmaterial) as cmater, SUM(cert.costmano) as cmano, SUM(cert.costequipo) as ccequ, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id FROM Unidadobra uo INNER JOIN Unidadobrarenglon ur ON ur.unidadobraId = uo.id INNER JOIN Certificacion cert ON ur.unidadobraId  = cert.unidadobraId INNER JOIN Renglonvariante rv ON ur.renglonvarianteId = rv.id INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = " SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(bajo.cantidad * cert.cantidad/ uo.cantidad) as plCant, SUM(cert.costmano) as cost, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, bajo.tipo, bajo.idSuministro FROM Unidadobra uo INNER JOIN Bajoespecificacion bajo ON bajo.unidadobraId = uo.id INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id AND";
            qmateriales.append(Subquery1);

            query.append(subQObr);
            qmateriales.append(subQObr);


            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQBrig);
            }

            if (subQGrup == null || subQGrup.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQGrup);
            }

            if (subQCuad == null || subQCuad.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQCuad);
            }

            if (subQZon == null || subQZon.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                qmateriales.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQBrig);
            }

            if (subQGrup == null || subQGrup.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQGrup);
            }

            if (subQCuad == null || subQCuad.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQCuad);
            }

            certRVBuilderRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id";
            certRVBuilderMat = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, bajo.tipo, bajo.idSuministro, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion";

        }


        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            String timeRestrict = " AND cert.desde >= '" + desdeDate.toString().trim() + "' AND cert.hasta <= '" + hastaData.toString().trim() + "'";
            query.append(timeRestrict);
            qmateriales.append(timeRestrict);
            query.append(certRVBuilderRV);
            qmateriales.append(certRVBuilderMat);

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }

        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());

        if (othersOptions.getValue() != null && othersOptions.getValue().equals("Inversionista")) {

            parametros.put("inver", "Cliente: " + obra.getInversionistaByInversionistaId().getCodigo() + " " + obra.getInversionistaByInversionistaId().getDescripcion());
        } else {
            parametros.put("inver", " ");
        }

        if (checkFecha.isSelected()) {
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        } else {
            parametros.put("fecha", " ");
        }
        int templete = 0;
        if (comboConfecionado.getValue() == null) {
            templete = 1;
            parametros.put("reportName", "Certificación período: " + intervalo);
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");

        } else if (comboConfecionado.getValue() != null) {
            templete = 2;
            String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            parametros.put("empresa", empresa.getNombre());
            parametros.put("reportName", "Certificación período: " + intervalo);
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");
            parametros.put("conf", "Confeccionado: " + confe);
            parametros.put("rev", "Revisado: " + rev);
            parametros.put("aprub", "Aprobado: " + apro);
        }

        table = false;
        if (checkTable.isSelected() == false) {
            table = true;
        }


        datosCertificacionOrigenUORVArrayList = new ArrayList<>();
        try {
            datosCertificacionOrigenUORVArrayList = cfr.getDatosCertificacionOrigenUOinRVArrayList(reportesController, query.toString().trim(), qmateriales.toString().trim(), niveles, obra.getId());

        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();
        }


        if (datosCertificacionOrigenUORVArrayList.size() != 0) {

            certificacionOrigenUOinRVArrayList = new ArrayList<>();
            certificacionOrigenUOinRVArrayList = cfr.createReportesCOUORVFormater(reportesController, datosCertificacionOrigenUORVArrayList, obra);

            indication.setText(" ");
            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            if (niveles <= 6) {
                certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
            } else if (niveles == 7) {
                certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getBrigada).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
            } else if (niveles == 8) {
                certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getBrigada).thenComparing(CertificacionOrigenUOinRV::getGrupo).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
            } else if (niveles == 9) {
                certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getBrigada).thenComparing(CertificacionOrigenUOinRV::getGrupo).thenComparing(CertificacionOrigenUOinRV::getCuadrilla).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
            }
            List<ConceptosReporte> reportFormaters = new ArrayList<>();
            for (CertificacionOrigenUOinRV totalReportFormater : certificacionOrigenUOinRVArrayList) {
                reportFormaters.addAll(totalReportFormater.getBodyConceptos());
            }
            List<ResumenCostosList> resumenList = new ArrayList<>();
            resumenList = getResmenListReport(obra, reportFormaters);
            parametros.put("resumen", resumenList);

            try {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createCertificacionOrigenUORV(reportesController, niveles, templete, table);
                    JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOinRVArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createCertificacionOrigenUORV(reportesController, niveles, templete, table);
                    JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOinRVArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    exportarExcel(jp);
                }

            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (JRException e) {
                e.printStackTrace();
            }
        } else {

            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("No exiten certificaciones en esta ObraPCW");
            alert.showAndWait();
        }
    }

    public void createReporteConvenios() {

        query = new StringBuilder();
        qmateriales = new StringBuilder();
        qmano = new StringBuilder();
        datoCertif = new StringBuilder();
        queriGeneral = new StringBuilder();


        String SubQCert = "SELECT ec.id, ec.codigo, ec.descripcion, brig.id, brig.codigo, brig.descripcion, grup.id, grup.codigo, grup.descripcion, cuad.id, cuad.codigo, cuad.descripcion FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE ";
        Subquery = " SELECT ec.id, ec.codigo, ec.descripcion, brig.id, brig.codigo, brig.descripcion, grup.id, grup.codigo, grup.descripcion, cuad.id, cuad.codigo, cuad.descripcion FROM Unidadobra uo INNER JOIN Planificacion cert ON uo.id = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE ";
        String generales = " SELECT ec.id, ec.codigo, ec.descripcion, brig.id, brig.codigo, brig.descripcion, grup.id, grup.codigo, grup.descripcion, cuad.id, cuad.codigo, cuad.descripcion FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE ";
        Subquery1 = " SELECT brig.id, grup.id, cuad.id, zon.codigo, ob.codigo, niv.codigo, esp.codigo, sub.codigo, uo.codigo, uo.descripcion, cert.cantidad, uo.id, SUM(cert.costomaterial), SUM(cert.costoequipo), SUM(cert.costomano), cert.id FROM Unidadobra uo INNER JOIN Planificacion cert ON uo.id = cert.unidadobraId  LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE ";
        String SubQ = " SELECT brig.id, grup.id, cuad.id, zon.codigo, ob.codigo, niv.codigo, esp.codigo, sub.codigo, uo.codigo, uo.descripcion, cert.cantidad, uo.id, SUM(cert.costmaterial), SUM(cert.costmano), SUM(cert.costequipo), cert.id FROM Unidadobra uo LEFT JOIN Certificacion cert ON uo.id = cert.unidadobraId LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE ";
        subqueryCostMano = " SELECT brig.id, grup.id, cuad.id, rec.codigo, zon.codigo, ob.codigo, niv.codigo, esp.codigo, sub.codigo, rec.descripcion, rec.um, rec.tipo, SUM(certuo.cantidad) FROM Unidadobra uo LEFT JOIN Planrecuo pln ON uo.id = pln.unidadobraId LEFT JOIN Certificacion cert ON uo.id = cert.unidadobraId INNER JOIN Certificacionrecuo certuo ON uo.id = certuo.unidadobraId AND cert.id = certuo.certificacionId INNER JOIN Recursos rec ON certuo.recursoId = rec.id AND  pln.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE rec.tipo = '2' OR rec.tipo = '3' AND ";

        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {
            partZonas = comboZonas.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            subQObj = " ";
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            subQNiv = " ";
        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            subQEsp = " ";
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());


        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            subQSub = " ";
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;


        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());

            niveles = 1;
        }

        if (comboBrigada.getValue() != null) {
            partBrig = comboBrigada.getValue().split(" - ");
            subQBrig = " AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;
        }

        if (comboGrupo.getValue() != null && !comboGrupo.getValue().equals("Todos")) {
            partGrup = comboGrupo.getValue().split(" - ");
            subQGrup = " AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
        } else if (comboGrupo.getValue() != null && comboGrupo.getValue().equals("Todos")) {
            subQGrup = " ";
        }

        if (comboCuadrilla.getValue() != null && !comboGrupo.getValue().equals("Todas")) {
            partCuad = comboCuadrilla.getValue().split(" - ");
            subQCuad = " AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
        } else if (comboCuadrilla.getValue() != null && comboGrupo.getValue().equals("Todas")) {
            subQCuad = " ";
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.desde >= '" + desdeDate.toString().trim() + "' AND cert.hasta <= '" + hastaData.toString().trim() + "'";
            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }

        query.append(Subquery);
        qmano.append(Subquery1);
        qmateriales.append(SubQ);
        datoCertif.append(SubQCert);
        queriGeneral.append(generales);

        query.append(subQObr);
        qmano.append(subQObr);
        qmateriales.append(subQObr);
        datoCertif.append(subQObr);
        queriGeneral.append(subQObr);

        if (subQZon != null) {
            query.append(subQZon);
            qmano.append(subQZon);
            qmateriales.append(subQZon);
            datoCertif.append(subQZon);
            queriGeneral.append(subQZon);
        }
        if (subQObj != null) {
            query.append(subQObj);
            qmano.append(subQObj);
            qmateriales.append(subQObj);
            datoCertif.append(subQObj);
            queriGeneral.append(subQObj);
        }
        if (subQNiv != null) {
            query.append(subQNiv);
            qmano.append(subQNiv);
            qmateriales.append(subQNiv);
            datoCertif.append(subQNiv);
            queriGeneral.append(subQNiv);
        }

        if (subQEsp != null) {
            query.append(subQEsp);
            qmano.append(subQEsp);
            qmateriales.append(subQEsp);
            datoCertif.append(subQEsp);
            queriGeneral.append(subQEsp);
        }

        if (subQSub != null) {
            query.append(subQSub);
            qmano.append(subQSub);
            qmateriales.append(subQSub);
            datoCertif.append(subQSub);
            queriGeneral.append(subQSub);
        }

        if (subQEmp != null) {
            query.append(subQEmp);
            qmano.append(subQEmp);
            qmateriales.append(subQEmp);
            datoCertif.append(subQEmp);
            queriGeneral.append(subQEmp);
        }

        if (subQBrig != null) {
            query.append(subQBrig);
            qmano.append(subQBrig);
            qmateriales.append(subQBrig);
            datoCertif.append(subQBrig);
            queriGeneral.append(subQBrig);
        }

        if (subQGrup != null) {
            query.append(subQGrup);
            qmano.append(subQGrup);
            qmateriales.append(subQGrup);
            datoCertif.append(subQGrup);
            queriGeneral.append(subQGrup);
        }

        if (subQCuad != null) {
            query.append(subQCuad);
            qmano.append(subQCuad);
            qmateriales.append(subQCuad);
            datoCertif.append(subQCuad);
            queriGeneral.append(subQCuad);
        }

        query.append(timeRestrictCert);
        qmano.append(timeRestrictCert);
        qmano.append("GROUP BY brig.id, grup.id, cuad.id, zon.codigo, ob.codigo, niv.codigo, esp.codigo, sub.codigo, uo.codigo, uo.descripcion, uo.id, cert.id, cert.cantidad ");
        qmateriales.append(timeRestrictCert);
        queriGeneral.append(timeRestrictCert);
        qmateriales.append(" GROUP BY brig.id, grup.id, cuad.id, zon.codigo, ob.codigo, niv.codigo, esp.codigo, sub.codigo, uo.codigo, uo.descripcion, uo.id, cert.id, cert.cantidad");
        datoCertif.append(timeRestrictCert);
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);
        double coefSalario = obra.getTarifaSalarialByTarifa().getAutEspecial();
        query.append(" ORDER BY cuad.codigo ASC ");
        datoCertif.append(" ORDER BY cuad.codigo ASC ");
        queriGeneral.append(" ORDER BY cuad.codigo ASC ");


        List<RecursosConvenioModel> datosRecursus = new ArrayList<>();
        try {
            conveniosReportModelArrayList = new ArrayList<>();
            conveniosReportModelArrayList = cfr.getDatosToConvenios(reportesController, query.toString().trim(), qmano.toString().trim(), qmateriales.toString().trim(), desdeDate.toString().trim(), hastaData.toString().trim(), obra.getCodigo() + " " + obra.getDescripion(), datoCertif.toString().trim());

            datosRecursus = cfr.getRecurcursosConvenios(queriGeneral.toString().trim(), desdeDate.toString().trim(), hastaData.toString().trim(), obra);

        } catch (Exception ex) {
            ex.printStackTrace();

            Alert alert = new Alert(Alert.AlertType.WARNING);
            VBox dialogPaneContent = new VBox();
            Label label = new Label(" Error: ");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();
        }
        List<ConveniosGenericModel> datosGlobal = new ArrayList<>();
        List<List<ConveniosReportModel>> globalList = new ArrayList<>();
        for (ConveniosReportModel recursus : conveniosReportModelArrayList) {
            datosGlobal.add(new ConveniosGenericModel(recursus.getIdEmpresa(), recursus.getNameEmp(), recursus.getIdBrigada(), recursus.getBrigada(), recursus.getIdGrupo(), recursus.getGrupo(), recursus.getIdCuadrilla(), recursus.getCuadrilla()));
        }
        List<ConveniosGenericModel> sortedList = datosGlobal.stream().sorted(Comparator.comparing(ConveniosGenericModel::getCuadrilla)).collect(Collectors.toList());
        for (ConveniosGenericModel dato : sortedList) {
            globalList.add(createList(dato, conveniosReportModelArrayList));
        }

        List<List<RecursosConvenioModel>> globalListRecursos = new ArrayList<>();
        List<ConveniosGenericModel> datos = new ArrayList<>();
        for (RecursosConvenioModel recursus : datosRecursus) {
            datos.add(new ConveniosGenericModel(1, recursus.getEmpresa(), recursus.getIdBrigada(), recursus.getBrigada(), recursus.getIdGrupo(), recursus.getGrupo(), recursus.getIdCuadrilla(), recursus.getCuadrilla()));
        }

        List<ConveniosGenericModel> unickList = datos.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList());
        List<ConveniosGenericModel> sortedListFinal = unickList.stream().sorted(Comparator.comparing(ConveniosGenericModel::getCuadrilla)).collect(Collectors.toList());
        for (ConveniosGenericModel dato : sortedListFinal) {
            globalListRecursos.add(createListRecursos(dato, datosRecursus));
        }

        date = LocalDate.now();
        parametros = new HashMap<>();
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        if (checkFecha.isSelected()) {
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        } else {
            parametros.put("fecha", " ");
        }
        int templete = 0;
        templete = 1;
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");
        parametros.put("reportName", "Convenio de Salarios: " + intervalo);
        String reportName = "Convenio de Salarios: " + intervalo;

        tarea = createTime(50);
        stage = new ProgressDialog(tarea);
        stage.setContentText("Preparando el reporte...");
        stage.setTitle("Espere...");
        new Thread(tarea).start();
        stage.showAndWait();

        try {
            if (checkExp.isSelected() == false) {

                List<JasperPrint> jasperPrintList = new ArrayList<>();
                for (List<ConveniosReportModel> conveniosReportModel : globalList) {
                    DynamicReport dr = bdr.createConveniosReport(reportesController, niveles, reportName, coefSalario);
                    JRDataSource ds = new JRBeanCollectionDataSource(conveniosReportModel);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    jasperPrintList.add(jp);
                }

                for (List<RecursosConvenioModel> conveniosReportModel : globalListRecursos) {
                    DynamicReport dr = bdr.createFooterSubreportPlanCertRec(reportName);
                    JRDataSource ds = new JRBeanCollectionDataSource(conveniosReportModel);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    jasperPrintList.add(jp);
                }

                //JasperViewer.viewReport(jasperPrintList, false);
                FileChooser fileChooser = new FileChooser();
                fileChooser.setTitle("Salvar informe de convenios");
                FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("Convenios (*.pdf)", "*.pdf");
                fileChooser.getExtensionFilters().add(extFilter);

                //Show save file dialog
                File file = fileChooser.showSaveDialog(null);

                if (file != null) {

                    try {
                        JRPdfExporter exporter = new JRPdfExporter();
                        exporter.setExporterInput(SimpleExporterInput.getInstance(jasperPrintList)); //Set as export input my list with JasperPrint s
                        exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(file.getAbsolutePath())); //or any other out stream
                        SimplePdfExporterConfiguration configuration = new SimplePdfExporterConfiguration();
                        exporter.setConfiguration(configuration);
                        exporter.exportReport();


                        try {
                            if (Desktop.isDesktopSupported()) {
                                Desktop.getDesktop().open(file);
                            } else {
                                Alert alert = new Alert(Alert.AlertType.WARNING);
                                alert.setHeaderText("Información");
                                alert.setContentText("Es imposible abrir la vista de impresión para el reporte del convenio, para solucionar este inconveniente su reporte ha sido guardado en: " + file.getAbsolutePath());
                                alert.showAndWait();
                            }
                        } catch (IOException e) {
                        }
                    } catch (JRException ex) {
                        ex.printStackTrace();
                    }
                }


            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.createConveniosReport(reportesController, niveles, " ", 90.0);
                JRDataSource ds = new JRBeanCollectionDataSource(conveniosReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                stage.close();
                exportarExcel(jp);
            }

        } catch (JRException e) {
            e.printStackTrace();
        }

    }

    private List<RecursosConvenioModel> createListRecursos(ConveniosGenericModel
                                                                   model, List<RecursosConvenioModel> recursus) {
        List<RecursosConvenioModel> temp = recursus.parallelStream().filter(item -> item.getIdBrigada() == model.getIdBrig() && item.getIdGrupo() == model.getIdGrup() && item.getIdCuadrilla() == model.getIdCuad()).collect(Collectors.toList());
        temp.sort(Comparator.comparing(RecursosConvenioModel::getTipo));
        return temp;
    }

    public void createReportToCertifUOGeneral() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        queryRecursos = new StringBuilder();
        qRecursos = null;
        niveles = 0;
        groupRcRV = null;

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND ctr.desde >= '" + desdeDate.toString().trim() + "' AND ctr.hasta <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }

        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id WHERE ";
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = null;
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id  INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id WHERE ";
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id  WHERE ";
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobra__id INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id WHERE ";
            qRecursos = null;
        }
        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
        }

        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            select = "SELECT ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo";

            niveles = 1;
        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                partZonas = comboZonas.getValue().split(" - ");
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ";

            niveles = 2;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {

                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            }

            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            niveles = 3;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }

            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.codigo, rec.descripcion, rec.um, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion,  niv.codigo, niv.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
            niveles = 4;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            }


            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            }

            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion  ";
            niveles = 5;
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, ";

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");
            partSub = comboSubespecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }
            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }
            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEsp = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
            }
            if (comboSubespecialidades.getValue().equals("Todas")) {
                subQSub = " ";
                subQSubM = " ";
            } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
                subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
            }
            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, sub.codigo as codeSub, sub.descripcion as subdesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
            niveles = 6;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT esp.codigo, esp.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion  ";

            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        query.append(subQEsp);
                    }
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(subQEspM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        queryRecursos.append(subQEsp);
                    }
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 15;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT esp.codigo as codEs, esp.descripcion as desEs, zon.codigo, zon.desripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion ";

            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    query.append(subQZon);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQZon);
                    query.append(subQEsp);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo as espCo, esp.descripcion as espDe, zon.codigo as zonC, zon.desripcion as zonD, ob.codigo, ob.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, ob.codigo, ob.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEsp);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo as esC, esp.descripcion as esDes, sub.codigo, sub.descripcion,";
            group = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null)

                if (qRecursos != null) {
                    if (subQEmp != null) {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        }
                        if (comboSubespecialidades.getValue().equals("Todas")) {
                            subQSub = " ";
                        } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                            partSub = comboSubespecialidades.getValue().split(" - ");
                            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        }
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(subQSub);
                        queryRecursos.append(subQEmp);
                        queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                    } else {
                        queryRecursos.append(select);
                        queryRecursos.append(qRecursos);
                        queryRecursos.append(subQObr);
                        if (comboEspecialidades.getValue().equals("Todas")) {
                            subQEsp = " ";
                        } else {
                            partEsp = comboEspecialidades.getValue().split(" - ");
                            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                            ;

                        }
                        if (comboSubespecialidades.getValue().equals("Todas")) {
                            subQSub = " ";
                        } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                            partSub = comboSubespecialidades.getValue().split(" - ");
                            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                            ;
                            ;
                        }
                        queryRecursos.append(subQEsp);
                        queryRecursos.append(subQSub);
                        queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                    }
                }

            niveles = 156;
        }

        if (comboObjetos.getValue() == null && comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() == null && comboCuadrilla.getValue() == null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
                subQBrigM = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                int idBrig = reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue().trim());
                subQBrig = " AND ctr.brigadaconstruccionId = " + idBrig;
                subQBrigM = " AND ctr.brigadaconstruccion__id = " + idBrig;
            }

            select = "SELECT ec.id, ec.codigo as ecCode, ec.descripcion as ecDes, br.codigo, br.descripcion,";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion ";
            groupRcRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion ";
            niveles = 7;
        } else if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() != null && comboCuadrilla.getValue() == null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
                subQBrigM = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND ctr.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                subQBrigM = " AND ctr.brigadaconstruccion__id = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            }

            partGrup = comboGrupo.getValue().split(" - ");
            if (comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " ";
                subQGrupM = " ";
            } else if (!comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " AND ctr.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                subQGrupM = " AND ctr.grupoconstruccion__id = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            }

            select = "SELECT ec.id, ec.codigo as ecCode, ec.descripcion as ecDes, br.codigo as codB, br.descripcion as desB, gr.codigo, gr.descripcion, ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";
            groupRcRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";
            niveles = 8;

        } else if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() != null && comboCuadrilla.getValue() != null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
                subQBrigM = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND ctr.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                subQBrigM = " AND ctr.brigadaconstruccion__id = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            }

            partGrup = comboGrupo.getValue().split(" - ");
            if (comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " ";
                subQGrupM = " ";
            } else if (!comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " AND ctr.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                subQGrupM = " AND ctr.grupoconstruccion__id = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            }

            if (comboCuadrilla.getValue().contentEquals("Todas")) {
                subQCuad = " ";
                subQCuadM = " ";
            } else if (!comboCuadrilla.getValue().contentEquals("Todas")) {
                subQCuad = " AND ctr.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
                subQCuadM = " AND ctr.cuadrillaconstruccion__id = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            }
            select = "SELECT ec.id, ec.codigo as ecCode, ec.descripcion as ecDes, br.codigo as codB, br.descripcion as desB, gr.codigo as grCode, gr.descripcion as grDes, cuad.codigo, cuad.descripcion, ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";
            groupRcRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";
            niveles = 9;

        }

        if (Subquery != null) {
            query.append(select);
            query.append(Subquery);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQNiv);
            query.append(subQEsp);
            query.append(subQSub);
            query.append(subQEmp);
            query.append(subQBrig);
            query.append(subQGrup);
            query.append(subQCuad);
            query.append(timeRestrictCert);
            query.append(group);
        }
        if (Subquery1 != null) {
            qmateriales.append(select);
            qmateriales.append(Subquery1);
            qmateriales.append(subQObrM);
            qmateriales.append(subQZonM);
            qmateriales.append(subQObjM);
            qmateriales.append(subQNivM);
            qmateriales.append(subQEspM);
            qmateriales.append(subQSubM);
            qmateriales.append(subQEmpM);
            qmateriales.append(subQBrigM);
            qmateriales.append(subQGrupM);
            qmateriales.append(subQCuadM);
            qmateriales.append(timeRestrictCert);
            qmateriales.append(groupM);

        }
        if (qRecursos != null) {
            queryRecursos.append(select);
            queryRecursos.append(qRecursos);
            queryRecursos.append(subQObr);
            queryRecursos.append(subQZon);
            queryRecursos.append(subQObj);
            queryRecursos.append(subQNiv);
            queryRecursos.append(subQEsp);
            queryRecursos.append(subQSub);
            queryRecursos.append(subQEmp);
            queryRecursos.append(subQBrig);
            queryRecursos.append(subQGrup);
            queryRecursos.append(subQCuad);
            queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");

        }


        ArrayList<DatosCuantitativaGenreralModelCertificacion> temp = new ArrayList<>();
        ArrayList<DatosCuantitativaGenreralModelCertificacion> dataToFilter = new ArrayList<>();
        parametros = new HashMap<>();
        Empresaconstructora empresaconstructora = new Empresaconstructora();
        if (comboEmpresas.getValue() == null) {
            parametros.put("empName", " ");
        } else if (comboEmpresas.getValue() != null) {
            int id = reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            empresaconstructora = reportProjectStructureSingelton.getEmpresaconstructora(id);
            parametros.put("empName", "Empresa: " + empresaconstructora.getCodigo() + " - " + empresaconstructora.getDescripcion());
        }
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);

        System.out.println(niveles);
        System.out.printf(qmateriales.toString().trim() + "\n");
        System.out.printf(query.toString().trim());


        try {
            ArrayList<DatosCuantitativaGenreralModelCertificacion> tempNoMat = new ArrayList<>();
            tempNoMat = cfr.getRecursosGeneralCertiFicacion(reportesController, query.toString().trim(), niveles, empresaconstructora, obra, queryRecursos.toString().trim());
            dataToFilter.addAll(tempNoMat);

            temp.addAll(dataToFilter);
            ifDesglose = false;
            if (checkDesglose.isSelected()) {
                ifDesglose = true;
            }
            if (Subquery1 != null) {
                ArrayList<DatosCuantitativaGenreralModelCertificacion> tempMat = new ArrayList<>();
                tempMat = cfr.getRecursosGeneralMaterialesCertificaion(reportesController, qmateriales.toString().trim(), niveles, ifDesglose);
                temp.addAll(tempMat);
            }
            date = LocalDate.now();
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("reportName", "Recursos Certificados periodo: " + intervalo);
            parametros.put("image", "templete/logoReport.jpg");

            temp.size();
            List<DatosCuantitativaGenreralModelCertificacion> datosList = new ArrayList<>();
            datosList = temp.parallelStream().filter(i -> Collections.frequency(temp, i) > 1).collect(Collectors.toList());
            datosList.size();
            List<DatosCuantitativaGenreralModelCertificacion> uniqDatos = new ArrayList<>();
            for (DatosCuantitativaGenreralModelCertificacion datos : datosList.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
                double valCant = getCantSumCert(temp, datos);
                double valCosto = getCostSumCert(temp, datos);
                uniqDatos.add(new DatosCuantitativaGenreralModelCertificacion(datos.getEmpresa(), datos.getZona(), datos.getObjeto(), datos.getNivel(), datos.getEspecialidad(), datos.getSubespecialidad(), datos.getBrigada(), datos.getGrupo(), datos.getCuadrilla(), datos.getCodigo(), datos.getDescripcion(), datos.getUm(), datos.getTipo(), datos.getCpo(), datos.getCpe(), datos.getCet(), datos.getOtra(), valCant, datos.getPrecio(), datos.getPreciomlc(), Math.round(valCosto * 100d) / 100d));
            }

            temp.removeAll(datosList);
            temp.addAll(uniqDatos);
            uniqDatos.size();

            ArrayList<DatosCuantitativaGenreralModelCertificacion> endDatosCuantitativaGenreralModels = new ArrayList<>();
            endDatosCuantitativaGenreralModels.addAll(temp);


            endDatosCuantitativaGenreralModels.size();
            List<DatosCuantitativaGenreralForReportModelCertificacion> datosToReportList = cfr.createReportCuantitativaGeneralFormaterCertificacion(reportesController, endDatosCuantitativaGenreralModels, obra);
            datosToReportList.size();

            for (DatosCuantitativaGenreralForReportModelCertificacion datos : datosToReportList) {
                System.out.println(datos.getCostoTotal());
            }

            if (niveles <= 6) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getZona).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getNivel).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));

            } else if (niveles == 15) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            } else if (niveles == 125) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getZona).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            } else if (niveles == 1235) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getZona).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            } else if (niveles == 156) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            }

            datosToReportList.size();

            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            garbage = Runtime.getRuntime();

            if (checkAmbMonedas.isSelected() == true) {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);

                }

            } else {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);
                }
            }


        } catch (Exception ex) {
            ex.printStackTrace();

            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error: " + ReportesController.class.getName());

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();

        }
    }

    public void createReportToCertifUO() {
        query = new StringBuilder();
        niveles = 0;
        startWhere = null;
        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Certificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != 'RV' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Certificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo = '2' AND cert.tipo = '3' AND cert.tipo != 'RV' AND ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Certificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != '2' AND cert.tipo != 'RV' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Certificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != '3' AND cert.tipo != 'RV' AND  ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Certificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE  cert.tipo = '2' AND cert.tipo != 'RV' AND  ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Certificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo = '3' AND cert.tipo != 'RV' AND  ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Certificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo ='1' OR cert.tipo = 'J' OR cert.tipo = 'S'  AND  cert.tipo != 'RV' AND ";
        }
        if (comboObras.getValue() != null && comboZonas.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");
            // select = "SELECT ec.id, ec.codigo as empC, ec.descripcion as emp, ";
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";

            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = " uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY cert.tipo, uo.codigo ASC";

            niveles = 1;
        }

        if (comboObras != null && comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";
            niveles = 2;


        } else if (comboObras != null && comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;


            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 3;

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;


            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY  ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";
            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";
            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 1;
        }


        if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {

            selectB = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 7;

        } else if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
            partBrig = comboBrigada.getValue().split(" - ");

            selectB = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo  ASC";
            subQBrig = " AND uocert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;

            niveles = 7;
        }

        if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todas")) {

            selectG = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, gr.codigo, gr.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo  ASC";

            niveles = 8;
        } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todas")) {
            partGrup = comboGrupo.getValue().split(" - ");

            selectG = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, gr.codigo, gr.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo  ASC";
            subQGrup = " AND uocert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
            niveles = 8;
        }

        if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
            selectC = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo, br.codigo, gr.codigo, cuad.codigo  ASC";

            niveles = 9;
        } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
            partCuad = comboCuadrilla.getValue().split(" - ");
            selectC = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo  ASC";
            subQCuad = " AND uocert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
            niveles = 9;
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.fini >= '" + desdeDate.toString().trim() + "' AND cert.ffin <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }


        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }


        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQEmp != null && subQBrig == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup == null) {
            if (Subquery != null) {
                query.append(selectB);
                query.append(Subquery + " INNER JOIN Brigadaconstruccion br ON uocert.brigadaconstruccionId = br.id ");
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(timeRestrictCert);
                //  query.append(group);
                query.append(order);
            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup != null && subQCuad == null) {
            if (Subquery != null) {
                query.append(selectG);
                query.append(Subquery + " INNER JOIN Brigadaconstruccion br ON uocert.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr ON uocert.grupoconstruccionId = gr.id ");
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(subQGrup);
                query.append(timeRestrictCert);
                // query.append(group);
                query.append(order);
            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup != null && subQCuad != null) {
            if (Subquery != null) {
                query.append(selectC);
                query.append(Subquery + " INNER JOIN Brigadaconstruccion br ON uocert.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr ON uocert.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad ON uocert.cuadrillaconstruccionId = cuad.id ");
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(subQGrup);
                query.append(subQCuad);
                query.append(timeRestrictCert);
                //  query.append(group);
                query.append(order);
            }
        }


        ArrayList<DatosCuantitativaModelCert> tempNoMat = new ArrayList<DatosCuantitativaModelCert>();
        ArrayList<DatosCuantitativaModelCert> temp = new ArrayList<DatosCuantitativaModelCert>();

        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("titlereport", "Recursos Certificados periodo: " + intervalo);
        parametros.put("image", "templete/logoReport.jpg");
        try {

            System.out.println("Consulta: gggggg " + query.toString().trim());

            tempNoMat = cfr.getRecursosCertAndPlan(reportesController, query.toString().trim(), niveles, obra);
            temp.addAll(tempNoMat);

            if (temp.size() == 0) {

                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("No hay información que mostrar, revise sus datos");
                alert.showAndWait();

            } else if (temp.size() > 0) {
                cuantitativaModelToCERTArrayList = new ArrayList<>();
                cuantitativaModelToCERTArrayList = cfr.createReportCuantitativaCertFormater(reportesController, temp, obra);
                indication.setText(" ");
                tarea = createTime(50);
                stage = new ProgressDialog(tarea);
                stage.setContentText("Preparando el reporte...");
                stage.setTitle("Espere...");
                new Thread(tarea).start();
                stage.showAndWait();

                printReportCertyPlan(reportesController, cuantitativaModelToCERTArrayList, niveles, parametros);

            }

        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();
        }

    }

    public void createReportToCertifRV() {
        query = new StringBuilder();
        niveles = 0;
        startWhere = null;
        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN CertificacionRenglonVariante uocert ON uo.id = uocert.nivelespecificoId INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != 'RV' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN CertificacionRenglonVariante uocert ON uo.id = uocert.nivelespecificoId INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != '1'  AND cert.tipo != 'RV' AND  ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN CertificacionRenglonVariante uocert ON uo.id = uocert.nivelespecificoId INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != '2' AND cert.tipo != 'RV' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN CertificacionRenglonVariante uocert ON uo.id = uocert.nivelespecificoId INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != '3' AND cert.tipo != 'RV' AND  ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN CertificacionRenglonVariante uocert ON uo.id = uocert.nivelespecificoId INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE  cert.tipo = '2' AND cert.tipo != 'RV' AND  ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN CertificacionRenglonVariante uocert ON uo.id = uocert.nivelespecificoId INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo = '3' AND cert.tipo != 'RV' AND  ";
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo) FROM Nivelespecifico uo INNER JOIN CertificacionRenglonVariante uocert ON uo.id = uocert.nivelespecificoId INNER JOIN Certificacionrecrv cert ON uo.id = cert.nivelespId AND uocert.id = cert.certificacionId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != '2' AND cert.tipo != '3' AND cert.tipo != 'RV' AND ";
        }

        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, cert.tipo, cert.recursoId ";
            order = " ORDER BY cert.tipo ASC";

            niveles = 1;
        }

        if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null && comboBrigada.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            partZonas = comboZonas.getValue().split(" - ");

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, cert.tipo, cert.recursoId ";
            order = " ORDER BY  cert.tipo ASC";
            niveles = 2;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null && comboBrigada.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }

            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, cert.tipo, cert.recursoId ";
            order = " ORDER BY cert.tipo ASC";

            niveles = 3;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null && comboBrigada.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";

            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";

            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;

            }

            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";

            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;

            }

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, cert.tipo, cert.recursoId ";
            order = " ORDER BY cert.tipo ASC";
            niveles = 4;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null && comboBrigada.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;

            }

            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;

            }

            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;

            }

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, cert.tipo, cert.recursoId ";
            order = " ORDER BY cert.tipo ASC";

            niveles = 5;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null && comboBrigada.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");
            partSub = comboSubespecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";

            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;

            }

            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }

            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
            }

            if (comboSubespecialidades.getValue().equals("Todas")) {
                subQSub = " ";
            } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
            }

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId ";
            order = " ORDER BY cert.tipo ASC";

            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }

        if (comboObjetos.getValue() == null && comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() == null && comboCuadrilla.getValue() == null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND uocert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                ;
            }

            select = null;
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, br.codigo, br.descripcion, ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, cert.tipo, cert.recursoId";
            order = " ORDER BY br.codigo ASC";
            niveles = 7;

        } else if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() != null && comboCuadrilla.getValue() == null) {

            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND uocert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                ;
            }

            partGrup = comboGrupo.getValue().split(" - ");
            if (comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " ";
            } else if (!comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " AND uocert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                ;
            }

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, br.codigo as brCod, br.descripcion as brDesc, gr.codigo, gr.descripcion, ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cert.tipo, cert.recursoId";
            order = " ORDER BY br.codigo ASC";
            niveles = 8;
        } else if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() != null && comboCuadrilla.getValue() != null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND uocert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                ;
            }

            partGrup = comboGrupo.getValue().split(" - ");
            if (comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " ";
            } else if (!comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " AND uocert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                ;
            }

            partCuad = comboCuadrilla.getValue().split(" - ");
            if (comboCuadrilla.getValue().contentEquals("Todas")) {
                subQCuad = " ";
            } else if (!comboCuadrilla.getValue().contentEquals("Todas")) {
                subQCuad = " AND uocert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
                ;
            }
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, br.codigo as brCod, br.descripcion as brDesc, gr.codigo as grpCod, gr.descripcion as grpDes, cuad.codigo, cuad.descripcion, ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion, cert.tipo, cert.recursoId";
            order = " ORDER BY br.codigo ASC";
            niveles = 9;
        } else if (comboZonas.getValue() != null && comboObjetos.getValue() != null && comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() == null && comboCuadrilla.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            partZonas = comboZonas.getValue().split(" - ");
            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                ;
            }

            partObj = comboObjetos.getValue().split(" - ");
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                ;
            }

            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().equals("Todas")) {
                subQBrig = " ";
            } else if (!comboBrigada.getValue().equals("Todas")) {
                subQBrig = " AND uocert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                ;
            }

            select = null;
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, br.codigo, br.descripcion, ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, ob.codigo, br.codigo, br.descripcion, ob.descripcion, cert.tipo, cert.recursoId";
            order = " ORDER BY br.codigo ASC";
            niveles = 73;

            query.append(select);
            query.append(Subquery + " INNER JOIN Brigadaconstruccion br ON uocert.brigadaconstruccionId = br.id ");
            query.append(startWhere);
            query.append(subQObr);
            query.append(subQZon);
            query.append(subQObj);
            query.append(subQEmp);
            query.append(subQBrig);
            query.append(timeRestrictCert);
            query.append(group);
            query.append(order);
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.fini >= '" + desdeDate.toString().trim() + "' AND cert.ffin <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }


        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEsp == null && subQSub == null && subQBrig == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);

            }
        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null && subQEsp == null && subQSub == null && subQBrig == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && subQEsp == null && subQSub == null && subQBrig == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null && subQSub == null && subQBrig == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null && subQBrig == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null && subQBrig == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                if (subQEmp != null) {
                    query.append(subQEmp);
                }
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }


        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup == null && subQObj == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery + " INNER JOIN Brigadaconstruccion br ON uocert.brigadaconstruccionId = br.id ");
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup != null && subQCuad == null && subQObj == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery + " INNER JOIN Brigadaconstruccion br ON uocert.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr ON uocert.grupoconstruccionId = gr.id ");
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(subQGrup);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup != null && subQCuad != null && subQObj == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery + " INNER JOIN Brigadaconstruccion br ON uocert.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr ON uocert.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad ON uocert.cuadrillaconstruccionId = cuad.id ");
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(subQGrup);
                query.append(subQCuad);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }
        }

        ArrayList<DatosCuantitativaModelCert> tempNoMat = new ArrayList<DatosCuantitativaModelCert>();
        ArrayList<DatosCuantitativaModelCert> temp = new ArrayList<DatosCuantitativaModelCert>();


        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        try {
            if (Subquery != null) {
                tempNoMat = cfr.getRecursosCertAndPlanGENRAL(reportesController, query.toString().trim(), niveles, obra);
                tempNoMat.size();
                temp.clear();
                temp.addAll(tempNoMat);
            }

            parametros = new HashMap<>();
            Empresaconstructora empresaconstructora = new Empresaconstructora();
            if (comboEmpresas.getValue() == null) {
                parametros.put("empName", " ");
            } else if (comboEmpresas.getValue() != null) {
                int idE = reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
                empresaconstructora = reportProjectStructureSingelton.getEmpresaconstructora(idE);
                parametros.put("empName", "Empresa: " + empresaconstructora.getCodigo() + " - " + empresaconstructora.getDescripcion());
            }

            date = LocalDate.now();
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("titlereport", "Recursos Certificados periodo: " + intervalo);
            parametros.put("image", "templete/logoReport.jpg");

            if (temp.size() == 0) {

                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("No hay información que mostrar, revise sus datos");
                alert.showAndWait();

            } else if (temp.size() > 0) {

                cuantitativaModelToCERTArrayList = cfr.createReportCuantitativaCertFormater(reportesController, temp, obra);

                indication.setText(" ");
                tarea = createTime(50);
                stage = new ProgressDialog(tarea);
                stage.setContentText("Preparando el reporte...");
                stage.setTitle("Espere...");
                new Thread(tarea).start();
                stage.showAndWait();

                printReportCertyPlanGENRERAL(reportesController, cuantitativaModelToCERTArrayList, niveles);

            }

        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();
        }

    }

    public void createReportPlanUO() {
        query = new StringBuilder();
        startWhere = null;
        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Planificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Planrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.planId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != 'RV' AND ";
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Planificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Planrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.planId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != '1' OR cert.tipo != 'J' OR cert.tipo != 'S'  ";

        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Planificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Planrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.planId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != '2' AND cert.tipo != 'RV' AND ";

        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Planificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Planrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.planId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo != '3' AND cert.tipo != 'RV' AND  ";

        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Planificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Planrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.planId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE  cert.tipo = '2' AND cert.tipo != 'RV' AND  ";

        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Planificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Planrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.planId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo = '3' AND cert.tipo != 'RV' AND  ";

        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " cert.tipo, cert.recursoId, SUM(cert.cantidad), SUM(cert.costo), uo.codigo, uo.descripcion,  uo.um,  SUM(uocert.cantidad) FROM Unidadobra uo INNER JOIN Planificacion uocert ON uo.id = uocert.unidadobraId INNER JOIN Planrecuo cert ON uo.id = cert.unidadobraId AND uocert.id = cert.planId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id ";
            startWhere = " WHERE cert.tipo ='1' OR cert.tipo = 'J' OR cert.tipo = 'S'  AND  cert.tipo != 'RV' AND ";
        }

        if (comboObras.getValue() != null && comboZonas.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");
            select = "SELECT ec.id, ec.codigo as empC, ec.descripcion as emp, ";

            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = " uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY cert.tipo, uo.codigo ASC";

            niveles = 1;
        }

        if (comboObras != null && comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";
            niveles = 2;


        } else if (comboObras != null && comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;


            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 3;

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;


            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";
            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";
            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.tipo, cert.recursoId, uo.codigo, uo.descripcion,  uo.um ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);

            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;

            niveles = 1;
        }


        if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {

            selectB = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo ASC";

            niveles = 7;

        } else if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
            partBrig = comboBrigada.getValue().split(" - ");

            selectB = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo  ASC";
            subQBrig = " AND uocert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;

            niveles = 7;
        }

        if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todas")) {

            selectG = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, gr.codigo, gr.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo  ASC";

            niveles = 8;
        } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todas")) {
            partGrup = comboGrupo.getValue().split(" - ");

            selectG = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, gr.codigo, gr.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo  ASC";
            subQGrup = " AND uocert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
            niveles = 8;
        }

        if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
            selectC = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo, br.codigo, gr.codigo, cuad.codigo  ASC";

            niveles = 9;
        } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
            partCuad = comboCuadrilla.getValue().split(" - ");
            selectC = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion, ";
            // group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, rec.preciomlc, uo.codigo, uo.descripcion,  uo.um,  uocert.cantidad, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, cert.tipo, uo.codigo  ASC";
            subQCuad = " AND uocert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
            niveles = 9;
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.fini >= '" + desdeDate.toString().trim() + "' AND cert.ffin <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }


        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }


        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQEmp != null && subQBrig == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(timeRestrictCert);
                //   query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup == null) {
            if (Subquery != null) {
                query.append(selectB);
                query.append(Subquery + " INNER JOIN Brigadaconstruccion br ON uocert.brigadaconstruccionId = br.id ");
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(timeRestrictCert);
                //  query.append(group);
                query.append(order);
            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup != null && subQCuad == null) {
            if (Subquery != null) {
                query.append(selectG);
                query.append(Subquery + " INNER JOIN Brigadaconstruccion br ON uocert.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr ON uocert.grupoconstruccionId = gr.id ");
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(subQGrup);
                query.append(timeRestrictCert);
                // query.append(group);
                query.append(order);
            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup != null && subQCuad != null) {
            if (Subquery != null) {
                query.append(selectC);
                query.append(Subquery + " INNER JOIN Brigadaconstruccion br ON uocert.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr ON uocert.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad ON uocert.cuadrillaconstruccionId = cuad.id ");
                query.append(startWhere);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(subQGrup);
                query.append(subQCuad);
                query.append(timeRestrictCert);
                //  query.append(group);
                query.append(order);
            }
        }


        System.out.println("Consulta: " + query.toString().trim());
        ArrayList<DatosCuantitativaModelCert> tempNoMat = new ArrayList<DatosCuantitativaModelCert>();
        ArrayList<DatosCuantitativaModelCert> temp = new ArrayList<DatosCuantitativaModelCert>();

        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("titlereport", "Recursos Planificados periodo: " + intervalo);
        parametros.put("image", "templete/logoReport.jpg");

        try {
            if (Subquery != null) {
                tempNoMat = cfr.getRecursosCertAndPlan(reportesController, query.toString().trim(), niveles, obra);
                temp.clear();
                temp.addAll(tempNoMat);
            }


            ArrayList<DatosCuantitativaModelCert> datosCuantitativaModelCerts = new ArrayList<DatosCuantitativaModelCert>();

            if (temp.size() == 0) {

                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("No hay información que mostrar, revise sus datos");
                alert.showAndWait();

            } else if (temp.size() > 0) {

                datosCuantitativaModelCerts.addAll(temp);

                cuantitativaModelToCERTArrayList = cfr.createReportCuantitativaCertFormater(reportesController, datosCuantitativaModelCerts, obra);

                indication.setText(" ");
                tarea = createTime(50);
                stage = new ProgressDialog(tarea);
                stage.setContentText("Preparando el reporte...");
                stage.setTitle("Espere...");
                new Thread(tarea).start();
                stage.showAndWait();

                printReportCertyPlan(reportesController, cuantitativaModelToCERTArrayList, niveles, parametros);

            }

        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();
        }
    }


    public void createReportPlanUOGeneral() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        queryRecursos = new StringBuilder();
        qRecursos = null;
        niveles = 0;
        groupRcRV = null;
        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND ctr.desde >= '" + desdeDate.toString().trim() + "' AND ctr.hasta <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }

        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Planificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Planificacion ctr ON uo.id = ctr.unidadobra__id INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id WHERE ";
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Planificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo != '1' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Planificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Planificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND ";
            Subquery1 = null;
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = null;
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Planificacion ctr ON uo.id = ctr.unidadobra__id  INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id WHERE ";
            qRecursos = null;
        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Planificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '2' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Planificacion ctr ON uo.id = ctr.unidadobra__id INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id  WHERE ";
            qRecursos = null;
        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Planificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccionId = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccionId = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccionId = cuad.id INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id LEFT JOIN Coeficientesequipos eoe ON uo.obraId = eoe.obraId AND ec.id = eoe.empresaconstructoraId AND rec.id = eoe.recursosId WHERE rec.tipo = '3' AND ";
            Subquery1 = " SUM(bajo.cantidad * ctr.cantidad / uo.cantidad), bajo.id_suministro, bajo.tipo FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructora__id = ec.id INNER JOIN Zonas zon ON uo.zonas__id = zon.id INNER JOIN Objetos ob ON uo.objetos__id = ob.id INNER JOIN Nivel niv ON uo.nivel__id = niv.id INNER JOIN Especialidades esp ON uo.especialidades__id = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidades__id = sub.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobra_id INNER JOIN Planificacion ctr ON uo.id = ctr.unidadobra__id INNER JOIN Brigadaconstruccion br On ctr.brigadaconstruccion__id = br.id INNER JOIN Grupoconstruccion gr On ctr.grupoconstruccion__id = gr.id INNER JOIN Cuadrillaconstruccion cuad On ctr.cuadrillaconstruccion__id = cuad.id WHERE ";
            qRecursos = null;
        }
        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());

        }


        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            select = "SELECT ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo";

            niveles = 1;
        } else if (comboObras != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                partZonas = comboZonas.getValue().split(" - ");
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ";

            niveles = 2;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {

                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            }

            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            niveles = 3;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }

            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());

            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.codigo, rec.descripcion, rec.um, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion,  niv.codigo, niv.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, ";
            niveles = 4;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());


            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            }


            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            }

            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEspM = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            }

            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion  ";
            niveles = 5;
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, ";

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;

            partObras = comboObras.getValue().split(" - ");
            partZonas = comboZonas.getValue().split(" - ");
            partObj = comboObjetos.getValue().split(" - ");
            partNiv = comboNivel.getValue().split(" - ");
            partEsp = comboEspecialidades.getValue().split(" - ");
            partSub = comboSubespecialidades.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            if (comboZonas.getValue().equals("Todas")) {
                subQZon = " ";
                subQZonM = " ";
            } else if (!comboZonas.getValue().equals("Todas")) {
                subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());

            }
            if (comboObjetos.getValue().equals("Todos")) {
                subQObj = " ";
                subQObjM = " ";
            } else if (!comboObjetos.getValue().equals("Todos")) {
                subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());

            }
            if (comboNivel.getValue().equals("Todos")) {
                subQNiv = " ";
                subQNivM = " ";
            } else if (!comboNivel.getValue().equals("Todos")) {
                subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
                subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
                ;
            }
            if (comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " ";
                subQEsp = " ";
            } else if (!comboEspecialidades.getValue().equals("Todas")) {
                subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
                subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                ;
            }
            if (comboSubespecialidades.getValue().equals("Todas")) {
                subQSub = " ";
                subQSubM = " ";
            } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
                subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                ;
                ;
            }
            select = "SELECT zon.codigo as codeZon, zon.desripcion as zonDesc, ob.codigo as obCode, ob.descripcion as obDesc, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.codigo as espCode, esp.descripcion as espDes, sub.codigo as codeSub, sub.descripcion as subdesc, ";
            group = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion,  sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";
            niveles = 6;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT esp.codigo, esp.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion  ";

            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        query.append(subQEsp);
                    }
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(subQEspM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                        queryRecursos.append(subQEsp);
                    }
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 15;

        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT esp.codigo as codEs, esp.descripcion as desEs, zon.codigo, zon.desripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion ";

            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    query.append(subQZon);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQZon);
                    query.append(subQEsp);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo as espCo, esp.descripcion as espDe, zon.codigo as zonC, zon.desripcion as zonD, ob.codigo, ob.descripcion, ";
            group = " GROUP BY esp.codigo, esp.descripcion, rec.codigo, zon.codigo, zon.desripcion, rec.descripcion, ob.codigo, ob.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion,  zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEsp);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZonM = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObjM = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;
                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);

                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;
                    }

                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";

                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }

                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboZonas.getValue().equals("Todas")) {
                        subQZon = " ";
                    } else if (!comboZonas.getValue().equals("Todas")) {
                        partZonas = comboZonas.getValue().split(" - ");
                        subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
                        ;

                    }
                    if (comboObjetos.getValue().equals("Todos")) {
                        subQObj = " ";
                    } else if (!comboObjetos.getValue().equals("Todos")) {
                        partObj = comboObjetos.getValue().split(" - ");
                        subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
                        ;

                    }
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());

            select = "SELECT esp.codigo as esC, esp.descripcion as esDes, sub.codigo, sub.descripcion,";
            group = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion  ";
            groupRcRV = " GROUP BY esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, ";

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEspM = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSubM = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;
                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    if (comboEspecialidades.getValue().equals("Todas")) {
                        subQEsp = " ";
                    } else {
                        partEsp = comboEspecialidades.getValue().split(" - ");
                        subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
                        ;

                    }
                    if (comboSubespecialidades.getValue().equals("Todas")) {
                        subQSub = " ";
                    } else if (!comboSubespecialidades.getValue().equals("Todas")) {
                        partSub = comboSubespecialidades.getValue().split(" - ");
                        subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
                        ;
                        ;
                    }
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

            niveles = 156;
        }

        if (comboObjetos.getValue() == null && comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() == null && comboCuadrilla.getValue() == null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
                subQBrigM = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND ctr.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                subQBrigM = " AND ctr.brigadaconstruccion__id = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            }

            select = "SELECT ec.id, ec.codigo as ecCode, ec.descripcion as ecDes, br.codigo, br.descripcion,";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion ";
            groupRcRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion ";
            niveles = 7;

        } else if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() != null && comboCuadrilla.getValue() == null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
                subQBrigM = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND ctr.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                subQBrigM = " AND ctr.brigadaconstruccion__id = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            }

            partGrup = comboGrupo.getValue().split(" - ");
            if (comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " ";
                subQGrupM = " ";
            } else if (!comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " AND ctr.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                subQGrupM = " AND ctr.grupoconstruccion__id = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            }

            select = "SELECT ec.id, ec.codigo as ecCode, ec.descripcion as ecDes, br.codigo as codB, br.descripcion as desB, gr.codigo, gr.descripcion, ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";
            groupRcRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion ";
            niveles = 8;

        } else if (comboEmpresas.getValue() != null && comboBrigada.getValue() != null && comboGrupo.getValue() != null && comboCuadrilla.getValue() != null) {
            niveles = 0;
            partBrig = comboBrigada.getValue().split(" - ");
            if (comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " ";
                subQBrigM = " ";
            } else if (!comboBrigada.getValue().contentEquals("Todas")) {
                subQBrig = " AND ctr.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
                subQBrigM = " AND ctr.brigadaconstruccion__id = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            }

            partGrup = comboGrupo.getValue().split(" - ");
            if (comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " ";
                subQGrupM = " ";
            } else if (!comboGrupo.getValue().contentEquals("Todos")) {
                subQGrup = " AND ctr.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
                subQGrupM = " AND ctr.grupoconstruccion__id = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            }

            if (comboCuadrilla.getValue().contentEquals("Todas")) {
                subQCuad = " ";
                subQCuadM = " ";
            } else if (!comboCuadrilla.getValue().contentEquals("Todas")) {
                subQCuad = " AND ctr.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
                subQCuadM = " AND ctr.cuadrillaconstruccion__id = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            }
            select = "SELECT ec.id, ec.codigo as ecCode, ec.descripcion as ecDes, br.codigo as codB, br.descripcion as desB, gr.codigo as grCode, gr.descripcion as grDes, cuad.codigo, cuad.descripcion, ";
            group = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion, rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, rec.preciomlc, eoe.cpo, eoe.cpe, eoe.cet, eoe.otra, rec.id ";
            groupM = " GROUP BY bajo.id_suministro, bajo.tipo, ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";
            groupRcRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, br.codigo, br.descripcion, gr.codigo, gr.descripcion, cuad.codigo, cuad.descripcion ";
            niveles = 9;

        }

        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }

            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(" GROUP BY uor.cantRv, uor.renglonvarianteId");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(" GROUP BY uor.cantRv, uor.renglonvarianteId");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null && comboEspecialidades.getValue() == null) {

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }

            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null && comboEspecialidades.getValue() == null) {

            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }

            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null && subQSub == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                if (subQEmp != null) {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(subQEmp);
                    query.append(timeRestrictCert);
                    query.append(group);
                } else {
                    query.append(select);
                    query.append(Subquery);
                    query.append(subQObr);
                    query.append(subQZon);
                    query.append(subQObj);
                    query.append(subQNiv);
                    query.append(subQEsp);
                    query.append(subQSub);
                    query.append(timeRestrictCert);
                    query.append(group);
                }
            }
            if (Subquery1 != null) {
                if (subQEmp != null) {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(subQEmpM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                } else {
                    qmateriales.append(select);
                    qmateriales.append(Subquery1);
                    qmateriales.append(subQObrM);
                    qmateriales.append(subQZonM);
                    qmateriales.append(subQObjM);
                    qmateriales.append(subQNivM);
                    qmateriales.append(subQEspM);
                    qmateriales.append(subQSubM);
                    qmateriales.append(timeRestrictCert);
                    qmateriales.append(groupM);
                }
            }
            if (qRecursos != null) {
                if (subQEmp != null) {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(subQEmp);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                } else {
                    queryRecursos.append(select);
                    queryRecursos.append(qRecursos);
                    queryRecursos.append(subQObr);
                    queryRecursos.append(subQZon);
                    queryRecursos.append(subQObj);
                    queryRecursos.append(subQNiv);
                    queryRecursos.append(subQEsp);
                    queryRecursos.append(subQSub);
                    queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
                }
            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup == null && subQObj == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(timeRestrictCert);
                query.append(group);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQEmpM);
                qmateriales.append(subQBrigM);
                qmateriales.append(timeRestrictCert);
                qmateriales.append(groupM);
            }
            if (qRecursos != null) {
                queryRecursos.append(select);
                queryRecursos.append(qRecursos);
                queryRecursos.append(subQObr);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQBrig);
                queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");

            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup != null && subQCuad == null && subQObj == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(subQGrup);
                query.append(timeRestrictCert);
                query.append(group);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQEmpM);
                qmateriales.append(subQBrigM);
                qmateriales.append(subQGrupM);
                qmateriales.append(timeRestrictCert);
                qmateriales.append(groupM);
            }
            if (qRecursos != null) {
                queryRecursos.append(select);
                queryRecursos.append(qRecursos);
                queryRecursos.append(subQObr);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQBrig);
                queryRecursos.append(subQGrup);
                queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");

            }
        } else if (subQObr != null && subQEmp != null && subQBrig != null && subQGrup != null && subQCuad != null && subQObj == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(subQBrig);
                query.append(subQGrup);
                query.append(subQCuad);
                query.append(timeRestrictCert);
                query.append(group);
            }
            if (Subquery1 != null) {
                qmateriales.append(select);
                qmateriales.append(Subquery1);
                qmateriales.append(subQObrM);
                qmateriales.append(subQEmpM);
                qmateriales.append(subQBrigM);
                qmateriales.append(subQGrupM);
                qmateriales.append(subQCuadM);
                qmateriales.append(timeRestrictCert);
                qmateriales.append(groupM);
            }
            if (qRecursos != null) {
                queryRecursos.append(select);
                queryRecursos.append(qRecursos);
                queryRecursos.append(subQObr);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQEmp);
                queryRecursos.append(subQBrig);
                queryRecursos.append(subQGrup);
                queryRecursos.append(subQCuad);
                queryRecursos.append(groupRcRV + " uor.cantRv, uor.renglonvarianteId ");
            }
        }

        ArrayList<DatosCuantitativaGenreralModelCertificacion> temp = new ArrayList<>();
        ArrayList<DatosCuantitativaGenreralModelCertificacion> dataToFilter = new ArrayList<>();
        parametros = new HashMap<>();
        Empresaconstructora empresaconstructora = new Empresaconstructora();
        if (comboEmpresas.getValue() == null) {
            parametros.put("empName", " ");
        } else if (comboEmpresas.getValue() != null) {
            int id = reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            empresaconstructora = reportProjectStructureSingelton.getEmpresaconstructora(id);
            parametros.put("empName", "Empresa: " + empresaconstructora.getCodigo() + " - " + empresaconstructora.getDescripcion());
        }
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);

        System.out.println(niveles);
        System.out.printf(qmateriales.toString().trim());
        System.out.println("hdgfhjdghjgfdjgdj ESTE ES ");

        try {
            ArrayList<DatosCuantitativaGenreralModelCertificacion> tempNoMat = new ArrayList<>();
            tempNoMat = cfr.getRecursosGeneralCertiFicacion(reportesController, query.toString().trim(), niveles, empresaconstructora, obra, queryRecursos.toString().trim());
            dataToFilter.addAll(tempNoMat);

            temp.addAll(dataToFilter);
            ifDesglose = false;
            if (checkDesglose.isSelected()) {
                ifDesglose = true;
            }
            if (Subquery1 != null) {
                ArrayList<DatosCuantitativaGenreralModelCertificacion> tempMat = new ArrayList<>();
                tempMat = cfr.getRecursosGeneralMaterialesCertificaion(reportesController, qmateriales.toString().trim(), niveles, ifDesglose);
                temp.addAll(tempMat);
            }
            date = LocalDate.now();
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("reportName", "Recursos Planificados periodo: " + intervalo);
            parametros.put("image", "templete/logoReport.jpg");

            temp.size();
            List<DatosCuantitativaGenreralModelCertificacion> datosList = new ArrayList<>();
            datosList = temp.parallelStream().filter(i -> Collections.frequency(temp, i) > 1).collect(Collectors.toList());
            datosList.size();
            List<DatosCuantitativaGenreralModelCertificacion> uniqDatos = new ArrayList<>();
            for (DatosCuantitativaGenreralModelCertificacion datos : datosList.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
                double valCant = getCantSumCert(temp, datos);
                double valCosto = getCostSumCert(temp, datos);
                uniqDatos.add(new DatosCuantitativaGenreralModelCertificacion(datos.getEmpresa(), datos.getZona(), datos.getObjeto(), datos.getNivel(), datos.getEspecialidad(), datos.getSubespecialidad(), datos.getBrigada(), datos.getGrupo(), datos.getCuadrilla(), datos.getCodigo(), datos.getDescripcion(), datos.getUm(), datos.getTipo(), datos.getCpo(), datos.getCpe(), datos.getCet(), datos.getOtra(), valCant, datos.getPrecio(), datos.getPreciomlc(), Math.round(valCosto * 100d) / 100d));
            }

            temp.removeAll(datosList);
            temp.addAll(uniqDatos);
            uniqDatos.size();

            ArrayList<DatosCuantitativaGenreralModelCertificacion> endDatosCuantitativaGenreralModels = new ArrayList<>();
            endDatosCuantitativaGenreralModels.addAll(temp);


            endDatosCuantitativaGenreralModels.size();
            List<DatosCuantitativaGenreralForReportModelCertificacion> datosToReportList = cfr.createReportCuantitativaGeneralFormaterCertificacion(reportesController, endDatosCuantitativaGenreralModels, obra);
            datosToReportList.size();

            for (DatosCuantitativaGenreralForReportModelCertificacion datos : datosToReportList) {
                System.out.println(datos.getCostoTotal());
            }

            if (niveles <= 6) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getZona).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getNivel).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));

            } else if (niveles == 15) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            } else if (niveles == 125) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getZona).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            } else if (niveles == 1235) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getZona).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getObjeto).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            } else if (niveles == 156) {
                datosToReportList.sort(Comparator.comparing(DatosCuantitativaGenreralForReportModelCertificacion::getEspecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getSubespecialidad).thenComparing(DatosCuantitativaGenreralForReportModelCertificacion::getTipo));
            }

            datosToReportList.size();

            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            garbage = Runtime.getRuntime();

            if (checkAmbMonedas.isSelected() == true) {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, true);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);

                }

            } else {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);

                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, false);
                    JRDataSource ds = new JRBeanCollectionDataSource(datosToReportList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);
                }
            }


        } catch (Exception ex) {
            ex.printStackTrace();

            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error: " + ReportesController.class.getName());

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();

        }
    }


    public void createReportPlanRV() {
        query = new StringBuilder();
        if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, cert.cantidad, rec.preciomn, cert.costo, rec.cpo, rec.cpe, rec.cet, rec.otra FROM Nivelespecifico uo INNER JOIN Planrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE  ";

        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, cert.cantidad, rec.preciomn, cert.costo, rec.cpo, rec.cpe, rec.cet, rec.otra FROM Nivelespecifico uo INNER JOIN Planrecrv cert  ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo != '1' AND ";

        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, cert.cantidad, rec.preciomn, cert.costo, rec.cpo, rec.cpe, rec.cet, rec.otra FROM Nivelespecifico uo INNER JOIN Planrecrv cert  ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo != '2' AND ";

        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery = " rec.codigo, rec.descripcion, rec.um, rec.tipo, cert.cantidad, rec.preciomn, cert.costo, rec.cpo, rec.cpe, rec.cet, rec.otra FROM Nivelespecifico uo INNER JOIN Planrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo != '3' AND ";

        } else if (checkMano.isSelected() == true && checkEquipo.isSelected() == false && checkMateriales.isSelected() == false) {
            Subquery = "rec.codigo, rec.descripcion, rec.um, rec.tipo, cert.cantidad, rec.preciomn, cert.costo, rec.cpo, rec.cpe, rec.cet, rec.otra FROM Nivelespecifico uo INNER JOIN Planrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE  rec.tipo = '2' AND ";

        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == true && checkMateriales.isSelected() == false) {
            Subquery = "rec.codigo, rec.descripcion, rec.um, rec.tipo, cert.cantidad, rec.preciomn, cert.costo, rec.cpo, rec.cpe, rec.cet, rec.otra FROM Nivelespecifico uo INNER JOIN Planrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE rec.tipo = '3'  AND ";

        } else if (checkMano.isSelected() == false && checkEquipo.isSelected() == false && checkMateriales.isSelected() == true) {
            Subquery1 = "rec.codigo, rec.descripcion, rec.um, rec.tipo, cert.cantidad, rec.preciomn, cert.costo, rec.cpo, rec.cpe, rec.cet, rec.otra FROM Nivelespecifico uo INNER JOIN Planrecrv cert ON uo.id = cert.nivelespId INNER JOIN Recursos rec ON cert.recursoId = rec.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE  rec.tipo ='1' ";
        }

        if (comboObras.getValue() != null && comboZonas.getValue() == null) {

            partObras = comboObras.getValue().split(" - ");
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.cantidad, cert.costo  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;


            niveles = 1;
        }

        if (comboObras != null && comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            niveles = 0;

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.cantidad, cert.costo ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";
            niveles = 2;


        } else if (comboObras != null && comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion , cert.cantidad, cert.costo ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";

            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQObrM = "uo.obra__id = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            subQZonM = " AND uo.zonas__id = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;


            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.cantidad, cert.costo  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";

            niveles = 3;

        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {

            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.cantidad, cert.costo  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            subQObjM = " AND uo.objetos__id = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;


            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion , cert.cantidad, cert.costo ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";

            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            subQNivM = " AND uo.nivel__id = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion , cert.cantidad, cert.costo ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";

            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;


            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion, cert.cantidad, cert.costo  ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";
            niveles = 5;


        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
            subQEspM = " AND uo.especialidades__id = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion , cert.cantidad, cert.costo ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion , cert.cantidad, cert.costo ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";

            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            subQSubM = " AND uo.subespecialidades__id = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 0;

            select = "SELECT ec.id as idEm, ec.codigo as codeEmp, ec.descripcion as empDesc, zon.id as idZon, zon.codigo as codeZon, zon.desripcion as zonDesc, ob.id as idOb, ob.codigo as obCode, ob.descripcion as obDesc, niv.id as idNiv, niv.codigo as nivCode, niv.descripcion as nivDesc, esp.id as idEsp, esp.codigo as espCode, esp.descripcion as espDes, sub.id as idSub, sub.codigo as codeSub, sub.descripcion as subdesc,  ";
            group = " GROUP BY rec.codigo, rec.descripcion, rec.um, rec.tipo, rec.preciomn, rec.cpo, rec.cpe, rec.cet, rec.otra, ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion, sub.id, sub.codigo, sub.descripcion , cert.cantidad, cert.costo ";
            order = " ORDER BY zon.id, ob.id, niv.id, esp.id, sub.id, rec.tipo ASC";
            niveles = 6;
        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            // idEmp = Integer.parseInt(partEmp[0]);
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
            subQEmpM = " AND uo.empresaconstructora__id = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
            niveles = 1;
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.fini >= '" + desdeDate.toString().trim() + "' AND cert.ffin <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }

        if (subQObr != null && subQZon == null && subQObj == null && subQNiv == null && subQEmp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQZon != null && subQObj == null && subQNiv == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }
        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }


        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub == null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQZon != null && subQObj != null && subQNiv != null && subQEsp != null && subQSub != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQZon);
                query.append(subQObj);
                query.append(subQNiv);
                query.append(subQEsp);
                query.append(subQSub);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }

        } else if (subQObr != null && subQEmp != null) {
            if (Subquery != null) {
                query.append(select);
                query.append(Subquery);
                query.append(subQObr);
                query.append(subQEmp);
                query.append(timeRestrictCert);
                query.append(group);
                query.append(order);
            }
        }

        ArrayList<DatosCuantitativaModel> tempNoMat = new ArrayList<DatosCuantitativaModel>();
        ArrayList<DatosCuantitativaModel> temp = new ArrayList<DatosCuantitativaModel>();

        try {

            if (Subquery != null) {
                tempNoMat = cfr.getRecursos(reportesController, query.toString().trim(), niveles);
                temp.addAll(tempNoMat);
            }
        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);

            alert.showAndWait();
        }
        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("titlereport", "Recursos Planificados periodo: " + intervalo);
        parametros.put("image", "templete/logoReport.jpg");

        datosCuantitativaModelArrayList = new ArrayList<DatosCuantitativaModel>();

        if (temp.size() == 0) {

            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("No hay información que mostrar, revise sus datos");
            alert.showAndWait();

        } else if (temp.size() > 0) {

            datosCuantitativaModelArrayList.addAll(temp);
            cuantitativaModelArrayList = cfr.createReportCuantitativaFormater(reportesController, datosCuantitativaModelArrayList, obra);
            indication.setText(" ");
            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            printReport(reportesController, cuantitativaModelArrayList, niveles);
        }

    }

    public void createReportcertifico() {

        query = new StringBuilder();
        niveles = 0;
        Subquery = " SELECT ec.codigo, ec.descripcion, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, uo.codigo, uo.descripcion, cert.cantidad, uo.um, cert.costmaterial + cert.costmano + cert.costequipo, uo.id, cert.id, cert.brigadaconstruccionId, cert.grupoconstruccionId, cert.cuadrillaconstruccionId FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id = cert.unidadobraId LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE ";

        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            subQObj = " ";
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            subQNiv = " ";
        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            subQEsp = " ";

        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            subQSub = " ";
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }

        if (comboBrigada.getValue() != null) {
            partBrig = comboBrigada.getValue().split(" - ");
            subQBrig = " AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;
        }

        if (comboGrupo.getValue() != null) {
            partGrup = comboGrupo.getValue().split(" - ");
            subQGrup = " AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
        }

        if (comboCuadrilla.getValue() != null) {
            partCuad = comboCuadrilla.getValue().split(" - ");
            subQBrig = " AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.desde >= '" + desdeDate.toString().trim() + "' AND cert.hasta <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }

        query.append(Subquery);
        query.append(subQObr);
        if (subQZon != null) {
            query.append(subQZon);
        }
        if (subQObj != null) {
            query.append(subQObj);
        }
        if (subQNiv != null) {
            query.append(subQNiv);
        }

        if (subQEsp != null) {
            query.append(subQEsp);
        }

        if (subQSub != null) {
            query.append(subQSub);
        }

        if (subQEmp != null) {
            query.append(subQEmp);
        }

        if (subQBrig != null) {
            query.append(subQBrig);
        }

        if (subQGrup != null) {
            query.append(subQGrup);
        }

        if (subQCuad != null) {
            query.append(subQCuad);
        }
        query.append(timeRestrictCert);

        System.out.println(query);

        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);
        double valCoef = obra.getTarifaSalarialByTarifa().getAutEspecial();

        date = LocalDate.now();
        parametros = new HashMap<>();
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        if (checkFecha.isSelected()) {
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        } else {
            parametros.put("fecha", " ");
        }

        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");
        parametros.put("reportName", "Certifico: " + intervalo);

        niveles = 0;
        niveles = 4;


        try {
            certificoModelArrayList = new ArrayList<>();
            certificoModelArrayList = cfr.getDatosTocertifico(reportesController, query.toString().trim(), desdeDate.toString().trim(), hastaData.toString().trim());
            certificoModelArrayList.size();

        } catch (Exception ex) {
            ex.printStackTrace();


            Alert alert = new Alert(Alert.AlertType.WARNING);


            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();

        }
        indication.setText(" ");
        tarea = createTime(50);
        stage = new ProgressDialog(tarea);
        stage.setContentText("Preparando el reporte...");
        stage.setTitle("Espere...");
        new Thread(tarea).start();
        stage.showAndWait();
        boolean look = false;
        if (certificoModelArrayList.size() != 0) {
            CertificoModel certifico = certificoModelArrayList.get(0);
            if (certifico.getCuadrilla().equals(" ")) {
                look = true;
            }
        }
        certificoModelArrayList.sort(Comparator.comparing(CertificoModel::getEmpresa).thenComparing(CertificoModel::getBrigada).thenComparing(CertificoModel::getGrupo).thenComparing(CertificoModel::getCuadrilla).thenComparing(CertificoModel::getZona).thenComparing(CertificoModel::getObjeto).thenComparing(CertificoModel::getNivel));

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.CertificoUoReport(reportesController, niveles, look, valCoef);
                JRDataSource ds = new JRBeanCollectionDataSource(certificoModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);

                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.CertificoUoReport(reportesController, niveles, look, valCoef);
                JRDataSource ds = new JRBeanCollectionDataSource(certificoModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);

                exportarExcel(jp);
            }

        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (JRException e) {
            e.printStackTrace();
        }


    }

    public void createReportcertificoPlan() {

        query = new StringBuilder();
        niveles = 0;
        Subquery = " SELECT ec.codigo, ec.descripcion, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, zon.codigo, zon.desripcion, ob.codigo, ob.descripcion, niv.codigo, niv.descripcion, esp.codigo, esp.descripcion, sub.codigo, sub.descripcion, uo.codigo, uo.descripcion, cert.cantidad, uo.um, cert.costomaterial + cert.costoequipo + cert.costomano, uo.id, cert.id, cert.brigadaconstruccionId, cert.grupoconstruccionId, cert.cuadrillaconstruccionId FROM Unidadobra uo LEFT JOIN Planificacion cert ON uo.id = cert.unidadobraId LEFT JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id LEFT JOIN Zonas zon ON uo.zonasId = zon.id LEFT JOIN Objetos ob ON uo.objetosId = ob.id LEFT JOIN Nivel niv ON uo.nivelId = niv.id LEFT JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id LEFT JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id LEFT JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id WHERE ";

        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            subQObj = " ";
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            subQNiv = " ";
        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            subQEsp = " ";

        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            subQSub = " ";
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }

        if (comboBrigada.getValue() != null) {
            partBrig = comboBrigada.getValue().split(" - ");
            subQBrig = " AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;
        }

        if (comboGrupo.getValue() != null) {
            partGrup = comboGrupo.getValue().split(" - ");
            subQGrup = " AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
        }

        if (comboCuadrilla.getValue() != null) {
            partCuad = comboCuadrilla.getValue().split(" - ");
            subQBrig = " AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.desde >= '" + desdeDate.toString().trim() + "' AND cert.hasta <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }

        query.append(Subquery);
        query.append(subQObr);
        if (subQZon != null) {
            query.append(subQZon);
        }
        if (subQObj != null) {
            query.append(subQObj);
        }
        if (subQNiv != null) {
            query.append(subQNiv);
        }

        if (subQEsp != null) {
            query.append(subQEsp);
        }

        if (subQSub != null) {
            query.append(subQSub);
        }

        if (subQEmp != null) {
            query.append(subQEmp);
        }

        if (subQBrig != null) {
            query.append(subQBrig);
        }

        if (subQGrup != null) {
            query.append(subQGrup);
        }

        if (subQCuad != null) {
            query.append(subQCuad);
        }
        query.append(timeRestrictCert);

        System.out.println(query);

        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);
        double valCoef = obra.getTarifaSalarialByTarifa().getAutEspecial();

        date = LocalDate.now();
        parametros = new HashMap<>();
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        if (checkFecha.isSelected()) {
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        } else {
            parametros.put("fecha", " ");
        }

        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("image", "templete/logoReport.jpg");
        parametros.put("reportName", "Certifico Plan: " + intervalo);

        niveles = 0;
        niveles = 4;


        try {
            certificoModelArrayList = new ArrayList<>();
            certificoModelArrayList = cfr.getDatosTocertificoPlan(reportesController, query.toString().trim(), desdeDate.toString().trim(), hastaData.toString().trim());
        } catch (Exception ex) {
            ex.printStackTrace();

            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();

        }
        indication.setText(" ");
        tarea = createTime(50);
        stage = new ProgressDialog(tarea);
        stage.setContentText("Preparando el reporte...");
        stage.setTitle("Espere...");
        new Thread(tarea).start();
        stage.showAndWait();
        boolean look = false;
        if (certificoModelArrayList.size() != 0) {
            CertificoModel certifico = certificoModelArrayList.get(0);
            if (certifico.getCuadrilla().equals(" ")) {
                look = true;
            }
        }
        certificoModelArrayList.sort(Comparator.comparing(CertificoModel::getEmpresa).thenComparing(CertificoModel::getBrigada).thenComparing(CertificoModel::getGrupo).thenComparing(CertificoModel::getCuadrilla).thenComparing(CertificoModel::getZona).thenComparing(CertificoModel::getObjeto).thenComparing(CertificoModel::getNivel));

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.CertificoUoReport(reportesController, niveles, look, valCoef);
                JRDataSource ds = new JRBeanCollectionDataSource(certificoModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);

                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.CertificoUoReport(reportesController, niveles, look, valCoef);
                JRDataSource ds = new JRBeanCollectionDataSource(certificoModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);

                exportarExcel(jp);
            }

        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (JRException e) {
            e.printStackTrace();
        }

    }


    public void printReport(ReportesController
                                    reportesController, ArrayList<CuantitativaModel> cuantitativaModelArrayList, int niveles) {

        try {

            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.cuantitativaReport(reportesController, niveles, false);
                JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.cuantitativaReport(reportesController, niveles, false);
                JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                exportarExcel(jp);
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (JRException e) {
            e.printStackTrace();
        }
    }

    /**
     * Cuantitativa del plan y de la certificación
     */
    public void printReportCertyPlan(ReportesController
                                             reportesController, ArrayList<CuantitativaModelToCERT> cuantitativaModelArrayList, int niveles, Map params) {

        if (niveles == 1) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getUo).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 2) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getUo).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 3) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getObjeto).thenComparing(CuantitativaModelToCERT::getUo).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 4) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getObjeto).thenComparing(CuantitativaModelToCERT::getNivel).thenComparing(CuantitativaModelToCERT::getUo).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 5) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getObjeto).thenComparing(CuantitativaModelToCERT::getNivel).thenComparing(CuantitativaModelToCERT::getEspecialidad).thenComparing(CuantitativaModelToCERT::getUo).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 6) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getObjeto).thenComparing(CuantitativaModelToCERT::getNivel).thenComparing(CuantitativaModelToCERT::getEspecialidad).thenComparing(CuantitativaModelToCERT::getSubespecialidad).thenComparing(CuantitativaModelToCERT::getUo).thenComparing(CuantitativaModelToCERT::getTipo));
        }

        try {
            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.cuantitativaReportPlanyCert(reportesController, niveles, false);
                JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), params);
                JasperPrint jp = JasperFillManager.fillReport(jr, params, ds);
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.cuantitativaReportPlanyCert(reportesController, niveles, false);
                JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), params);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                exportarExcel(jp);
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (JRException e) {
            e.printStackTrace();
        }
    }

    public void printReportCertyPlanGENRERAL(ReportesController
                                                     reportesController, ArrayList<CuantitativaModelToCERT> cuantitativaModelArrayList, int niveles) {
        if (niveles == 1) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 2) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 3) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getObjeto).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 4) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getObjeto).thenComparing(CuantitativaModelToCERT::getNivel).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 5) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getObjeto).thenComparing(CuantitativaModelToCERT::getNivel).thenComparing(CuantitativaModelToCERT::getEspecialidad).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 6) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getObjeto).thenComparing(CuantitativaModelToCERT::getNivel).thenComparing(CuantitativaModelToCERT::getEspecialidad).thenComparing(CuantitativaModelToCERT::getSubespecialidad).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 7) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getBrigada).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 8) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getBrigada).thenComparing(CuantitativaModelToCERT::getGrupo).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 9) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getBrigada).thenComparing(CuantitativaModelToCERT::getGrupo).thenComparing(CuantitativaModelToCERT::getCuadrilla).thenComparing(CuantitativaModelToCERT::getTipo));
        } else if (niveles == 73) {
            cuantitativaModelArrayList.sort(Comparator.comparing(CuantitativaModelToCERT::getIdEmpresa).thenComparing(CuantitativaModelToCERT::getZona).thenComparing(CuantitativaModelToCERT::getObjeto).thenComparing(CuantitativaModelToCERT::getBrigada).thenComparing(CuantitativaModelToCERT::getTipo));
        }

        try {
            if (checkExp.isSelected() == false) {
                // DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, false);
                DynamicReport dr = bdr.cuantitativaReportPlanyCertRV(reportesController, niveles, false);
                JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                // DynamicReport dr = bdr.cuantitativaReportGeneralCertificacion(reportesController, niveles, false);
                DynamicReport dr = bdr.cuantitativaReportPlanyCertRV(reportesController, niveles, false);
                JRDataSource ds = new JRBeanCollectionDataSource(cuantitativaModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                exportarExcel(jp);
            }
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (JRException e) {
            e.printStackTrace();
        }
    }

    private void createCertificacionOrigenUOMethod() {
        query = new StringBuilder();
        niveles = 0;

        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {
            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            subQObj = " ";
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            subQNiv = " ";
        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            subQEsp = " ";
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            subQSub = " ";
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
        }


        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }


        if (comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {
            subQBrig = " ";
        } else if (comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
            partBrig = comboBrigada.getValue().split(" - ");
            subQBrig = " AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;
        }

        if (comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todos")) {
            subQGrup = " ";
        } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todos")) {
            partGrup = comboGrupo.getValue().split(" - ");
            subQGrup = " AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
        }

        if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
            subQCuad = " ";
        } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
            partCuad = comboCuadrilla.getValue().split(" - ");
            subQCuad = " AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
        }

        if (subQBrig == null) {
            niveles = 0;
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad), SUM(cert.costmaterial), SUM(cert.costmano), SUM(cert.costequipo) FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);
            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }
            query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um");
            niveles = 6;
        }

        if (subQEmp != null && subQBrig != null && subQGrup == null && subQCuad == null) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad), SUM(cert.costmaterial), SUM(cert.costmano), SUM(cert.costequipo), brig.codigo, brig.descripcion FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            niveles = 0;
            query.append(Subquery);
            query.append(subQObr);
            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }
            query.append(subQEmp);
            query.append(subQBrig);
            query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, brig.codigo, brig.descripcion");
            niveles = 7;
        }

        if (subQEmp != null && subQBrig != null && subQGrup != null && subQCuad == null) {
            niveles = 0;
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad), SUM(cert.costmaterial), SUM(cert.costmano), SUM(cert.costequipo), brig.codigo, brig.descripcion, grup.codigo, grup.descripcion FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id  INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);
            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }
            query.append(subQEmp);
            query.append(subQGrup);
            query.append(subQBrig);
            query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion ");
            niveles = 8;
        }

        if (subQEmp != null && subQCuad != null && subQGrup != null && subQBrig != null) {
            niveles = 0;
            Subquery = "SELECT  ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad), SUM(cert.costmaterial), SUM(cert.costmano), SUM(cert.costequipo), brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion FROM Unidadobra uo INNER JOIN Certificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);
            query.append(subQObr);
            if (subQZon == null) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }
            query.append(subQEmp);
            query.append(subQGrup);
            query.append(subQBrig);
            query.append(subQCuad);
            query.append(" GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion ");
            niveles = 9;
        }

        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());

        if (othersOptions.getValue() != null && othersOptions.getValue().equals("Inversionista")) {
            System.out.println(othersOptions.getValue());
            parametros.put("inver", "Cliente: " + obra.getInversionistaByInversionistaId().getCodigo() + " " + obra.getInversionistaByInversionistaId().getDescripcion());
        } else {
            parametros.put("inver", " ");
        }

        if (checkFecha.isSelected()) {
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        } else {
            parametros.put("fecha", " ");
        }
        int templete = 0;
        if (comboConfecionado.getValue() == null) {
            templete = 1;
            parametros.put("reportName", "Certificación Origen por Unidades de Obra");
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");

        } else if (comboConfecionado.getValue() != null) {
            templete = 2;
            String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            parametros.put("empresa", empresa.getNombre());
            parametros.put("reportName", "Certificación Origen por Unidades de Obra");
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");
            parametros.put("conf", "Confeccionado: " + confe);
            parametros.put("rev", "Revisado: " + rev);
            parametros.put("aprub", "Aprobado: " + apro);
        }

        table = false;
        if (checkTable.isSelected() == false) {
            table = true;
        }


        try {
            datosCertificacionOrigenArrayList = new ArrayList<>();
            datosCertificacionOrigenArrayList = cfr.getDatosCertificacionOrigenArrayList(reportesController, query.toString().trim(), niveles);

            if (datosCertificacionOrigenArrayList.size() != 0) {
                certificacionOrigenUOArrayList = new ArrayList<>();
                certificacionOrigenUOArrayList = cfr.createReportesCOUOFormater(reportesController, datosCertificacionOrigenArrayList, obra);

                tarea = createTime(50);
                stage = new ProgressDialog(tarea);
                stage.setContentText("Preparando el reporte...");
                stage.setTitle("Espere...");
                new Thread(tarea).start();
                stage.showAndWait();

                if (niveles <= 6) {
                    certificacionOrigenUOArrayList.sort(Comparator.comparing(CertificacionOrigenUO::getIdEmpresa).thenComparing(CertificacionOrigenUO::getIdZona).thenComparing(CertificacionOrigenUO::getIdObjeto).thenComparing(CertificacionOrigenUO::getIdNivel).thenComparing(CertificacionOrigenUO::getIdEspecialidad).thenComparing(CertificacionOrigenUO::getIdSub).thenComparing(CertificacionOrigenUO::getIdUnidad));
                } else if (niveles == 7) {
                    certificacionOrigenUOArrayList.sort(Comparator.comparing(CertificacionOrigenUO::getIdEmpresa).thenComparing(CertificacionOrigenUO::getBrigada).thenComparing(CertificacionOrigenUO::getIdZona).thenComparing(CertificacionOrigenUO::getIdObjeto).thenComparing(CertificacionOrigenUO::getIdNivel).thenComparing(CertificacionOrigenUO::getIdEspecialidad).thenComparing(CertificacionOrigenUO::getIdSub).thenComparing(CertificacionOrigenUO::getIdUnidad));
                } else if (niveles == 8) {
                    certificacionOrigenUOArrayList.sort(Comparator.comparing(CertificacionOrigenUO::getIdEmpresa).thenComparing(CertificacionOrigenUO::getBrigada).thenComparing(CertificacionOrigenUO::getGrupo).thenComparing(CertificacionOrigenUO::getIdZona).thenComparing(CertificacionOrigenUO::getIdObjeto).thenComparing(CertificacionOrigenUO::getIdNivel).thenComparing(CertificacionOrigenUO::getIdEspecialidad).thenComparing(CertificacionOrigenUO::getIdSub).thenComparing(CertificacionOrigenUO::getIdUnidad));
                } else if (niveles == 9) {
                    certificacionOrigenUOArrayList.sort(Comparator.comparing(CertificacionOrigenUO::getIdEmpresa).thenComparing(CertificacionOrigenUO::getBrigada).thenComparing(CertificacionOrigenUO::getGrupo).thenComparing(CertificacionOrigenUO::getCuadrilla).thenComparing(CertificacionOrigenUO::getIdZona).thenComparing(CertificacionOrigenUO::getIdObjeto).thenComparing(CertificacionOrigenUO::getIdNivel).thenComparing(CertificacionOrigenUO::getIdEspecialidad).thenComparing(CertificacionOrigenUO::getIdSub).thenComparing(CertificacionOrigenUO::getIdUnidad));
                }
                List<ConceptosReporte> reportFormaters = new ArrayList<>();
                for (CertificacionOrigenUO totalReportFormater : certificacionOrigenUOArrayList) {
                    reportFormaters.addAll(totalReportFormater.getBodyConceptos());
                }
                List<ResumenCostosList> resumenList = new ArrayList<>();
                resumenList = getResmenListReport(obra, reportFormaters);
                parametros.put("resumen", resumenList);

                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createCertificacionOrigen(reportesController, niveles, templete, table);
                    JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createCertificacionOrigen(reportesController, niveles, templete, table);
                    JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    exportarExcel(jp);
                }


            } else {
                Alert alert = new Alert(Alert.AlertType.INFORMATION);
                alert.setHeaderText("Información");
                alert.setContentText("No existen certificaciones en esta ObraPCW");
                alert.showAndWait();
            }

        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setTitle("Error");
            alert.setContentText(ex.getMessage());
            alert.showAndWait();
        }


    }


    public void exportarExcel(JasperPrint jp) {

        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Salvar exportación");
        FileChooser.ExtensionFilter extFilter = new FileChooser.ExtensionFilter("Proyecto (*.xlsx)", "*.xlsx");
        fileChooser.getExtensionFilters().add(extFilter);

        //Show save file dialog
        File file = fileChooser.showSaveDialog(null);

        if (file != null) {

            try {
                JRXlsxExporter exporter = new JRXlsxExporter();
                exporter.setExporterInput(new SimpleExporterInput(jp));
                exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(file.getAbsolutePath()));
                exporter.exportReport();
                Runtime.getRuntime().exec("cmd /c start " + file.getAbsolutePath());

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }

    private void createReportPlanUORV() {
        query = new StringBuilder();
        qmateriales = new StringBuilder();
        niveles = 0;
        String certRVBuilderRV = null;
        String certRVBuilderMat = null;

        if (comboObras.getValue() != null) {
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;
            niveles = 1;

        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas")) {
            subQZon = " ";
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas")) {

            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboObjetos.getValue() != null && comboObjetos.getValue().contentEquals("Todos")) {
            niveles = 3;
        } else if (comboObjetos.getValue() != null && !comboObjetos.getValue().contentEquals("Todos")) {
            partObj = comboObjetos.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;

            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            partNiv = comboNivel.getValue().split(" - ");
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;

            niveles = 4;

        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            partEsp = comboEspecialidades.getValue().split(" - ");
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            partSub = comboSubespecialidades.getValue().split(" - ");
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 6;

        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }

        if (comboBrigada.getValue() != null && comboBrigada.getValue().contentEquals("Todas")) {
            subQBrig = " ";
            niveles = 7;
        } else if (comboBrigada.getValue() != null && !comboBrigada.getValue().contentEquals("Todas")) {
            partBrig = comboBrigada.getValue().split(" - ");
            subQBrig = " AND cert.brigadaconstruccionId = " + reportProjectStructureSingelton.getIdBrigadaByToString(comboBrigada.getValue());
            ;
            niveles = 7;
        }

        if (comboGrupo.getValue() != null && comboGrupo.getValue().contentEquals("Todos")) {
            subQGrup = " ";
            niveles = 8;
        } else if (comboGrupo.getValue() != null && !comboGrupo.getValue().contentEquals("Todos")) {
            partGrup = comboGrupo.getValue().split(" - ");

            subQGrup = " AND cert.grupoconstruccionId = " + reportProjectStructureSingelton.getIdGrupoByToString(comboGrupo.getValue());
            ;
            niveles = 8;
        }

        if (comboCuadrilla.getValue() != null && comboCuadrilla.getValue().contentEquals("Todas")) {
            subQCuad = " ";
            niveles = 9;
        } else if (comboCuadrilla.getValue() != null && !comboCuadrilla.getValue().contentEquals("Todas")) {
            partCuad = comboCuadrilla.getValue().split(" - ");

            subQCuad = " AND cert.cuadrillaconstruccionId = " + reportProjectStructureSingelton.getIdCuadrillaByToString(comboCuadrilla.getValue());
            ;
            niveles = 9;
        }

        if (niveles <= 6) {

            Subquery = "SELECT  ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(ur.cantRv * cert.cantidad / uo.cantidad ) as plCantSu, SUM(cert.costomaterial) as cmater, SUM(cert.costomano) as cmano, SUM(cert.costoequipo) as ccequ, rv.codigo,  rv.descripcion, rv.um, rv.costomat, rv.costmano, rv.costequip, rv.id  FROM Unidadobra uo INNER JOIN Unidadobrarenglon ur ON ur.unidadobraId = uo.id INNER JOIN Planificacion cert ON ur.unidadobraId  = cert.unidadobraId INNER JOIN Renglonvariante rv ON ur.renglonvarianteId = rv.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(bajo.cantidad * cert.cantidad/ uo.cantidad) as plCant, SUM(cert.costomano) as cost, bajo.tipo, bajo.idSuministro FROM Unidadobra uo INNER JOIN Bajoespecificacion bajo ON bajo.unidadobraId = uo.id INNER JOIN Planificacion cert ON uo.id  = cert.unidadobraId INNER JOIN  Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id AND";
            qmateriales.append(Subquery1);

            query.append(subQObr);
            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            qmateriales.append(subQObr);
            if (subQZon == null || subQZon.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                qmateriales.append(subQEmp);
            }

            certRVBuilderRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, rv.codigo,  rv.descripcion, rv.um, rv.costomat, rv.costmano, rv.costequip, rv.id";
            certRVBuilderMat = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, bajo.tipo, bajo.idSuministro";


        } else if (niveles == 7) {
            Subquery = "SELECT  ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(ur.cantRv * cert.cantidad / uo.cantidad ) as plCantSu, SUM(cert.costomaterial) as cmater, SUM(cert.costomano) as cmano, SUM(cert.costoequipo) as ccequ, rv.codigo, rv.descripcion, rv.um, brig.codigo, brig.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id FROM Unidadobra uo INNER JOIN Unidadobrarenglon ur ON ur.unidadobraId = uo.id INNER JOIN Planificacion cert ON ur.unidadobraId  = cert.unidadobraId INNER JOIN Renglonvariante rv ON ur.renglonvarianteId = rv.id INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(bajo.cantidad * cert.cantidad/ uo.cantidad) as plCant, SUM(cert.costomano) as cost, brig.codigo, brig.descripcion, bajo.tipo, bajo.idSuministro FROM Unidadobra uo INNER JOIN Bajoespecificacion bajo ON bajo.unidadobraId = uo.id INNER JOIN Planificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id AND";
            qmateriales.append(Subquery1);

            query.append(subQObr);
            qmateriales.append(subQObr);


            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQBrig);
            }

            if (subQZon == null || subQZon.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                qmateriales.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQBrig);
            }

            certRVBuilderRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id";
            certRVBuilderMat = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, bajo.tipo, bajo.idSuministro,  brig.codigo, brig.descripcion";

        } else if (niveles == 8) {
            Subquery = "SELECT  ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(ur.cantRv * cert.cantidad / uo.cantidad ) as plCantSu, SUM(cert.costomaterial) as cmater, SUM(cert.costomano) as cmano, SUM(cert.costoequipo) as ccequ, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id FROM Unidadobra uo INNER JOIN Unidadobrarenglon ur ON ur.unidadobraId = uo.id INNER JOIN Planificacion cert ON ur.unidadobraId  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id  INNER JOIN Renglonvariante rv ON ur.renglonvarianteId = rv.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = " SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(bajo.cantidad * cert.cantidad/ uo.cantidad) as plCant, SUM(cert.costomano) as cost, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, bajo.tipo, bajo.idSuministro FROM Unidadobra uo INNER JOIN Bajoespecificacion bajo ON bajo.unidadobraId = uo.id INNER JOIN Planificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id  INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id AND";
            qmateriales.append(Subquery1);

            query.append(subQObr);
            qmateriales.append(subQObr);


            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQBrig);
            }

            if (subQGrup == null || subQGrup.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQGrup);
            }

            if (subQZon == null || subQZon.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                qmateriales.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQBrig);
            }

            if (subQGrup == null || subQGrup.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQGrup);
            }

            certRVBuilderRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, rv.codigo,  rv.descripcion, rv.um ,brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id";
            certRVBuilderMat = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, bajo.tipo, bajo.idSuministro, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion";


        } else if (niveles == 9) {
            Subquery = "SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(ur.cantRv * cert.cantidad / uo.cantidad ) as plCantSu, SUM(cert.costomaterial) as cmater, SUM(cert.costomano) as cmano, SUM(cert.costoequipo) as ccequ, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id FROM Unidadobra uo INNER JOIN Unidadobrarenglon ur ON ur.unidadobraId = uo.id INNER JOIN Planificacion cert ON ur.unidadobraId  = cert.unidadobraId INNER JOIN Renglonvariante rv ON ur.renglonvarianteId = rv.id INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id INNER JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id WHERE ";
            query.append(Subquery);

            Subquery1 = " SELECT ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, SUM(cert.cantidad) as cant, SUM(bajo.cantidad * cert.cantidad/ uo.cantidad) as plCant, SUM(cert.costomano) as cost, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, bajo.tipo, bajo.idSuministro FROM Unidadobra uo INNER JOIN Bajoespecificacion bajo ON bajo.unidadobraId = uo.id INNER JOIN Planificacion cert ON uo.id  = cert.unidadobraId INNER JOIN Brigadaconstruccion brig ON cert.brigadaconstruccionId = brig.id INNER JOIN Grupoconstruccion grup ON cert.grupoconstruccionId = grup.id LEFT JOIN Cuadrillaconstruccion cuad ON cert.cuadrillaconstruccionId = cuad.id INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Subespecialidades sub ON uo.subespecialidadesId = sub.id AND";
            qmateriales.append(Subquery1);


            query.append(subQObr);
            qmateriales.append(subQObr);

            if (subQZon == null || subQZon.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQSub);
            }

            if (subQEmp != null) {
                query.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQBrig);
            }

            if (subQGrup == null || subQGrup.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQGrup);
            }

            if (subQCuad == null || subQCuad.equals(" ")) {
                query.append(" ");
            } else {
                query.append(subQCuad);
            }

            if (subQZon == null || subQZon.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQZon);
            }
            if (subQObj == null || subQObj.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQObj);
            }
            if (subQNiv == null || subQNiv.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQNiv);
            }
            if (subQEsp == null || subQEsp.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQEsp);
            }
            if (subQSub == null || subQSub.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQSub);
            }

            if (subQEmp != null) {
                qmateriales.append(subQEmp);
            }

            if (subQBrig == null || subQBrig.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQBrig);
            }

            if (subQGrup == null || subQGrup.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQGrup);
            }

            if (subQCuad == null || subQCuad.equals(" ")) {
                qmateriales.append(" ");
            } else {
                qmateriales.append(subQCuad);
            }

            certRVBuilderRV = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, rv.codigo,  rv.descripcion, rv.um, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion, rv.costomat, rv.costmano, rv.costequip, rv.id";
            certRVBuilderMat = " GROUP BY ec.id, ec.codigo, ec.descripcion, zon.id, zon.codigo, zon.desripcion, ob.id, ob.codigo, ob.descripcion, niv.id, niv.codigo, niv.descripcion, esp.id, esp.codigo, esp.descripcion,  sub.id, sub.codigo, sub.descripcion, uo.id,  uo.codigo, uo.descripcion, uo.um, bajo.tipo, bajo.idSuministro, brig.codigo, brig.descripcion, grup.codigo, grup.descripcion, cuad.codigo, cuad.descripcion";

        }


        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            String timeRestrict = " AND cert.desde >= '" + desdeDate.toString().trim() + "' AND cert.hasta <= '" + hastaData.toString().trim() + "'";
            query.append(timeRestrict);
            qmateriales.append(timeRestrict);
            query.append(certRVBuilderRV);
            qmateriales.append(certRVBuilderMat);

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }

        date = LocalDate.now();
        parametros = new HashMap<>();
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);


        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());

        if (othersOptions.getValue() != null && othersOptions.getValue().equals("Inversionista")) {
            System.out.println(othersOptions.getValue());
            parametros.put("inver", "Cliente: " + obra.getInversionistaByInversionistaId().getCodigo() + " " + obra.getInversionistaByInversionistaId().getDescripcion());
        } else {
            parametros.put("inver", " ");
        }

        if (checkFecha.isSelected()) {
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        } else {
            parametros.put("fecha", " ");
        }
        int templete = 0;
        if (comboConfecionado.getValue() == null) {
            templete = 1;
            parametros.put("reportName", "Planificación: " + intervalo);
            parametros.put("empresa", empresa.getNombre());
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");

        } else if (comboConfecionado.getValue() != null) {
            templete = 2;
            String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
            parametros.put("empresa", empresa.getNombre());
            parametros.put("reportName", "Planificación: " + intervalo);
            parametros.put("comercial", empresa.getComercial());
            parametros.put("image", "templete/logoReport.jpg");
            parametros.put("conf", "Confeccionado: " + confe);
            parametros.put("rev", "Revisado: " + rev);
            parametros.put("aprub", "Aprobado: " + apro);
        }

        datosCertificacionOrigenUORVArrayList = new ArrayList<>();
        try {
            datosCertificacionOrigenUORVArrayList = cfr.getDatosCertificacionOrigenUOinRVArrayList(reportesController, query.toString().trim(), qmateriales.toString().trim(), niveles, obra.getId());
        } catch (Exception ex) {
            Alert alert = new Alert(Alert.AlertType.WARNING);

            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            // Set content for Dialog Pane
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();
        }


        if (datosCertificacionOrigenUORVArrayList.size() != 0) {

            certificacionOrigenUOinRVArrayList = new ArrayList<>();
            certificacionOrigenUOinRVArrayList = cfr.createReportesCOUORVFormater(reportesController, datosCertificacionOrigenUORVArrayList, obra);

            indication.setText(" ");
            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            if (niveles <= 6) {
                certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
            } else if (niveles == 7) {
                certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getBrigada).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
            } else if (niveles == 8) {
                certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getBrigada).thenComparing(CertificacionOrigenUOinRV::getGrupo).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
            } else if (niveles == 9) {
                certificacionOrigenUOinRVArrayList.sort(Comparator.comparing(CertificacionOrigenUOinRV::getIdEmpresa).thenComparing(CertificacionOrigenUOinRV::getBrigada).thenComparing(CertificacionOrigenUOinRV::getGrupo).thenComparing(CertificacionOrigenUOinRV::getCuadrilla).thenComparing(CertificacionOrigenUOinRV::getIdZona).thenComparing(CertificacionOrigenUOinRV::getIdObjeto).thenComparing(CertificacionOrigenUOinRV::getIdNivel).thenComparing(CertificacionOrigenUOinRV::getEspecialidad).thenComparing(CertificacionOrigenUOinRV::getIdSub).thenComparing(CertificacionOrigenUOinRV::getIdUnidad));
            }
            List<ConceptosReporte> reportFormaters = new ArrayList<>();
            for (CertificacionOrigenUOinRV totalReportFormater : certificacionOrigenUOinRVArrayList) {
                reportFormaters.addAll(totalReportFormater.getBodyConceptos());
            }
            List<ResumenCostosList> resumenList = new ArrayList<>();
            resumenList = getResmenListReport(obra, reportFormaters);
            parametros.put("resumen", resumenList);

            try {
                if (checkExp.isSelected() == false) {
                    DynamicReport dr = bdr.createCertificacionOrigenUORV(reportesController, niveles, templete, table);
                    JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOinRVArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    JasperViewer.viewReport(jp, false);
                } else {
                    parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                    DynamicReport dr = bdr.createCertificacionOrigenUORV(reportesController, niveles, templete, table);
                    JRDataSource ds = new JRBeanCollectionDataSource(certificacionOrigenUOinRVArrayList);
                    JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                    JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                    // stage.close();
                    exportarExcel(jp);
                }

            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (JRException e) {
                e.printStackTrace();
            }
        } else {

            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("No exiten certificaciones en esta ObraPCW");
            alert.showAndWait();
        }
    }


    public void handleCloseWindows(ActionEvent event) {

        Stage stage = (Stage) btnClose.getScene().getWindow();
        stage.close();


    }

    public void addFirmasAlPie(ActionEvent event) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("AgregarFirmas.fxml"));
            Parent proot = loader.load();


            Stage stage = new Stage();
            stage.setScene(new Scene(proot));
            stage.initModality(Modality.APPLICATION_MODAL);
            stage.setResizable(false);
            stage.toFront();
            stage.show();

            stage.setOnCloseRequest(event1 -> {
                ObservableList<String> fiemStrings = FXCollections.observableArrayList();
                fiemStrings = getFirmasList();
                comboConfecionado.setItems(fiemStrings);
                comboRevisado.setItems(fiemStrings);
                comboAprovado.setItems(fiemStrings);
            });

        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void getSalarioByUO() {
        if (comboObras.getValue() != null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null) {
            niveles = 0;
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null) {
            niveles = 0;
            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboZonas.getValue() != null && !comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null) {
            niveles = 0;
            niveles = 3;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && !comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null) {
            niveles = 0;
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 4;
        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 6;

        }

        //niveles convinados
        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 15;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 156;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 1256;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 12356;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 123456;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 123;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 1234;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue().equals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue().equals("Todas") && comboSubespecialidades.getValue().equals("Todas")) {
            niveles = 0;
            niveles = 1234569;
        }


        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }


        String Subquery = " FROM Unidadobra WHERE ";
        query.append(Subquery);
        query.append(subQObr);

        if (subQZon != null) {
            query.append(subQZon);
        }
        if (subQObj != null) {
            query.append(subQObj);
        }
        if (subQNiv != null) {
            query.append(subQNiv);
        }

        if (subQEsp != null) {
            query.append(subQEsp);
        }

        if (subQSub != null) {
            query.append(subQSub);
        }

        if (subQEmp != null) {
            query.append(subQEmp);
        }

        try {
            System.out.println("Salario: " + query.toString().trim());
            salarioReportModelArrayList = new ArrayList<>();
            salarioReportModelArrayList = cfr.getSalarioUO(reportesController, query.toString().trim(), niveles);

            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            date = LocalDate.now();
            parametros = new HashMap<>();
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            if (checkFecha.isSelected()) {
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            } else {
                parametros.put("fecha", " ");
            }
            int templete = 0;
            if (comboConfecionado.getValue() == null) {
                templete = 1;
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("reportName", "Salario Presupuestado");


            } else if (comboConfecionado.getValue() != null) {
                templete = 2;
                String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);

                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("conf", "Confeccionado: " + confe);
                parametros.put("rev", "Revisado: " + rev);
                parametros.put("aprub", "Aprobado: " + apro);
                parametros.put("reportName", "Salario Presupuestado");

            }


            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            salarioReportModelArrayList.sort(Comparator.comparing(SalarioReportModel::getEmpresa).thenComparing(SalarioReportModel::getZona).thenComparing(SalarioReportModel::getObjeto).thenComparing(SalarioReportModel::getNivel).thenComparing(SalarioReportModel::getEspecialidad).thenComparing(SalarioReportModel::getSubespecialidad));

            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.salarioReport(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(salarioReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.salarioReport(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(salarioReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                JasperViewer.viewReport(jp, false);
                exportarExcel(jp);
            }


        } catch (Exception ex) {
            ex.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.WARNING);
            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();
        }

    }

    private void getSalarioByUORV() {

        if (comboObras.getValue() != null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = "uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null) {
            niveles = 0;
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null) {
            niveles = 0;
            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboZonas.getValue() != null && !comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null) {
            niveles = 0;
            niveles = 3;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && !comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null) {
            niveles = 0;
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 4;
        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 6;

        }

        //niveles convinados
        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 15;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 156;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 1256;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 12356;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 123456;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 123;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 1234;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue().equals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue().equals("Todas") && comboSubespecialidades.getValue().equals("Todas")) {
            niveles = 0;
            niveles = 1234569;
        }


        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }


        String Subquery = " FROM Unidadobrarenglon ur INNER JOIN Unidadobra uo ON uo.id = ur.unidadobraId WHERE ";
        query.append(Subquery);
        query.append(subQObr);

        if (subQZon != null) {
            query.append(subQZon);
        }
        if (subQObj != null) {
            query.append(subQObj);
        }
        if (subQNiv != null) {
            query.append(subQNiv);
        }

        if (subQEsp != null) {
            query.append(subQEsp);
        }

        if (subQSub != null) {
            query.append(subQSub);
        }

        if (subQEmp != null) {
            query.append(subQEmp);
        }

        try {
            System.out.println(query.toString().trim());
            salarioUORVReportModelArrayList = new ArrayList<>();
            salarioUORVReportModelArrayList = cfr.getSalarioUORV(reportesController, query.toString().trim(), niveles);
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            date = LocalDate.now();
            parametros = new HashMap<>();
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            if (checkFecha.isSelected()) {
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            } else {
                parametros.put("fecha", " ");
            }
            int templete = 0;
            if (comboConfecionado.getValue() == null) {
                templete = 1;
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("reportName", "Salario Presupuestado");


            } else if (comboConfecionado.getValue() != null) {
                templete = 2;
                String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);

                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("conf", "Confeccionado: " + confe);
                parametros.put("rev", "Revisado: " + rev);
                parametros.put("aprub", "Aprobado: " + apro);
                parametros.put("reportName", "Salario Presupuestado");

            }


            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            salarioUORVReportModelArrayList.sort(Comparator.comparing(SalarioUORVReportModel::getEmpresa).thenComparing(SalarioUORVReportModel::getZona).thenComparing(SalarioUORVReportModel::getObjeto).thenComparing(SalarioUORVReportModel::getNivel).thenComparing(SalarioUORVReportModel::getEspecialidad).thenComparing(SalarioUORVReportModel::getSubespecialidad).thenComparing(SalarioUORVReportModel::getCodigo));

            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.salarioUORVReport(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(salarioUORVReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                JasperViewer.viewReport(jp, false);
            } else {
                DynamicReport dr = bdr.salarioUORVReport(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(salarioUORVReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                exportarExcel(jp);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.WARNING);
            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();
        }
    }

    /*
     *Certificaciones de salario
     */
    private void getSalarioByUOCertificacion() {
        if (comboObras.getValue() != null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null) {
            niveles = 0;
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null) {
            niveles = 0;
            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboZonas.getValue() != null && !comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null) {
            niveles = 0;
            niveles = 3;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && !comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null) {
            niveles = 0;
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 4;
        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 6;

        }

        //niveles convinados
        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 15;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 156;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 1256;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 12356;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 123456;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 123;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 1234;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue().equals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue().equals("Todas") && comboSubespecialidades.getValue().equals("Todas")) {
            niveles = 0;
            niveles = 1234569;
        }


        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND cert.desde >= '" + desdeDate.toString().trim() + "' AND cert.hasta <= '" + hastaData.toString().trim() + "'";

            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }


        String Subquery = " FROM Certificacion cert INNER JOIN Unidadobra uo ON cert.unidadobraId = uo.id  WHERE ";
        query.append(Subquery);
        query.append(subQObr);

        if (subQZon != null) {
            query.append(subQZon);
        }
        if (subQObj != null) {
            query.append(subQObj);
        }
        if (subQNiv != null) {
            query.append(subQNiv);
        }

        if (subQEsp != null) {
            query.append(subQEsp);
        }

        if (subQSub != null) {
            query.append(subQSub);
        }

        if (subQEmp != null) {
            query.append(subQEmp);
        }

        query.append(timeRestrictCert);

        try {
            System.out.println(query.toString().trim());
            salarioReportModelArrayList = new ArrayList<>();
            salarioReportModelArrayList = cfr.getSalarioUOCertificacion(reportesController, query.toString().trim(), niveles);

            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            date = LocalDate.now();
            parametros = new HashMap<>();
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            if (checkFecha.isSelected()) {
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            } else {
                parametros.put("fecha", " ");
            }
            int templete = 0;
            if (comboConfecionado.getValue() == null) {
                templete = 1;
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("reportName", "Salario desde : " + intervalo);


            } else if (comboConfecionado.getValue() != null) {
                templete = 2;
                String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);

                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("conf", "Confeccionado: " + confe);
                parametros.put("rev", "Revisado: " + rev);
                parametros.put("aprub", "Aprobado: " + apro);
                parametros.put("reportName", "Salario Presupuestado");

            }


            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            salarioReportModelArrayList.sort(Comparator.comparing(SalarioReportModel::getEmpresa).thenComparing(SalarioReportModel::getZona).thenComparing(SalarioReportModel::getObjeto).thenComparing(SalarioReportModel::getNivel).thenComparing(SalarioReportModel::getEspecialidad).thenComparing(SalarioReportModel::getSubespecialidad));

            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.salarioReport(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(salarioReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                JasperViewer.viewReport(jp, false);
            } else {
                parametros.put(JRParameter.IS_IGNORE_PAGINATION, Boolean.TRUE);
                DynamicReport dr = bdr.salarioReport(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(salarioReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                JasperViewer.viewReport(jp, false);
                exportarExcel(jp);
            }


        } catch (Exception ex) {
            ex.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.WARNING);
            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();
        }

    }

    private void getSalarioByUORVCertificacion() {
        if (comboObras.getValue() != null) {
            niveles = 0;
            partObras = comboObras.getValue().split(" - ");
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            ;

            niveles = 1;
        }

        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null) {
            niveles = 0;
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null) {
            niveles = 0;
            partZonas = comboZonas.getValue().split(" - ");
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            ;
            niveles = 2;
        }

        if (comboZonas.getValue() != null && !comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null) {
            niveles = 0;
            niveles = 3;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && !comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null) {
            niveles = 0;
            partObj = comboObjetos.getValue().split(" - ");
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            ;
            niveles = 3;

        }

        if (comboNivel.getValue() != null && comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            niveles = 4;

        } else if (comboNivel.getValue() != null && !comboNivel.getValue().contentEquals("Todos")) {
            niveles = 0;
            partNiv = comboNivel.getValue().split(" - ");
            //idObj = Integer.parseInt(partObj[0]);
            subQNiv = " AND uo.nivelId = " + reportProjectStructureSingelton.getIdNivelByToString(comboNivel.getValue());
            ;
            niveles = 4;
        }

        if (comboEspecialidades.getValue() != null && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 5;
        } else if (comboEspecialidades.getValue() != null && !comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partEsp = comboEspecialidades.getValue().split(" - ");
            //idEsp = Integer.parseInt(partEsp[0]);
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            ;

            niveles = 5;
        }

        if (comboSubespecialidades.getValue() != null && comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            niveles = 6;
        } else if (comboSubespecialidades.getValue() != null && !comboSubespecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            partSub = comboSubespecialidades.getValue().split(" - ");
            // idSub = Integer.parseInt(partSub[0]);
            subQSub = " AND uo.subespecialidadesId = " + reportProjectStructureSingelton.getIdSubespecialidadesByToString(comboSubespecialidades.getValue());
            ;
            ;
            niveles = 6;

        }

        //niveles convinados
        if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 15;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 125;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 1235;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() == null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 156;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() == null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 1256;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() == null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 12356;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboObjetos.getValue() != null && comboNivel.getValue() != null && comboEspecialidades.getValue() != null && comboSubespecialidades.getValue() != null) {
            niveles = 0;
            niveles = 123456;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue() == null && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 123;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue() == null && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 1234;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue().equals("Todas") && comboSubespecialidades.getValue() == null) {
            niveles = 0;
            niveles = 12345;
        } else if (comboObras.getValue() != null && comboZonas.getValue() != null && comboZonas.getValue().equals("Todas") && comboObjetos.getValue() != null && comboObjetos.getValue().equals("Todos") && comboNivel.getValue().equals("Todos") && comboEspecialidades.getValue().equals("Todas") && comboSubespecialidades.getValue().equals("Todas")) {
            niveles = 0;
            niveles = 1234569;
        }


        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
            ;
        }

        if (pickerDesde.getValue() == null || pickerHasta.getValue() == null) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setHeaderText("Información");
            alert.setContentText("Debe especificar un intervalo de tiempo para el informe");
            alert.showAndWait();
        } else {
            LocalDate dateDes = pickerDesde.getValue();
            LocalDate dateHast = pickerHasta.getValue();
            desdeDate = Date.valueOf(dateDes);
            hastaData = Date.valueOf(dateHast);
            timeRestrictCert = " AND ctr.fini >= '" + desdeDate.toString().trim() + "' AND ctr.ffin <= '" + hastaData.toString().trim() + "'";
            intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        }


        String Subquery = " FROM Certificacionrecuo ctr INNER JOIN Unidadobra uo ON ctr.unidadobraId = uo.id WHERE ctr.tipo = 'RV' AND ";
        query.append(Subquery);
        query.append(subQObr);

        if (subQZon != null) {
            query.append(subQZon);
        }
        if (subQObj != null) {
            query.append(subQObj);
        }
        if (subQNiv != null) {
            query.append(subQNiv);
        }

        if (subQEsp != null) {
            query.append(subQEsp);
        }

        if (subQSub != null) {
            query.append(subQSub);
        }

        if (subQEmp != null) {
            query.append(subQEmp);
        }

        query.append(timeRestrictCert);

        try {
            System.out.println(query.toString().trim());
            salarioUORVReportModelArrayList = new ArrayList<>();
            salarioUORVReportModelArrayList = cfr.getSalarioUORVCertificacion(reportesController, query.toString().trim(), niveles);
            int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            obra = reportProjectStructureSingelton.getObra(id);


            date = LocalDate.now();
            parametros = new HashMap<>();
            parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
            if (checkFecha.isSelected()) {
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
            } else {
                parametros.put("fecha", " ");
            }
            int templete = 0;
            if (comboConfecionado.getValue() == null) {
                templete = 1;
                parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("reportName", "Salario desde : " + intervalo);


            } else if (comboConfecionado.getValue() != null) {
                templete = 2;
                String confe = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboConfecionado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String apro = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboAprovado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);
                String rev = firmasList.parallelStream().filter(firmas -> firmas.getName().trim().equals(comboRevisado.getValue())).map(firmas -> firmas.getName() + "\n" + firmas.getCargo()).findFirst().orElse(null);

                parametros.put("empresa", empresa.getNombre());
                parametros.put("comercial", empresa.getComercial());
                parametros.put("image", "templete/logoReport.jpg");
                parametros.put("conf", "Confeccionado: " + confe);
                parametros.put("rev", "Revisado: " + rev);
                parametros.put("aprub", "Aprobado: " + apro);
                parametros.put("reportName", "Salario desde : " + intervalo);

            }

            tarea = createTime(50);
            stage = new ProgressDialog(tarea);
            stage.setContentText("Preparando el reporte...");
            stage.setTitle("Espere...");
            new Thread(tarea).start();
            stage.showAndWait();

            salarioUORVReportModelArrayList.sort(Comparator.comparing(SalarioUORVReportModel::getEmpresa).thenComparing(SalarioUORVReportModel::getZona).thenComparing(SalarioUORVReportModel::getObjeto).thenComparing(SalarioUORVReportModel::getNivel).thenComparing(SalarioUORVReportModel::getEspecialidad).thenComparing(SalarioUORVReportModel::getSubespecialidad).thenComparing(SalarioUORVReportModel::getCodigo));

            if (checkExp.isSelected() == false) {
                DynamicReport dr = bdr.salarioUORVReport(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(salarioUORVReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                JasperViewer.viewReport(jp, false);
            } else {
                DynamicReport dr = bdr.salarioUORVReport(reportesController, niveles);
                JRDataSource ds = new JRBeanCollectionDataSource(salarioUORVReportModelArrayList);
                JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
                JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
                exportarExcel(jp);
            }


        } catch (Exception ex) {
            ex.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.WARNING);
            VBox dialogPaneContent = new VBox();
            Label label = new Label("Error:");

            TextArea textArea = new TextArea();
            textArea.setText(ex.getMessage());
            dialogPaneContent.getChildren().addAll(label, textArea);
            alert.getDialogPane().setContent(dialogPaneContent);
            alert.showAndWait();
        }

    }

    private void createReportCLcertificacion() {
        myFlag = true;
        LocalDate dateDes = pickerDesde.getValue();
        LocalDate dateHast = pickerHasta.getValue();
        desdeDate = Date.valueOf(dateDes);
        hastaData = Date.valueOf(dateHast);
        timeRestrictCert = " AND ctr.desde >= '" + desdeDate.toString().trim() + "' AND ctr.hasta <= '" + hastaData.toString().trim() + "'";
        String restDesp = " AND desp.fecha >= '" + desdeDate.toString().trim() + "' AND desp.fecha <= '" + hastaData.toString().trim() + "'";
        intervalo = DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerDesde.getValue()) + " hasta " + DateTimeFormatter.ofPattern("dd/MM/YYYY").format(pickerHasta.getValue());
        query = new StringBuilder();

        if (comboObras.getValue() != null) {
            niveles = 0;
            subQObr = " uo.obraId = " + reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
            niveles = 1;
        }
        if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null && comboEspecialidades.getValue() == null) {
            niveles = 0;
            niveles = 2;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue() == null && comboEspecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            niveles = 2;
        } else if (comboZonas.getValue() != null && comboZonas.getValue().contentEquals("Todas") && comboObjetos.getValue().equals("Todos") && comboEspecialidades.getValue() == null) {
            niveles = 0;
            niveles = 3;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && comboEspecialidades.getValue() == null) {
            niveles = 0;
            subQZon = " AND uo.zonasId= " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            niveles = 3;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            niveles = 4;
        } else if (comboZonas.getValue() != null && !comboZonas.getValue().contentEquals("Todas") && !comboObjetos.getValue().equals("Todos") && !comboEspecialidades.getValue().contentEquals("Todas")) {
            niveles = 0;
            subQZon = " AND uo.zonasId = " + reportProjectStructureSingelton.getIdZonasByToString(comboZonas.getValue());
            subQObj = " AND uo.objetosId = " + reportProjectStructureSingelton.getIdObjetosByToString(comboObjetos.getValue());
            subQEsp = " AND uo.especialidadesId = " + reportProjectStructureSingelton.getIdEspecialidasByToString(comboEspecialidades.getValue());
            niveles = 4;
        }

        if (comboEmpresas.getValue() != null) {
            partEmp = comboEmpresas.getValue().split(" - ");
            subQEmp = " AND uo.empresaconstructoraId = " + reportProjectStructureSingelton.getIdEmpresaByToString(comboEmpresas.getValue());
        }

        select = "SELECT ec.codigo as codE, ec.descripcion as descE, zon.codigo as zonCode, zon.desripcion as zonDesc, obj.codigo as objCode, obj.descripcion as objDesc,  esp.codigo as codEs, esp.descripcion as desEs,  ";
        Subquery = "SUM(bajo.cantidad), SUM(bajo.cantidad * ctr.cantidad / uo.cantidad) as certif, SUM(desp.cantidad) as despachos, bajo.idSuministro, uo.obraId, uo.empresaconstructoraId, uo.zonasId, uo.objetosId, uo.especialidadesId FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos obj ON uo.objetosId = obj.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id INNER JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobraId INNER JOIN Certificacion ctr ON uo.id = ctr.unidadobraId INNER JOIN Despachoscl desp On uo.obraId = desp.obraId AND uo.empresaconstructoraId = desp.empresaId AND uo.zonasId = desp.zonaId AND uo.objetosId = desp.objetoId AND uo.especialidadesId = desp.especialidadId AND bajo.idSuministro = desp.suministroId WHERE  desp.valido = '1' AND ";
        group = " GROUP By ec.codigo, ec.descripcion, zon.codigo, zon.desripcion, obj.codigo, obj.descripcion,  esp.codigo, esp.descripcion, bajo.idSuministro, uo.obraId, uo.empresaconstructoraId, uo.zonasId, uo.objetosId, uo.especialidadesId";

        query.append(select);
        query.append(Subquery);
        query.append(subQObr);
        if (subQZon != null) {
            query.append(subQZon);
        }
        if (subQObj != null) {
            query.append(subQObj);
        }
        if (subQEsp != null) {
            query.append(subQEsp);
        }

        if (subQEmp != null) {
            query.append(subQEmp);
        }
        query.append(timeRestrictCert);
        query.append(restDesp);
        query.append(group);

        System.out.println(query.toString());

        List<ClCertifications> clCertificationsList = new ArrayList<>();
        clCertificationsList = cfr.getDatosClCertificacion(query.toString());
        for (ClCertifications clCertifications : clCertificationsList) {
            System.out.println(clCertifications.getDescripcion());
        }
        int id = reportProjectStructureSingelton.getIdObraByToString(comboObras.getValue());
        obra = reportProjectStructureSingelton.getObra(id);
        date = LocalDate.now();
        parametros = new HashMap<>();
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("obraName", obra.getCodigo() + " " + obra.getDescripion());
        parametros.put("fecha", DateTimeFormatter.ofPattern("dd/MM/YYYY").format(date));
        parametros.put("empresa", empresa.getNombre());
        parametros.put("comercial", empresa.getComercial());
        parametros.put("time", intervalo);
        parametros.put("reportName", "Certificación - Despachos Carta Límite ");
        parametros.put("image", "templete/logoReport.jpg");

        tarea = createTime(50);
        stage = new ProgressDialog(tarea);
        stage.setContentText("Preparando el reporte...");
        stage.setTitle("Espere...");
        new Thread(tarea).start();
        stage.showAndWait();
        garbage = Runtime.getRuntime();

        try {
            DynamicReport dr = bdr.reportClCertificaciones(reportesController);
            JRDataSource ds = new JRBeanCollectionDataSource(clCertificationsList);
            JasperReport jr = DynamicJasperHelper.generateJasperReport(dr, new ClassicLayoutManager(), parametros);
            JasperPrint jp = JasperFillManager.fillReport(jr, parametros, ds);
            JasperViewer.viewReport(jp, false);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public void handleDisableComponet(ActionEvent e) {
        if (othersOptions.getValue().trim().equals("Carta Limite - Certificación")) {
            comboSubespecialidades.setDisable(true);
            comboNivel.setDisable(true);
            pickerDesde.setDisable(false);
            pickerHasta.setDisable(false);
        } else {
            comboNivel.setDisable(false);
            comboSubespecialidades.setDisable(false);
            pickerDesde.setDisable(false);
            pickerHasta.setDisable(false);
        }
    }


}







