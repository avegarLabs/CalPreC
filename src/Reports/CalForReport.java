package Reports;

import javafx.scene.control.Alert;
import models.*;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.query.NativeQuery;

import javax.persistence.Query;
import javax.persistence.Tuple;
import java.math.BigDecimal;
import java.util.*;
import java.util.stream.Collectors;

public class CalForReport {

    public static Empresaconstructora empresaconstructora;
    private static SessionFactory sf;
    private static List<DatosSuministrosPropios> datosSuministrosPropiosList;
    private static double certCent;
    private static Unidadobrarenglon unidadobrarenglon;
    private static List<ConvenioMergeCriteria> identificationList;
    private static double volPlan;
    private static Empresaobrasalario empresaobrasalario;
    private static double tariafa;
    private static Coeficientesequipos coeficientesequipos;
    private static double salarioEq;
    private static Double volumen;
    private static double salarioMano;
    private static double salarioEquipo;
    private static double salario;
    private static double salCertificado;
    private static double volumenCertif;
    private static double mater;
    private static double manoOb;
    private static double equip;
    private static double valTotal;
    private static List<UOPlanCertConvModel> genericList;
    private static List<ConveniosGenericModel> datosList;
    private static Double hhCertificadas;
    private static Double hhCertVal;
    private static Double heCertificadas;
    private static Double heCertVal;
    public ArrayList<ConceptosReporte> listConceptos;
    public ArrayList<CertificacionOrigenUO> tempcertO;
    public ArrayList<CertificacionOrigenUOinRV> temCO;
    public ArrayList<PlanificacionMesUOinRV> collectionPlanUORV;
    public Double horas;
    public Double salariomn;
    public Double salariocuc;
    public double coeficienteEquipo;
    public double coeficienteMano;
    ReportProjectStructureSingelton structureSingelton = ReportProjectStructureSingelton.getInstance();
    UtilCalcSingelton util = UtilCalcSingelton.getInstance();
    double calEquipos;
    private ReportesController reportesController;
    private ArrayList<RenglonVarianteReportModel> renglonVarianteReportModelArrayList;
    private ArrayList<RenglonVarianteReportModelExtend> renglonVarianteReportModelExtendArrayList;
    private RenglonVarianteReportModel renglonVarianteReportModel;
    private ArrayList<RenglonVarianteReportModelRV> renglonVarianteReportModelRVArrayList;
    private RenglonVarianteReportModelRV renglonVarianteReportModelRV;
    private ArrayList<TotalReportModel> totalReportModelArrayList;
    private TotalReportModel totalReportModel;
    private ArrayList<TotalReportCertModel> totalReportCertModelArrayList;
    private TotalReportCertModel totalReportCertModel;
    private ArrayList<DatosReporteUO> datosReporteUOArrayList;
    private DatosReporteUO datosReporteUO;
    private ArrayList<PresupuestoUO> presupuestoUOArrayList;
    private PresupuestoUO presupuestoUO;
    private ArrayList<PresupuestoUORVN> presupuestoUORVNArrayList;
    private ArrayList<PresupuestoUORVNExtend> presupuestoUORVNExtendArrayList;
    private PresupuestoUORVN presupuestoUORVN;
    private ArrayList<Unidadobra> unidadobraArrayList;
    private ArrayList<UOReportModel> uoReportModelArrayList;
    private UOReportModel uoReportModel;
    private ArrayList<DatosCertificacionOrigen> datosCertificacionOrigenArrayList;
    private DatosCertificacionOrigen datosCertificacionOrigen;
    private ArrayList<CertificacionOrigenUO> certificacionOrigenUOArrayList;
    private CertificacionOrigenUO certificacionOrigenUO;
    private ArrayList<DatosCertificacionOrigenUORV> datosCertificacionOrigenUORVArrayList;
    private DatosCertificacionOrigenUORV datosCertificacionOrigenUORV;
    private ArrayList<CertificacionOrigenUOinRV> certificacionOrigenUOinRVArrayList;
    private CertificacionOrigenUOinRV certificacionOrigenUOinRV;
    private ArrayList<DatosPlanificacionMesUO> datosPlanificacionMesUOArrayList;
    private DatosPlanificacionMesUO datosPlanificacionMesUO;
    private ArrayList<PlanificacionMesUO> planificacionMesUOArrayList;
    private PlanificacionMesUO planificacionMesUO;
    private ArrayList<DatosPlanificacionMesUORV> planificacionMesUORVArrayList;
    private DatosPlanificacionMesUORV datosPlanificacionMesUORV;
    private ArrayList<PlanificacionMesUOinRV> planificacionMesUOinRVArrayList;
    private PlanificacionMesUOinRV planificacionMesUOinRV;
    private ArrayList<DatosCuantitativaModel> cuantitativaModelArrayList;
    private DatosCuantitativaModel cuantitativaModel;
    private ArrayList<DatosCuantitativaGenreralModel> cuantitativaGenreralModelArrayList;
    private ArrayList<DatosCuantitativaGenreralModelCertificacion> cuantitativaGenreralModelCertificacionArrayList;
    private DatosCuantitativaGenreralModel datosCuantitativaGenreralModel;
    private ArrayList<DatosCuantitativaModelCert> cuantitativaModelCertsArrayList;
    private DatosCuantitativaModelCert datosCuantitativaModelCert;
    private ArrayList<CuantitativaModel> cuantitativaModelsReArrayList;
    private CuantitativaModel cuantitativa;
    private ArrayList<CuantitativaModelToCERT> cuantitativaModelToCERTArrayList;
    private CuantitativaModelToCERT cuantitativaModelToCERT;
    private ArrayList<FondoHorarioExplotacionModel> fondoHorarioExplotacionModels;
    private FondoHorarioExplotacionModel fondoHorarioExplotacionModel;
    private ArrayList<DatosCuantitativaUOGRUPModel> datosCuantitativaUOGRUPModelArrayList;
    private DatosCuantitativaUOGRUPModel datosCuantitativaUOGRUPModel;
    private ArrayList<CuantitativaUOGROUPModel> cuantitativaUOGROUPModelArrayList;
    private CuantitativaUOGROUPModel cuantitativaUOGROUPModel;
    private ArrayList<CertificoModel> certificoModelArrayList;
    private CertificoModel certificoModel;
    private List<ConveniosReportModel> conveniosReportModelArrayList;
    private ConveniosReportModel conveniosReportModel;
    private ArrayList<UOPlanCertConvModel> datUoPlanCertConvModelArrayList;
    private UOPlanCertConvModel uoPlanCertConvModel;
    private List<RecursosConvenioModel> recursosConvenioModelArrayList;
    private RecursosConvenioModel recursosConvenioModel;
    private Double materiales;
    private Double mano;
    private Double equipo;
    private Double cantRV;
    private Double mateRV;
    private Double manoRV;
    private Double equpRV;
    private String rvcode;
    private String rvdesc;
    private String rvum;
    private Integer recId;
    private String recCodigo;
    private String recdescrp;
    private String recUM;
    private String recCant;
    private String rrecCostMat;
    private String tipo;
    private double concept4;
    private double concept5;
    private double concept6;
    private double concept7;
    private double concept8;
    private double concept9;
    private double concept10;
    private double concept11;
    private double concept12;
    private double concept13;
    private double concept14;
    private double concept15;
    private double concept16;
    private double concept17;
    private double concept18;
    private double concept19;
    private double concept20;
    private double tempValue;
    private Double valMateriales;
    private Double totalCalc;
    private StringBuilder brigBuilder;
    private StringBuilder grupBuilder;
    private StringBuilder cuadBuilder;
    private ArrayList<ResumenSubReport> resumenSubReportArrayList;
    private ResumenSubReport resumenSubReport;
    private Juegoproducto juegoproducto;
    private Suministrossemielaborados suministrossemielaborados;
    private Double[] gastosDirectos;
    private ArrayList<SalarioReportModel> salarioReportModelArrayList;
    private SalarioReportModel sa;
    private ArrayList<SalarioUORVReportModel> salarioUORVReportModelArrayList;
    private SalarioUORVReportModel salarioUORVReportModel;
    private ArrayList<ParaBajoEspecificacionCuantitativaModel> paraBajoEspecificacionCuantitativaModelArrayList;
    private ParaBajoEspecificacionCuantitativaModel paraBajoEspecificacionCuantitativaModel;
    private List<UOPlanCertConvModel> uoPlanCertConvModelArrayList;
    private UOPlanCertConvModel planCertConvModel;
    private Double preciomlc;
    private Recursos recursos;
    private Runtime garbage;
    private StringBuilder uoconcat;
    private Double total;
    private List<RecursosVolumen> recursosVolumenList;
    private double cantUO;
    private double facCoef;
    /**
     * Plan del mes para los renglones
     */
    private String cuadrilla;
    private ArrayList<GroupToReport> groupToReportsArrayList;
    private ArrayList<PresupuestoUO> temp;
    private ArrayList<PresupuestoUORVN> temp2;
    private ArrayList<PresupuestoUORVNExtend> tempExtendArrayList;
    private ArrayList<PlanificacionMesUO> tempplan;
    private Double[] valuesGastosDirectos;
    private ConceptosReporte concept;
    private Double tempVal;
    private Double val;
    /**
     * Para el calculos de los coeficientes de la mano de obra y los equipos en una empresa
     *
     * @param idEmpresa
     * @return
     */

    private Double[] valCoeficientes;
    /**
     * para la cuantitativa
     */

    private StringBuilder empresaBild;
    private StringBuilder zonaBild;
    private StringBuilder objetoBild;
    private StringBuilder nivelBild;
    private StringBuilder especialidadBild;
    private StringBuilder subBild;
    /**
     * Pra el consolidado fuerza de trabajo y materiales
     */

    private ArrayList<DatosCuantitativaModelVGES> datosCuantitativaModelVGESArrayList;
    private ArrayList<RecComponetsModel> arrayListComponets;
    private RecComponetsModel recComponetsModel;
    private ArrayList<CuantitativaModel> tempCuanti;
    private ArrayList<CuantitativaModelToCERT> tempCuantitoCert;
    private Double calculate;
    /**
     * para la cuantitativa agrupando por unidades de ObraPCW
     */
    private StringBuilder uocode;
    private String matTipo;
    /**
     * para la cuantitativa Agrupado por UO -> Materiales
     */

    private String code;
    private String descrip;
    private String um;
    private double precio;
    private ArrayList<CuantitativaUOGROUPModel> tempCuantitat;
    private Empresaobrasalario empresaObraSalarioCalculo;
    private Coeficientesequipos coeficiente;
    private ArrayList<ImpactoReportModel> impactoReportModels;
    private Double sal30;
    private Double sal15;
    private Double impacto;
    private Double ta15;
    private Double ta30;
    private ArrayList<ObraRengVReport> datosObraRenglon;
    private List<GroupToReport> listEmpresas;
    private TarifaSalarialRepository tarifaSalarialRepository = TarifaSalarialRepository.getInstance();
    /**
     * para el calculo de los convenios
     */

    private List<ConveniosGenericModel> conveniosGenericModelList;
    private List<ResumenHH> resumenHHList;

    private static UOPlanCertConvModel compareAvariant(ConvenioMergeCriteria
                                                               val, List<UOPlanCertConvModel> temp1, List<UOPlanCertConvModel> temp2) {
        UOPlanCertConvModel model = null;
        UOPlanCertConvModel opt1 = temp1.parallelStream().filter(iten -> iten.getIdBrigada() == val.getIdBrig() && iten.getIdGrupo() == val.getIdGrup() && iten.getIdCuadrilla() == val.getIdCuad() && iten.getUoCode().trim().equals(val.getCodeUO().trim())).findFirst().orElse(null);
        UOPlanCertConvModel opt2 = temp2.parallelStream().filter(iten -> iten.getIdBrigada() == val.getIdBrig() && iten.getIdGrupo() == val.getIdGrup() && iten.getIdCuadrilla() == val.getIdCuad() && iten.getUoCode().trim().equals(val.getCodeUO().trim())).findFirst().orElse(null);
        if (opt1 != null && opt2 == null) {
            model = opt1;
        } else if (opt1 == null && opt2 != null) {
            model = opt2;
        } else {
            model = new UOPlanCertConvModel(opt1.getIdBrigada(), opt1.getIdGrupo(), opt1.getIdCuadrilla(), opt1.getUoCode(), opt1.getUoDescrip(), opt1.getPlnVolumen(), opt1.getPlnHoras(), opt1.plnSalario, opt1.getPlnSalarioInc(), opt1.getPlnProduccion(), opt2.getCrtVolumen(), opt2.getCrtHoras(), opt2.getCrtSalario(), opt2.getCrtSalarioInc(), opt2.getCrtProduccion(), opt1.getAprobado());
        }
        return model;
    }

    private static Double getUnidadObraValuesSalario(int idUnidad, String f1, String f2, int idB) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            List<Unidadobrarenglon> unidadobrarenglonList = session.createQuery(" FROM Unidadobrarenglon WHERE unidadobraId =: idU").setParameter("idU", idUnidad).getResultList();
            salCertificado = 0.0;
            salario = 0.0;
            volumenCertif = 0.0;
            for (Unidadobrarenglon unidadobrarenglon : unidadobrarenglonList) {
                salario = getSalarioInRV(unidadobrarenglon);
                salCertificado += salario * unidadobrarenglon.getCantRv() / unidadobrarenglon.getUnidadobraByUnidadobraId().getCantidad();
            }
            tx.commit();
            session.close();

            return salCertificado;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }

        return salCertificado;
    }

    private static double getCantcertificadaRec(String query, String empCode, String zonaCode, String objCode, String nivCode, String espCode, String subCode, int idR) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            List<Tuple> dataCalc = session.createQuery(query, Tuple.class).getResultList();
            if (empCode != null && zonaCode == null && objCode == null && nivCode == null && espCode == null && subCode == null) {
                certCent = dataCalc.parallelStream().filter(tuple -> tuple.get(0).toString().trim().equals(empCode.trim()) && Integer.parseInt(tuple.get(2).toString().trim()) == idR).map(tuple -> Double.parseDouble(tuple.get(3).toString().trim())).reduce(0.0, Double::sum);
            } else if (empCode != null && zonaCode != null && objCode == null && nivCode == null && espCode == null && subCode == null) {
                certCent = dataCalc.parallelStream().filter(tuple -> tuple.get(0).toString().trim().equals(empCode.trim()) && tuple.get(2).toString().trim().equals(zonaCode.trim()) && Integer.parseInt(tuple.get(4).toString().trim()) == idR).map(tuple -> Double.parseDouble(tuple.get(5).toString().trim())).reduce(0.0, Double::sum);
            } else if (empCode != null && zonaCode != null && objCode != null && nivCode == null && espCode == null && subCode == null) {
                certCent = dataCalc.parallelStream().filter(tuple -> tuple.get(0).toString().trim().equals(empCode.trim()) && tuple.get(2).toString().trim().equals(zonaCode.trim()) && tuple.get(4).toString().trim().equals(objCode.trim()) && Integer.parseInt(tuple.get(6).toString().trim()) == idR).map(tuple -> Double.parseDouble(tuple.get(7).toString().trim())).reduce(0.0, Double::sum);
            } else if (empCode != null && zonaCode != null && objCode != null && nivCode != null && espCode == null && subCode == null) {
                certCent = dataCalc.parallelStream().filter(tuple -> tuple.get(0).toString().trim().equals(empCode.trim()) && tuple.get(2).toString().trim().equals(zonaCode.trim()) && tuple.get(4).toString().trim().equals(objCode.trim()) && tuple.get(8).toString().trim().equals(nivCode.trim()) && Integer.parseInt(tuple.get(10).toString().trim()) == idR).map(tuple -> Double.parseDouble(tuple.get(11).toString().trim())).reduce(0.0, Double::sum);
            } else if (empCode != null && zonaCode != null && objCode != null && nivCode != null && espCode != null && subCode == null) {
                certCent = dataCalc.parallelStream().filter(tuple -> tuple.get(0).toString().trim().equals(empCode.trim()) && tuple.get(2).toString().trim().equals(zonaCode.trim()) && tuple.get(4).toString().trim().equals(objCode.trim()) && tuple.get(8).toString().trim().equals(nivCode.trim()) && tuple.get(10).toString().trim().equals(espCode.trim()) && Integer.parseInt(tuple.get(12).toString().trim()) == idR).map(tuple -> Double.parseDouble(tuple.get(13).toString().trim())).reduce(0.0, Double::sum);
            } else if (empCode != null && zonaCode != null && objCode != null && nivCode != null && espCode != null && subCode != null) {
                certCent = dataCalc.parallelStream().filter(tuple -> tuple.get(0).toString().trim().equals(empCode.trim()) && tuple.get(2).toString().trim().equals(zonaCode.trim()) && tuple.get(4).toString().trim().equals(objCode.trim()) && tuple.get(8).toString().trim().equals(nivCode.trim()) && tuple.get(10).toString().trim().equals(espCode.trim()) && tuple.get(12).toString().trim().equals(subCode.trim()) && Integer.parseInt(tuple.get(14).toString().trim()) == idR).map(tuple -> Double.parseDouble(tuple.get(15).toString().trim())).reduce(0.0, Double::sum);
            }
            tx.commit();
            session.close();
            return certCent;
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();
        } finally {
            session.close();
        }
        return certCent;
    }

    private static List<ConveniosGenericModel> createGenericModel(String query, String query2) {
        Session session = ConnectionModel.createAppConnection().openSession();
        System.out.println("Q1: " + query.toString());
        System.out.println("Q2: " + query2.toString());
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            datosList = new ArrayList<>();
            List<Object[]> datos = session.createQuery(query).getResultList();
            for (Object[] row : datos) {
                datosList.add(new ConveniosGenericModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), Integer.parseInt(row[3].toString().trim()), row[4].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[7].toString().trim() + " " + row[8].toString().trim(), Integer.parseInt(row[9].toString().trim()), row[10].toString().trim() + " " + row[11].toString().trim()));
            }
            List<Object[]> datos2 = session.createQuery(query2).getResultList();
            for (Object[] row : datos2) {
                datosList.add(new ConveniosGenericModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), Integer.parseInt(row[3].toString().trim()), row[4].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[7].toString().trim() + " " + row[8].toString().trim(), Integer.parseInt(row[9].toString().trim()), row[10].toString().trim() + " " + row[11].toString().trim()));
            }
            List<ConveniosGenericModel> data = datosList.parallelStream().collect(Collectors.toSet()).stream().collect(Collectors.toList());
            tx.commit();
            session.close();
            return data.parallelStream().collect(Collectors.toSet()).stream().collect(Collectors.toList());
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();
    }

    private static double gerResumenHHCertificadas(int idOB, int idEmp, int idZ, int idO, int idN, int idE,
                                                   int idSu) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            hhCertificadas = 0.0;
            Query query = session.createQuery(" SELECT SUM(rvr.cantidas * uor.cantRv) FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id  INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id WHERE rec.tipo = '2' AND uo.obraId =: idOb AND uo.empresaconstructoraId =: idEm AND uo.zonasId =: idZo AND uo.objetosId =: idObj AND uo.nivelId =: idN AND uo.especialidadesId =: idEs AND uo.subespecialidadesId =: idSub").setParameter("idOb", idOB).setParameter("idEm", idEmp).setParameter("idZo", idZ).setParameter("idObj", idO).setParameter("idN", idN).setParameter("idEs", idE).setParameter("idSub", idSu);
            if (query.getResultList().get(0) == null) {
                hhCertificadas = 0.0;
            } else {
                hhCertificadas = (Double) query.getResultList().get(0);
            }

            tx.commit();
            session.close();
            return hhCertificadas;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return hhCertificadas;
    }

    private static double gerResumenHeCertificadas(int idOB, int idEmp, int idZ, int idO, int idN, int idE,
                                                   int idSu) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            heCertificadas = 0.0;
            Query query = session.createQuery(" SELECT SUM(rvr.cantidas * uor.cantRv) FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id  INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id WHERE rec.tipo = '3' AND uo.obraId =: idOb AND uo.empresaconstructoraId =: idEm AND uo.zonasId =: idZo AND uo.objetosId =: idObj AND uo.nivelId =: idN AND uo.especialidadesId =: idEs AND uo.subespecialidadesId =: idS").setParameter("idOb", idOB).setParameter("idEm", idEmp).setParameter("idZo", idZ).setParameter("idObj", idO).setParameter("idN", idN).setParameter("idEs", idE).setParameter("idS", idSu);
            if (query.getResultList().get(0) == null) {
                heCertificadas = 0.0;
            } else {
                heCertificadas = (Double) query.getResultList().get(0);
            }


            tx.commit();
            session.close();
            return heCertificadas;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return heCertificadas;
    }

    private static List<ConvenioMergeCriteria> getUnikList(List<UOPlanCertConvModel> temp1, List<UOPlanCertConvModel> temp2) {
        identificationList = new ArrayList<>();
        for (UOPlanCertConvModel certConvModel : temp1) {
            identificationList.add(new ConvenioMergeCriteria(certConvModel.getIdBrigada(), certConvModel.getIdGrupo(), certConvModel.getIdCuadrilla(), certConvModel.getUoCode()));
        }
        for (UOPlanCertConvModel certConvModel : temp2) {
            identificationList.add(new ConvenioMergeCriteria(certConvModel.getIdBrigada(), certConvModel.getIdGrupo(), certConvModel.getIdCuadrilla(), certConvModel.getUoCode()));
        }
        return identificationList.parallelStream().distinct().collect(Collectors.toList());

    }

    private static List<UOPlanCertConvModel> conveniosMergeList
            (List<UOPlanCertConvModel> temp1, List<UOPlanCertConvModel> temp2) {
        genericList = new ArrayList<>();
        List<ConvenioMergeCriteria> convenioMergeCriteriaList = getUnikList(temp1, temp2);

        for (ConvenioMergeCriteria convenioMergeCriteria : convenioMergeCriteriaList) {
            genericList.add(compareAvariant(convenioMergeCriteria, temp1, temp2));
        }
        genericList.sort(Comparator.comparing(UOPlanCertConvModel::getIdBrigada).thenComparing(UOPlanCertConvModel::getIdGrupo).thenComparing(UOPlanCertConvModel::getIdCuadrilla));
        // for (UOPlanCertConvModel uoPlanCertConvModel : genericList) {
        //   System.out.println(uoPlanCertConvModel.getIdBrigada()  + " >> " + uoPlanCertConvModel.getIdGrupo() + " >>> " + uoPlanCertConvModel.getIdCuadrilla() + " -- " + uoPlanCertConvModel.getUoCode() );
        //}
        return genericList;
    }

    private static List<DatosSuministrosPropios> getDatosSuministrosPropiosList(String query) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            datosSuministrosPropiosList = new ArrayList<>();
            List<Tuple> renglonesList = session.createQuery(query, Tuple.class).getResultList();
            for (Tuple tuple : renglonesList) {
                double cant = Double.parseDouble(tuple.get(0).toString().trim());
                List<Renglonrecursos> components = getRenglonvariante(Integer.parseInt(tuple.get(1).toString().trim())).getRenglonrecursosById();
                List<Renglonsemielaborados> renglonsemielaborados = getRenglonvariante(Integer.parseInt(tuple.get(1).toString().trim())).getRenglonsemielaboradosById();
                if (components.size() > 0) {
                    for (Renglonrecursos component : components.parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("1")).collect(Collectors.toList())) {
                        double matCant = cant * component.getCantidas();
                        double costo = matCant * component.getRecursosByRecursosId().getPreciomn();
                        datosSuministrosPropiosList.add(new DatosSuministrosPropios(component.getRecursosByRecursosId().getCodigo(), component.getRecursosByRecursosId().getDescripcion(), component.getRecursosByRecursosId().getUm(), "Materiales", matCant, component.getRecursosByRecursosId().getPreciomn(), component.getRecursosByRecursosId().getPreciomlc(), costo));
                    }
                }
                if (renglonsemielaborados.size() > 0) {
                    for (Renglonsemielaborados component : renglonsemielaborados) {
                        double matCant = cant * component.getCantidad();
                        double costo = matCant * component.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                        datosSuministrosPropiosList.add(new DatosSuministrosPropios(component.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), component.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), component.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", matCant, component.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), component.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomlc(), costo));
                    }
                }
            }
            tx.commit();
            session.close();
            return datosSuministrosPropiosList.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList());

        } catch (Exception e) {

        }
        return new ArrayList<>();
    }

    private static Renglonvariante getRenglonvariante(int idR) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            Renglonvariante renglon = session.get(Renglonvariante.class, idR);

            tx.commit();
            session.close();
            return renglon;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        session.close();
        return new Renglonvariante();
    }

    private static double gerResumenHHCertVal(int idOB, int idEmp, int idZ, int idO, int idN, int idE,
                                              int idSu) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            hhCertVal = 0.0;
            Query query = session.createQuery(" SELECT SUM(cert.cantidad) FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id  INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId INNER JOIN Recursos rec ON cert.recursoId = rec.id WHERE rec.tipo = '2' AND uo.obraId =: idOb AND uo.empresaconstructoraId =: idEm AND uo.zonasId =: idZo AND uo.objetosId =: idObj AND uo.nivelId =: idN AND uo.especialidadesId =: idEs AND uo.subespecialidadesId =: idS").setParameter("idOb", idOB).setParameter("idEm", idEmp).setParameter("idZo", idZ).setParameter("idObj", idO).setParameter("idN", idN).setParameter("idEs", idE).setParameter("idS", idSu);
            if (query.getResultList().get(0) == null) {
                hhCertVal = 0.0;
            } else {
                hhCertVal = (Double) query.getResultList().get(0);
            }

            tx.commit();
            session.close();
            return hhCertVal;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return hhCertVal;
    }

    private static double getVolumenCertificadoRV(int idUO, int idRV, String f1, String f2, int idBr) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();


            String rest = " AND fini >= '" + f1 + "' AND ffin <= '" + f2 + "'";

            Query query = session.createQuery("SELECT SUM(cantidad) FROM Certificacionrecuo WHERE unidadobraId =: unid  AND renglonId =: idR AND certificacionId =:idCe  " + rest).setParameter("unid", idUO).setParameter("idR", idRV).setParameter("idCe", idBr);
            if (query.getResultList().get(0) == null) {
                volumen = 0.0;
            } else {
                volumen = (Double) query.getResultList().get(0);
            }

            tx.commit();
            session.close();
            return volumen;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }

        return volumen;
    }

    private static double getVolumenCertificadoRVPlan(int idUO, int idRV, String f1, String f2, int idBr) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            String rest = " AND fini >= '" + f1 + "' AND ffin <= '" + f2 + "'";
            volumen = 0.0;
            Query query = session.createQuery("SELECT SUM(cantidad) FROM Planrecuo WHERE unidadobraId =: unid  AND renglonId =: idR AND planId =:idCe  " + rest).setParameter("unid", idUO).setParameter("idR", idRV).setParameter("idCe", idBr);
            if (query.getResultList().get(0) == null) {
                volumen = 0.0;
            } else {
                volumen = (Double) query.getResultList().get(0);
            }
            tx.commit();
            session.close();
            return volumen;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }

        return volumen;
    }

    private static Double getValorSalario(int idEm, int idObra, String grupo) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            tariafa = 0.0;
            Empresaobratarifa empresaobratarifa = (Empresaobratarifa) session.createQuery("FROM Empresaobratarifa WHERE obraId =: obId AND empresaconstructoraId =: empId AND grupo =: grup").setParameter("obId", idObra).setParameter("empId", idEm).setParameter("grup", grupo.trim()).getSingleResult();
            tariafa = empresaobratarifa.getEscala();
            tx.commit();
            session.close();
            return tariafa;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return tariafa;
    }

    private static double gerResumenHeCertVal(int idOB, int idEmp, int idZ, int idO, int idN, int idE,
                                              int idSu) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            heCertVal = 0.0;
            Query query = session.createQuery(" SELECT SUM(cert.cantidad) FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos ob ON uo.objetosId = ob.id INNER JOIN Nivel niv ON uo.nivelId = niv.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id  INNER JOIN Certificacionrecuo cert ON uo.id = cert.unidadobraId INNER JOIN Recursos rec ON cert.recursoId = rec.id WHERE rec.tipo = '3' AND uo.obraId =: idOb AND uo.empresaconstructoraId =: idEm AND uo.zonasId =: idZo AND uo.objetosId =: idObj AND uo.nivelId =: idN AND uo.especialidadesId =: idEs AND uo.subespecialidadesId =: idS ").setParameter("idOb", idOB).setParameter("idEm", idEmp).setParameter("idZo", idZ).setParameter("idObj", idO).setParameter("idN", idN).setParameter("idEs", idE).setParameter("idS", idSu);
            if (query.getResultList().get(0) == null) {
                heCertVal = 0.0;
            } else {
                heCertVal = (Double) query.getResultList().get(0);
            }

            tx.commit();
            session.close();
            return heCertVal;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return heCertVal;
    }

    private static Double getValorSalarioTotal(int idEm, int idObra, String grupo) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            tariafa = 0.0;
            Empresaobratarifa empresaobratarifa = (Empresaobratarifa) session.createQuery("FROM Empresaobratarifa WHERE obraId =: obId AND empresaconstructoraId =: empId AND grupo =: grup").setParameter("obId", idObra).setParameter("empId", idEm).setParameter("grup", grupo.trim()).getSingleResult();
            tariafa = empresaobratarifa.getTarifa();
            tx.commit();
            session.close();
            return tariafa;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return tariafa;
    }

    private static Double getUnidadObraValuesSalarioPlan(int idUnidad, String f1, String f2, int idB) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            List<Unidadobrarenglon> unidadobrarenglonList = session.createQuery(" FROM Unidadobrarenglon WHERE unidadobraId =: idU").setParameter("idU", idUnidad).getResultList();
            salCertificado = 0.0;
            salario = 0.0;
            volumenCertif = 0.0;
            for (Unidadobrarenglon unidadobrarenglon : unidadobrarenglonList) {
                //volumenCertif = getVolumenCertificadoRVPlan(unidadobrarenglon.getUnidadobraId(), unidadobrarenglon.getRenglonvarianteId(), f1, f2, idB);
                salario = getSalarioInRV(unidadobrarenglon);
                // salCertificado += volumenCertif * salario;
                salCertificado += salario * unidadobrarenglon.getCantRv() / unidadobrarenglon.getUnidadobraByUnidadobraId().getCantidad();
            }
            tx.commit();
            session.close();
            return salCertificado;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }

        return salCertificado;
    }

    private static Double getVolumenPlanificado(int parseInt, String f1, String f2) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            volPlan = 0.0;
            String rest = " AND desde >= '" + f1 + "' AND hasta <= '" + f2 + "'";
            List<Planificacion> cantidades = session.createQuery(" FROM Planificacion WHERE unidadobraId =: unid " + rest).setParameter("unid", parseInt).getResultList();
            volPlan = cantidades.parallelStream().map(Planificacion::getCantidad).reduce(0.0, Double::sum);

            tx.commit();
            session.close();
            return volPlan;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return volPlan;
    }

    private static Double salarioInEquipo(int obra, int emp, int equip) {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            List<Coeficientesequipos> datos = session.createQuery("FROM Coeficientesequipos WHERE obraId =: idOb AND empresaconstructoraId =: idEm AND recursosId =: idRec").setParameter("idOb", obra).setParameter("idEm", emp).setParameter("idRec", equip).getResultList();
            if (!datos.isEmpty()) {
                coeficientesequipos = datos.get(0);
                salarioEq = coeficientesequipos.getSalario();
            }
            tx.commit();
            session.close();
            return salarioEq;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
        return salarioEq;
    }

    private static List<Renglonrecursos> getRenglonrecursos(int idRen) {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            List<Renglonrecursos> renglonrecursosList = new ArrayList<>();
            renglonrecursosList = session.createQuery("FROM Renglonrecursos WHERE renglonvarianteId=: idR").setParameter("idR", idRen).getResultList();
            tx.commit();
            session.close();
            return renglonrecursosList;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();
    }

    private static double getVolumenPlanificadoRV(int idUO, int idRV, String f1, String f2) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            String rest = " AND fini >= '" + f1 + "' AND ffin <= '" + f2 + "'";
            volumen = 0.0;
            List<Planrecuo> planes = new ArrayList<>();
            planes = session.createQuery(" FROM Planrecuo WHERE unidadobraId =: unid  AND renglonId =: idR" + rest).setParameter("unid", idUO).setParameter("idR", idRV).getResultList();
            volumen = planes.parallelStream().map(Planrecuo::getCantidad).reduce(0.0, Double::sum);

            tx.commit();
            session.close();
            return volumen;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }

        return volumen;
    }

    private static double getSalarioInRV(Unidadobrarenglon unidadobrarenglon) {
        List<Renglonrecursos> recursos = new ArrayList<>();
        recursos = getRenglonrecursos(unidadobrarenglon.getRenglonvarianteId());
        salarioMano = 0.0;
        salarioEquipo = 0.0;
        for (Renglonrecursos recurso : recursos) {
            if (recurso.getRecursosByRecursosId().getTipo().equals("2")) {
                salarioMano += recurso.getCantidas() * getValorSalario(unidadobrarenglon.getUnidadobraByUnidadobraId().getEmpresaconstructoraId(), unidadobrarenglon.getUnidadobraByUnidadobraId().getObraId(), recurso.getRecursosByRecursosId().getGrupoescala());
            } else if (recurso.getRecursosByRecursosId().getTipo().equals("3")) {
                salarioEquipo += recurso.getCantidas() * salarioInEquipo(unidadobrarenglon.getUnidadobraByUnidadobraId().getObraId(), unidadobrarenglon.getUnidadobraByUnidadobraId().getEmpresaconstructoraId(), recurso.getRecursosId());
            }
        }
        return salarioMano + salarioEquipo;
    }

    private static Empresaconstructora getEmpresaconstructora(int idBrig) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            Brigadaconstruccion brigadaconstruccion = session.get(Brigadaconstruccion.class, idBrig);
            empresaconstructora = null;
            empresaconstructora = brigadaconstruccion.getEmpresaconstructoraByEmpresaconstructoraId();

            tx.commit();
            session.close();
            return empresaconstructora;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }

        return empresaconstructora;
    }

    private static double getTotalPlan(int parseInt, String f1, String f2) {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            mater = 0.0;
            manoOb = 0.0;
            equip = 0.0;
            valTotal = 0.0;
            String rest = " AND desde >= '" + f1 + "' AND hasta <= '" + f2 + "'";
            List<Planificacion> cantidades = session.createQuery(" FROM Planificacion WHERE unidadobraId =: unid " + rest).setParameter("unid", parseInt).getResultList();
            mater = cantidades.parallelStream().map(Planificacion::getCostomaterial).reduce(0.0, Double::sum);
            manoOb = cantidades.parallelStream().map(Planificacion::getCostomano).reduce(0.0, Double::sum);
            equip = cantidades.parallelStream().map(Planificacion::getCostoequipo).reduce(0.0, Double::sum);
            valTotal = mater + manoOb + equip;
            tx.commit();
            session.close();
            return valTotal;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return valTotal;
    }

    public Recursos getRecursosa(int idSuminitros) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            recursos = session.get(Recursos.class, idSuminitros);

            tx.commit();
            session.close();
            return recursos;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return recursos;
    }

    public Juegoproducto getJuegoproducto(int idSuminitros) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            juegoproducto = session.get(Juegoproducto.class, idSuminitros);

            tx.commit();
            session.close();
            return juegoproducto;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return juegoproducto;

    }

    public Suministrossemielaborados getSuministrossemielaborados(int idSuminitros) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            suministrossemielaborados = session.get(Suministrossemielaborados.class, idSuminitros);

            tx.commit();
            session.close();
            return suministrossemielaborados;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return suministrossemielaborados;
    }

    public ArrayList<UOReportModel> getUnidadObraList(ReportesController reportes, String query) {
        reportesController = reportes;
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            uoReportModelArrayList = new ArrayList<>();
            unidadobraArrayList = (ArrayList<Unidadobra>) session.createQuery(query).getResultList();
            List<Unidadobra> listUnidad = unidadobraArrayList.parallelStream().filter(unidad -> unidad.getCantidad() > 0 && unidad.getRenglonbase() != null).collect(Collectors.toList());
            for (Unidadobra unidadobra : listUnidad) {
                double cMaterial = calcCostoMaterialUO(unidadobra.getUnidadobrabajoespecificacionById().stream().collect(Collectors.toList()));
                double cMatR = unidadobra.getUnidadobrarenglonsById().parallelStream().map(Unidadobrarenglon::getCostMat).reduce(0.0, Double::sum);
                double costoMateReal = cMaterial + cMatR;
                double cManoOK = unidadobra.getCostomano();
                double cEqOK = unidadobra.getCostoequipo();
                double costoTotal = costoMateReal + cManoOK + cEqOK;
                uoReportModelArrayList.add(new UOReportModel(unidadobra.getEmpresaconstructoraId(), unidadobra.getEmpresaconstructoraByEmpresaconstructoraId().getCodigo() + " - " + unidadobra.getEmpresaconstructoraByEmpresaconstructoraId().getDescripcion(), unidadobra.getZonasId(), unidadobra.getZonasByZonasId().getCodigo() + " - " + unidadobra.getZonasByZonasId().getDesripcion(), unidadobra.getObjetosId(), unidadobra.getObjetosByObjetosId().getCodigo() + " - " + unidadobra.getObjetosByObjetosId().getDescripcion(), unidadobra.getNivelId(), unidadobra.getNivelByNivelId().getCodigo() + " - " + unidadobra.getNivelByNivelId().getDescripcion(), unidadobra.getEspecialidadesId(), unidadobra.getEspecialidadesByEspecialidadesId().getCodigo() + " - " + unidadobra.getEspecialidadesByEspecialidadesId().getDescripcion(), unidadobra.getSubespecialidadesId(), unidadobra.getSubespecialidadesBySubespecialidadesId().getCodigo() + " - " + unidadobra.getSubespecialidadesBySubespecialidadesId().getDescripcion(), unidadobra.getCodigo(), unidadobra.getDescripcion(), unidadobra.getUm(), unidadobra.getCantidad(), unidadobra.getCostounitario(), costoTotal, costoMateReal, cManoOK, cEqOK));
            }
            tx.commit();
            session.close();
            return uoReportModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();
    }

    private double getValManoObraUO(Unidadobra unidadobra) {
        double valCalc = 0.0;
        List<Empresaobratarifa> tariList = util.getEmpresaobratarifaList(unidadobra.getObraId(), unidadobra.getEmpresaconstructoraId(), unidadobra.getObraByObraId().getTarifaId());
        for (Unidadobrarenglon ur : unidadobra.getUnidadobrarenglonsById()) {
            double val = new BigDecimal(String.format("%.2f", util.calcCostoManoRVinEmpresaObra(ur.getRenglonvarianteByRenglonvarianteId()))).doubleValue();
            double calculo = new BigDecimal(String.format("%.2f", ur.getCantRv() * val)).doubleValue();
            valCalc += calculo;
        }
        return valCalc;
    }

    private double getValEquipoUO(Unidadobra unidadobra) {
        double valCalc = 0.0;
        for (Unidadobrarenglon ur : unidadobra.getUnidadobrarenglonsById()) {
            double val = new BigDecimal(String.format("%.2f", util.calcCostoEquipoRVinEmpresaObra(ur.getRenglonvarianteByRenglonvarianteId()))).doubleValue();
            double calculo = new BigDecimal(String.format("%.2f", ur.getCantRv() * val)).doubleValue();
            valCalc += calculo;
        }
        return valCalc;
    }

    public Double getCantidadCertificada(int idUn) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            cantUO = 0.0;

            List<Certificacion> list = session.createQuery("from Certificacion WHERE unidadobraId =: idUni ").setParameter("idUni", idUn).getResultList();
            if (list.size() > 0) {
                cantUO = list.parallelStream().map(Certificacion::getCantidad).reduce(0.0, Double::sum);
            }
            tx.commit();
            session.close();
            return new BigDecimal(String.format("%.4f", cantUO)).doubleValue();

        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();
        } finally {
            session.close();
        }
        return new BigDecimal(String.format("%.4f", cantUO)).doubleValue();
    }

    private double calcCostoMaterialUO(List<Bajoespecificacion> bajoList) {
        double costo = 0.0;
        for (Bajoespecificacion bajoespecificacion : bajoList) {
            if (bajoespecificacion.getTipo().trim().equals("1")) {
                Recursos rec = getRecursosa(bajoespecificacion.getIdSuministro());
                if (rec == null) {
                    util.deleteBajoEsp(bajoespecificacion);
                } else {
                    costo += bajoespecificacion.getCantidad() * rec.getPreciomn();
                }
            } else if (bajoespecificacion.getTipo().trim().equals("S")) {
                Suministrossemielaborados sum = getSuministrossemielaborados(bajoespecificacion.getIdSuministro());
                costo += bajoespecificacion.getCantidad() * sum.getPreciomn();
            } else if (bajoespecificacion.getTipo().trim().equals("J")) {
                Juegoproducto sum = getJuegoproducto(bajoespecificacion.getIdSuministro());
                costo += bajoespecificacion.getCantidad() * sum.getPreciomn();
            }
        }
        return costo;
    }

    public List<AcomuladoModel> getAcomuladoModelList(ReportesController reportes, String query) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            List<AcomuladoModel> acomuladoModelList = new ArrayList<>();
            List<Object[]> list = session.createQuery(query).getResultList();
            for (Object[] row : list) {
                if (row[21] != null) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                    objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                    nivelBild = new StringBuilder().append(row[10].toString().trim()).append(" ").append(row[11].toString().trim());
                    especialidadBild = new StringBuilder().append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                    subBild = new StringBuilder().append(row[16].toString().trim()).append(" ").append(row[17].toString().trim());
                    if (row[24] != null) {
                        double totalCert = Double.parseDouble(row[25].toString().trim()) + Double.parseDouble(row[26].toString().trim()) + Double.parseDouble(row[27].toString().trim());
                        double cantPen = Double.parseDouble(row[22].toString().trim()) - Double.parseDouble(row[24].toString().trim());
                        double valPend = 0.0;
                        if (cantPen != 0) {
                            valPend = Double.parseDouble(row[23].toString().trim()) - totalCert;
                        }
                        acomuladoModelList.add(new AcomuladoModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), row[19].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[24].toString().trim()), Double.parseDouble(row[23].toString().trim()), totalCert, cantPen, valPend));
                    } else if (row[24] == null) {
                        double totalCert = 0.0;
                        double cantPen = Double.parseDouble(row[22].toString().trim());
                        double valPend = Double.parseDouble(row[23].toString().trim()) - totalCert;
                        acomuladoModelList.add(new AcomuladoModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), row[19].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), 0.0, Double.parseDouble(row[23].toString().trim()), totalCert, cantPen, valPend));

                    }
                }
            }

            tx.commit();
            session.close();
            return acomuladoModelList;
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();
    }

    public ArrayList<DatosCertificacionOrigen> getDatosCertificacionOrigenArrayList(ReportesController reportes, String query, Integer niveles) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            List<Object[]> list = session.createQuery(query).getResultList();
            datosCertificacionOrigenArrayList = new ArrayList<>();
            if (niveles <= 6) {
                for (Object[] row : list) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    datosCertificacionOrigenArrayList.add(new DatosCertificacionOrigen(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), Double.parseDouble(row[25].toString().trim()), Double.parseDouble(row[23].toString().trim()) + Double.parseDouble(row[24].toString().trim()) + Double.parseDouble(row[25].toString().trim()), " ", " ", " "));

                }
            } else if (niveles == 7) {
                for (Object[] row : list) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    brigBuilder = new StringBuilder().append(row[26].toString().trim()).append(" ").append(row[27].toString().trim());
                    datosCertificacionOrigenArrayList.add(new DatosCertificacionOrigen(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), Double.parseDouble(row[25].toString().trim()), Double.parseDouble(row[23].toString().trim()) + Double.parseDouble(row[24].toString().trim()) + Double.parseDouble(row[25].toString().trim()), brigBuilder.toString().trim(), " ", " "));

                }
            } else if (niveles == 8) {
                for (Object[] row : list) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    brigBuilder = new StringBuilder().append(row[26].toString().trim()).append(" ").append(row[27].toString().trim());
                    grupBuilder = new StringBuilder().append(row[28].toString().trim()).append(" ").append(row[29].toString().trim());
                    datosCertificacionOrigenArrayList.add(new DatosCertificacionOrigen(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), Double.parseDouble(row[25].toString().trim()), Double.parseDouble(row[23].toString().trim()) + Double.parseDouble(row[24].toString().trim()) + Double.parseDouble(row[25].toString().trim()), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " "));

                }
            } else if (niveles == 9) {
                for (Object[] row : list) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    brigBuilder = new StringBuilder().append(row[26].toString().trim()).append(" ").append(row[27].toString().trim());
                    grupBuilder = new StringBuilder().append(row[28].toString().trim()).append(" ").append(row[29].toString().trim());
                    cuadBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                    datosCertificacionOrigenArrayList.add(new DatosCertificacionOrigen(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), Double.parseDouble(row[25].toString().trim()), Double.parseDouble(row[23].toString().trim()) + Double.parseDouble(row[24].toString().trim()) + Double.parseDouble(row[25].toString().trim()), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " "));

                }
            }
            tx.commit();
            session.close();
            return datosCertificacionOrigenArrayList;
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    public List<RecursosPendientes> getRecursosPendientesList(ReportesController reportes, String query, String queryRec, int niv, Obra obra) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            List<RecursosPendientes> recursosPendientesArrayList = new ArrayList<>();
            List<RecursosPendientes> recursosPendientesTempIn = new ArrayList<>();
            List<RecursosPendientes> recursosPendientesTempSum = new ArrayList<>();
            if (query != null) {
                List<Object[]> list = session.createSQLQuery(query).getResultList();
                for (Object[] row : list) {
                    if (niv == 1) {
                        if (row[3].toString().trim().equals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[0].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[2] != null) {
                                cer = Double.parseDouble(row[2].toString().trim());
                            }
                            val = Double.parseDouble(row[1].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[1].toString().trim()) - Double.parseDouble(row[1].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", " ", " ", " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", Double.parseDouble(row[1].toString().trim()), val, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()), val * getvalMano(obra.getTarifaId(), recursos.getGrupoescala())));
                        } else if (row[3].toString().trim().equals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[0].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[2] != null) {
                                cer = Double.parseDouble(row[2].toString().trim());
                            }
                            val = Double.parseDouble(row[1].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[1].toString().trim()) - Double.parseDouble(row[1].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", " ", " ", " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", Double.parseDouble(row[1].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }
                    } else if (niv == 2) {
                        zonaBild = new StringBuilder().append(row[0].toString().trim()).append(" ").append(row[1].toString().trim());
                        if (row[5].toString().trim().equals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[2].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[4] != null) {
                                cer = Double.parseDouble(row[4].toString().trim());
                            }
                            val = Double.parseDouble(row[3].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[3].toString().trim()) - Double.parseDouble(row[3].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", zonaBild.toString().trim(), " ", " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", Double.parseDouble(row[3].toString().trim()), val, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()), val * getvalMano(obra.getTarifaId(), recursos.getGrupoescala())));
                        } else if (row[5].toString().trim().equals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[2].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[4] != null) {
                                cer = Double.parseDouble(row[4].toString().trim());
                            }
                            val = Double.parseDouble(row[3].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[3].toString().trim()) - Double.parseDouble(row[3].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", zonaBild.toString().trim(), " ", " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", Double.parseDouble(row[3].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }
                    } else if (niv == 3) {
                        zonaBild = new StringBuilder().append(row[0]).append(" ").append(row[1]);
                        objetoBild = new StringBuilder().append(row[2]).append(" ").append(row[3]);
                        if (row[7].toString().trim().equals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[4].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[6] != null) {
                                cer = Double.parseDouble(row[6].toString().trim());
                            }
                            val = Double.parseDouble(row[5].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[5].toString().trim()) - Double.parseDouble(row[5].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", Double.parseDouble(row[5].toString().trim()), val, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()), val * getvalMano(obra.getTarifaId(), recursos.getGrupoescala())));
                        } else if (row[7].toString().trim().equals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[4].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[6] != null) {
                                cer = Double.parseDouble(row[6].toString().trim());
                            }
                            val = Double.parseDouble(row[5].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[5].toString().trim()) - Double.parseDouble(row[5].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", Double.parseDouble(row[5].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }
                    } else if (niv == 4) {
                        zonaBild = new StringBuilder().append(row[0]).append(" ").append(row[1]);
                        objetoBild = new StringBuilder().append(row[2]).append(" ").append(row[3]);
                        nivelBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                        if (row[9].toString().trim().equals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[6].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[8] != null) {
                                cer = Double.parseDouble(row[8].toString().trim());
                            }
                            val = Double.parseDouble(row[7].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[7].toString().trim()) - Double.parseDouble(row[7].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", Double.parseDouble(row[7].toString().trim()), val, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()), val * getvalMano(obra.getTarifaId(), recursos.getGrupoescala())));
                        } else if (row[9].toString().trim().equals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[6].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[8] != null) {
                                cer = Double.parseDouble(row[8].toString().trim());
                            }
                            val = Double.parseDouble(row[7].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[7].toString().trim()) - Double.parseDouble(row[7].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", Double.parseDouble(row[7].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }
                    } else if (niv == 5) {
                        zonaBild = new StringBuilder().append(row[0]).append(" ").append(row[1]);
                        objetoBild = new StringBuilder().append(row[2]).append(" ").append(row[3]);
                        nivelBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                        especialidadBild = new StringBuilder().append(row[6]).append(" ").append(row[7]);
                        if (row[11].toString().trim().equals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[8].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[10] != null) {
                                cer = Double.parseDouble(row[10].toString().trim());
                            }
                            val = Double.parseDouble(row[9].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[9].toString().trim()) - Double.parseDouble(row[9].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", Double.parseDouble(row[9].toString().trim()), val, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()), val * getvalMano(obra.getTarifaId(), recursos.getGrupoescala())));
                        } else if (row[11].toString().trim().equals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[8].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[10] != null) {
                                cer = Double.parseDouble(row[10].toString().trim());
                            }
                            val = Double.parseDouble(row[9].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[9].toString().trim()) - Double.parseDouble(row[9].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", Double.parseDouble(row[9].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }

                    } else if (niv == 6) {
                        zonaBild = new StringBuilder().append(row[0]).append(" ").append(row[1]);
                        objetoBild = new StringBuilder().append(row[2]).append(" ").append(row[3]);
                        nivelBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                        especialidadBild = new StringBuilder().append(row[6]).append(" ").append(row[7]);
                        subBild = new StringBuilder().append(row[8]).append(" ").append(row[9]);
                        if (row[13].toString().trim().equals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[12] != null) {
                                cer = Double.parseDouble(row[12].toString().trim());
                            }
                            val = Double.parseDouble(row[11].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[11].toString().trim()) - Double.parseDouble(row[11].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", Double.parseDouble(row[11].toString().trim()), val, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()), val * getvalMano(obra.getTarifaId(), recursos.getGrupoescala())));
                        } else if (row[13].toString().trim().equals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[12] != null) {
                                cer = Double.parseDouble(row[12].toString().trim());
                            }
                            val = Double.parseDouble(row[11].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[11].toString().trim()) - Double.parseDouble(row[11].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", Double.parseDouble(row[11].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }
                    } else if (niv == 15) {
                        especialidadBild = new StringBuilder().append(row[0]).append(" ").append(row[1]);
                        if (row[5].toString().trim().equals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[2].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[4] != null) {
                                cer = Double.parseDouble(row[4].toString().trim());
                            }
                            val = Double.parseDouble(row[3].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[3].toString().trim()) - Double.parseDouble(row[3].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", " ", " ", " ", especialidadBild.toString().trim(), " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", Double.parseDouble(row[3].toString().trim()), val, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()), val * getvalMano(obra.getTarifaId(), recursos.getGrupoescala())));
                        } else if (row[5].toString().trim().equals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[2].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[4] != null) {
                                cer = Double.parseDouble(row[4].toString().trim());
                            }
                            val = Double.parseDouble(row[3].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[3].toString().trim()) - Double.parseDouble(row[3].toString().trim());
                            }
                            recursosPendientesTempIn.add(new RecursosPendientes(" ", " ", " ", " ", especialidadBild.toString().trim(), " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", Double.parseDouble(row[3].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }
                    }
                }
                recursosPendientesTempIn.sort(Comparator.comparing(RecursosPendientes::getCodigoUO));
                recursosPendientesArrayList.addAll(recursosPendientesTempIn);
            }
            if (queryRec != null) {
                List<Object[]> listSuministro = session.createSQLQuery(queryRec).getResultList();
                for (Object[] row : listSuministro) {
                    if (niv == 1) {
                        if (row[3].toString().trim().equals("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[0].toString().trim()));
                            if (recursos != null) {
                                double cer = 0.0;
                                double val = 0.0;
                                if (row[2] != null) {
                                    cer = Double.parseDouble(row[2].toString().trim());
                                }
                                val = Double.parseDouble(row[1].toString().trim()) - cer;
                                if (val < 0.0) {
                                    val = Double.parseDouble(row[1].toString().trim()) - Double.parseDouble(row[1].toString().trim());
                                }
                                recursosPendientesTempSum.add(new RecursosPendientes(" ", " ", " ", " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[1].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                            }
                        } else if (row[3].toString().trim().equals("J")) {
                            Juegoproducto recursos = getJuegoproducto(Integer.parseInt(row[0].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[2] != null) {
                                cer = Double.parseDouble(row[2].toString().trim());
                            }
                            val = Double.parseDouble(row[1].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[1].toString().trim()) - Double.parseDouble(row[1].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", " ", " ", " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[1].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[3].toString().trim().equals("S")) {
                            Suministrossemielaborados recursos = getSuministrossemielaborados(Integer.parseInt(row[0].toString().trim()));
                            if (recursos != null) {
                                double cer = 0.0;
                                double val = 0.0;
                                if (row[2] != null) {
                                    cer = Double.parseDouble(row[2].toString().trim());
                                }
                                val = Double.parseDouble(row[1].toString().trim()) - cer;
                                if (val < 0.0) {
                                    val = Double.parseDouble(row[1].toString().trim()) - Double.parseDouble(row[1].toString().trim());
                                }
                                recursosPendientesTempSum.add(new RecursosPendientes(" ", " ", " ", " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[1].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                            }
                        }
                    } else if (niv == 2) {
                        zonaBild = new StringBuilder().append(row[0].toString().trim()).append(" ").append(row[1].toString().trim());
                        if (row[5].toString().trim().equals("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[2].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[3] != null) {
                                cer = Double.parseDouble(row[3].toString().trim());
                            }
                            val = Double.parseDouble(row[2].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[2].toString().trim()) - Double.parseDouble(row[2].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), " ", " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[2].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[5].toString().trim().equals("J")) {
                            Juegoproducto recursos = getJuegoproducto(Integer.parseInt(row[2].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[3] != null) {
                                cer = Double.parseDouble(row[3].toString().trim());
                            }
                            val = Double.parseDouble(row[2].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[2].toString().trim()) - Double.parseDouble(row[2].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), " ", " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[2].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[5].toString().trim().equals("S")) {
                            Suministrossemielaborados recursos = getSuministrossemielaborados(Integer.parseInt(row[2].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[3] != null) {
                                cer = Double.parseDouble(row[3].toString().trim());
                            }
                            val = Double.parseDouble(row[2].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[2].toString().trim()) - Double.parseDouble(row[2].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), " ", " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[2].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }

                    } else if (niv == 3) {
                        zonaBild = new StringBuilder().append(row[0].toString().trim()).append(" ").append(row[1].toString().trim());
                        objetoBild = new StringBuilder().append(row[2].toString().trim()).append(" ").append(row[3].toString().trim());
                        if (row[7].toString().trim().equals("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[4].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[6] != null) {
                                cer = Double.parseDouble(row[6].toString().trim());
                            }
                            val = Double.parseDouble(row[5].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[5].toString().trim()) - Double.parseDouble(row[5].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[5].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[7].toString().trim().equals("J")) {
                            Juegoproducto recursos = getJuegoproducto(Integer.parseInt(row[4].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[7] != null) {
                                cer = Double.parseDouble(row[6].toString().trim());
                            }
                            val = Double.parseDouble(row[5].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[5].toString().trim()) - Double.parseDouble(row[5].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[5].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[7].toString().trim().equals("S")) {
                            Suministrossemielaborados recursos = getSuministrossemielaborados(Integer.parseInt(row[4].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[6] != null) {
                                cer = Double.parseDouble(row[6].toString().trim());
                            }
                            val = Double.parseDouble(row[5].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[5].toString().trim()) - Double.parseDouble(row[5].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[5].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }
                    } else if (niv == 4) {
                        zonaBild = new StringBuilder().append(row[0].toString().trim()).append(" ").append(row[1].toString().trim());
                        objetoBild = new StringBuilder().append(row[2].toString().trim()).append(" ").append(row[3].toString().trim());
                        nivelBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                        if (row[9].toString().trim().equals("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[6].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[8] != null) {
                                cer = Double.parseDouble(row[8].toString().trim());
                            }
                            val = Double.parseDouble(row[7].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[7].toString().trim()) - Double.parseDouble(row[7].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[7].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[9].toString().trim().equals("J")) {
                            Juegoproducto recursos = getJuegoproducto(Integer.parseInt(row[6].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[8] != null) {
                                cer = Double.parseDouble(row[8].toString().trim());
                            }
                            val = Double.parseDouble(row[7].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[7].toString().trim()) - Double.parseDouble(row[7].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[7].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[9].toString().trim().equals("S")) {
                            Suministrossemielaborados recursos = getSuministrossemielaborados(Integer.parseInt(row[6].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[8] != null) {
                                cer = Double.parseDouble(row[8].toString().trim());
                            }
                            val = Double.parseDouble(row[7].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[7].toString().trim()) - Double.parseDouble(row[7].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), " ", " ", " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[7].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }
                    } else if (niv == 5) {
                        zonaBild = new StringBuilder().append(row[0].toString().trim()).append(" ").append(row[1].toString().trim());
                        objetoBild = new StringBuilder().append(row[2].toString().trim()).append(" ").append(row[3].toString().trim());
                        nivelBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                        especialidadBild = new StringBuilder().append(row[6].toString().trim()).append(" ").append(row[7].toString().trim());
                        if (row[11].toString().trim().equals("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[8].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[10] != null) {
                                cer = Double.parseDouble(row[10].toString().trim());
                            }
                            val = Double.parseDouble(row[9].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[9].toString().trim()) - Double.parseDouble(row[9].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[9].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[11].toString().trim().equals("J")) {
                            Juegoproducto recursos = getJuegoproducto(Integer.parseInt(row[8].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[10] != null) {
                                cer = Double.parseDouble(row[10].toString().trim());
                            }
                            val = Double.parseDouble(row[9].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[9].toString().trim()) - Double.parseDouble(row[9].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[9].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[11].toString().trim().equals("S")) {
                            Suministrossemielaborados recursos = getSuministrossemielaborados(Integer.parseInt(row[8].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[10] != null) {
                                cer = Double.parseDouble(row[10].toString().trim());
                            }
                            val = Double.parseDouble(row[9].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[9].toString().trim()) - Double.parseDouble(row[9].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[9].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }
                    } else if (niv == 6) {
                        zonaBild = new StringBuilder().append(row[0].toString().trim()).append(" ").append(row[1].toString().trim());
                        objetoBild = new StringBuilder().append(row[2].toString().trim()).append(" ").append(row[3].toString().trim());
                        nivelBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                        especialidadBild = new StringBuilder().append(row[6].toString().trim()).append(" ").append(row[7].toString().trim());
                        subBild = new StringBuilder().append(row[8].toString().trim()).append(" ").append(row[9].toString().trim());
                        if (row[13].toString().trim().equals("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[12] != null) {
                                cer = Double.parseDouble(row[12].toString().trim());
                            }
                            val = Double.parseDouble(row[11].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[11].toString().trim()) - Double.parseDouble(row[11].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[11].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[13].toString().trim().equals("J")) {
                            Juegoproducto recursos = getJuegoproducto(Integer.parseInt(row[10].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[12] != null) {
                                cer = Double.parseDouble(row[12].toString().trim());
                            }
                            val = Double.parseDouble(row[11].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[11].toString().trim()) - Double.parseDouble(row[11].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[11].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[13].toString().trim().equals("S")) {
                            Suministrossemielaborados recursos = getSuministrossemielaborados(Integer.parseInt(row[10].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[12] != null) {
                                cer = Double.parseDouble(row[12].toString().trim());
                            }
                            val = Double.parseDouble(row[11].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[11].toString().trim()) - Double.parseDouble(row[11].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[11].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }

                    } else if (niv == 15) {
                        especialidadBild = new StringBuilder().append(row[0]).append(" ").append(row[1]);
                        if (row[5].toString().trim().equals("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[2].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[4] != null) {
                                cer = Double.parseDouble(row[4].toString().trim());
                            }
                            val = Double.parseDouble(row[3].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[3].toString().trim()) - Double.parseDouble(row[3].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", " ", " ", " ", especialidadBild.toString().trim(), " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[3].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[5].toString().trim().equals("J")) {
                            Juegoproducto recursos = getJuegoproducto(Integer.parseInt(row[2].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[4] != null) {
                                cer = Double.parseDouble(row[4].toString().trim());
                            }
                            val = Double.parseDouble(row[3].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[3].toString().trim()) - Double.parseDouble(row[3].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", " ", " ", " ", especialidadBild.toString().trim(), " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[3].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        } else if (row[5].toString().trim().equals("S")) {
                            Suministrossemielaborados recursos = getSuministrossemielaborados(Integer.parseInt(row[2].toString().trim()));
                            double cer = 0.0;
                            double val = 0.0;
                            if (row[4] != null) {
                                cer = Double.parseDouble(row[4].toString().trim());
                            }
                            val = Double.parseDouble(row[3].toString().trim()) - cer;
                            if (val < 0.0) {
                                val = Double.parseDouble(row[3].toString().trim()) - Double.parseDouble(row[3].toString().trim());
                            }
                            recursosPendientesTempSum.add(new RecursosPendientes(" ", " ", " ", " ", especialidadBild.toString().trim(), " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", Double.parseDouble(row[3].toString().trim()), val, recursos.getPreciomn(), val * recursos.getPreciomn()));
                        }
                    }
                }
            }
            recursosPendientesTempSum.sort(Comparator.comparing(RecursosPendientes::getCodigoUO));
            recursosPendientesArrayList.addAll(recursosPendientesTempSum);
            tx.commit();
            session.close();
            return recursosPendientesArrayList;
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();
    }

    public ArrayList<GroupToReport> getEmpresaInArray(ArrayList<UOReportModel> uoReportModelArray, Obra obra) {
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        for (UOReportModel uoreprt : uoReportModelArray) {
            GroupToReport groupToReport = new GroupToReport(uoreprt.getIdEmp(), uoreprt.getEmpresa(), obra.getSalarioBySalarioId().getTag());
            if (groupToReportsArrayList.size() == 0) {
                groupToReportsArrayList.add(groupToReport);
            } else if (!groupToReportsArrayList.contains(groupToReport)) {
                groupToReportsArrayList.add(groupToReport);
            }
        }
        return groupToReportsArrayList;
    }

    public ArrayList<RenglonVarianteReportModel> getRenglonesVariantesList(ReportesController reportes, String query, String queryMat, int idOb) {
        reportesController = reportes;
        ArrayList<RenglonVarianteReportModel> temp = new ArrayList<>();
        List<Object[]> renglonesList = util.getRowsQueryResults(query);
        Obra obra = structureSingelton.getObra(idOb);
        for (Object[] row : renglonesList) {
            coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
            coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
            List<Empresaobratarifa> list = util.getEmpresaobratarifaList(obra.getId(), Integer.parseInt(row[0].toString().trim()), obra.getTarifaSalarialByTarifa().getId());
            if (row[15] != null) {
                Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[18].toString().trim())).findFirst().get();
                if (row[20].toString().trim().equals("1")) {
                    double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                    double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                    double costMateriaR = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("1")).map(item -> item.getCantidas() * item.getRecursosByRecursosId().getPreciomn() / item.getUsos()).reduce(0.0, Double::sum);
                    double costMateriaJ = renglonvariante.getRenglonjuegosById().parallelStream().map(item -> item.getCantidad() * item.getJuegoproductoByJuegoproductoId().getPreciomn() / item.getUsos()).reduce(0.0, Double::sum);
                    double costMateriaS = renglonvariante.getRenglonsemielaboradosById().parallelStream().map(item -> item.getCantidad() * item.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn() / item.getUsos()).reduce(0.0, Double::sum);
                    // double CMaterial = new BigDecimal(String.format("%.2f", costMateriaR + costMateriaS + costMateriaJ)).doubleValue();
                    double CMaterial = costMateriaR + costMateriaS + costMateriaJ;
                    uoconcat = new StringBuilder().append("UO ").append(row[13].toString().trim()).append("     ").append(row[14].toString().trim()).append("     ").append(Double.toString(new BigDecimal(String.format("%.4f", Double.parseDouble(row[16].toString().trim()))).doubleValue())).append(" / ").append(row[15].toString().trim());
                    double volumenOk = new BigDecimal(String.format("%.4f", Double.parseDouble(row[19].toString().trim()))).doubleValue();
                    double costManoFinal = costoMano * coeficienteMano;
                    double valMano = volumenOk * costManoFinal;
                    double costEquipoFinal = costoEq * coeficienteEquipo;
                    double valCostoEqip = volumenOk * costEquipoFinal;
                    double valCostMaterial = volumenOk * CMaterial;
                    //double totalRV = new BigDecimal(String.format("%.2f", valCostMaterial + valMano + valCostoEqip)).doubleValue();
                    double totalRV = valCostMaterial + valMano + valCostoEqip;
                    temp.add(new RenglonVarianteReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[21].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[22].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[23].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[24].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[25].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), " ", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), Integer.parseInt(row[18].toString().trim()), renglonvariante.getCodigo(), renglonvariante.getDescripcion(), renglonvariante.getUm(), volumenOk, CMaterial, costManoFinal, costEquipoFinal, valCostMaterial, valMano, valCostoEqip, totalRV, row[21].toString().trim(), row[22].toString().trim(), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim()));
                } else if (row[20].toString().trim().equals("0")) {
                    double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                    double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                    uoconcat = new StringBuilder().append("UO ").append(row[13].toString().trim()).append("     ").append(row[14].toString().trim()).append("     ").append(Double.toString(new BigDecimal(String.format("%.4f", Double.parseDouble(row[16].toString().trim()))).doubleValue())).append(" / ").append(row[15].toString().trim());
                    double volumenOk = new BigDecimal(String.format("%.4f", Double.parseDouble(row[19].toString().trim()))).doubleValue();
                    //double costManoFinal = new BigDecimal(String.format("%.2f", costoMano * coeficienteMano)).doubleValue();
                    double costManoFinal = costoMano * coeficienteMano;
                    double valMano = volumenOk * costManoFinal;
                    //double costEquipoFinal = new BigDecimal(String.format("%.2f", costoEq * coeficienteEquipo)).doubleValue();
                    double costEquipoFinal = costoEq * coeficienteEquipo;
                    double valCostoEqip = volumenOk * costEquipoFinal;
                    //double totalRV = new BigDecimal(String.format("%.2f", 0.0 + valMano + valCostoEqip)).doubleValue();
                    double totalRV = 0.0 + valMano + valCostoEqip;
                    temp.add(new RenglonVarianteReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[21].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[22].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[23].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[24].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[25].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), " ", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), Integer.parseInt(row[18].toString().trim()), renglonvariante.getCodigo(), renglonvariante.getDescripcion(), renglonvariante.getUm(), volumenOk, 0.0, costManoFinal, costEquipoFinal, 0.0, valMano, valCostoEqip, totalRV, row[21].toString().trim(), row[22].toString().trim(), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim()));
                }
            }
        }
        List<Object[]> materialesList = util.getRowsQueryResults(queryMat);
        for (Object[] row : materialesList) {
            if (row[15] != null) {
                uoconcat = new StringBuilder().append("UO ").append(row[13].toString().trim()).append("     ").append(row[14].toString().trim()).append("     ").append(String.valueOf(Math.round(Double.parseDouble(row[16].toString().trim()) * 10000d) / 10000d)).append(" / ").append(row[15].toString().trim());
                if (row[21].toString().trim().contentEquals("1")) {
                    recursos = util.getSuministro(Integer.parseInt(row[20].toString().trim()));
                    if (recursos != null) {
                        temp.add(new RenglonVarianteReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[22].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[23].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[24].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[25].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[26].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), " ", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), recursos.getId(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[18].toString().trim()), recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[18].toString().trim()) * recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[18].toString().trim()) * recursos.getPreciomn(), row[22].toString().trim(), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), row[26].toString().trim()));
                    }
                } else if (row[21].toString().trim().contentEquals("2")) {

                    List<Empresaobratarifa> list = util.getEmpresaobratarifaList(obra.getId(), Integer.parseInt(row[0].toString().trim()), obra.getTarifaSalarialByTarifa().getId());
                    recursos = util.getSuministro(Integer.parseInt(row[20].toString().trim()));
                    if (recursos != null) {
                        System.out.println("Obra id:" + obra.getId() + " Empresa: " + Integer.parseInt(row[0].toString().trim()) + " Escala: " + recursos.getGrupoescala());
                        double valortarifa = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        temp.add(new RenglonVarianteReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[22].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[23].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[24].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[25].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[26].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), " ", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), recursos.getId(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[18].toString().trim()), 0.0, valortarifa, 0.0, 0.0, Double.parseDouble(row[18].toString().trim()) * valortarifa, 0.0, Double.parseDouble(row[18].toString().trim()) * valortarifa, row[22].toString().trim(), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), row[26].toString().trim()));
                    }
                } else if (row[21].toString().trim().contentEquals("3")) {
                    recursos = util.getSuministro(Integer.parseInt(row[20].toString().trim()));
                    if (recursos != null) {
                        temp.add(new RenglonVarianteReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[22].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[23].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[24].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[24].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[26].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), " ", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), recursos.getId(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[18].toString().trim()), 0.0, 0.0, recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[18].toString().trim()) * recursos.getPreciomn(), Double.parseDouble(row[18].toString().trim()) * recursos.getPreciomn(), row[22].toString().trim(), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), row[26].toString().trim()));
                    }
                } else if (row[21].toString().trim().contentEquals("J")) {
                    juegoproducto = util.getJuegoProductoById(Integer.parseInt(row[20].toString().trim()));
                    temp.add(new RenglonVarianteReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[22].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[23].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[24].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[25].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[26].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), " ", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), juegoproducto.getId(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[18].toString().trim()), juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[18].toString().trim()) * juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[18].toString().trim()) * juegoproducto.getPreciomn(), row[22].toString().trim(), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), row[26].toString().trim()));
                } else if (row[21].toString().trim().contentEquals("S")) {
                    suministrossemielaborados = util.getSuministroSemielaboradoById(Integer.parseInt(row[20].toString().trim()));
                    if (suministrossemielaborados == null) {
                        System.out.println(Integer.parseInt(row[20].toString().trim()));
                    }
                    temp.add(new RenglonVarianteReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[22].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[23].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[24].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[25].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[26].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), " ", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), suministrossemielaborados.getId(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[18].toString().trim()), suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[18].toString().trim()) * suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[18].toString().trim()) * suministrossemielaborados.getPreciomn(), row[22].toString().trim(), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), row[26].toString().trim()));
                }

            }
        }
        return temp;
    }

    public ArrayList<DatosCertificacionOrigenUORV> getDatosCertificacionOrigenUOinRVinRVArrayList
            (ReportesController reportes, String query, String queryM) {

        ArrayList<DatosCertificacionOrigenUORV> temp = new ArrayList<DatosCertificacionOrigenUORV>();

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            datosCertificacionOrigenUORVArrayList = new ArrayList<DatosCertificacionOrigenUORV>();
            Query query1 = session.createQuery(query);

            cantRV = 0.0;
            mateRV = 0.0;
            manoRV = 0.0;
            equpRV = 0.0;
            for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                Object[] row = (Object[]) it.next();
                Integer idEmpr = Integer.parseInt(row[0].toString().trim());
                String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                Integer Zonid = Integer.parseInt(row[3].toString().trim());
                String Zon = row[4].toString().trim() + " " + row[5].toString().trim();
                Integer Objid = Integer.parseInt(row[6].toString().trim());
                String Obj = row[7].toString().trim() + " " + row[8].toString().trim();
                Integer Nivid = Integer.parseInt(row[9].toString().trim());
                String Niv = row[10].toString().trim() + " " + row[11].toString().trim();
                Integer Espid = Integer.parseInt(row[12].toString().trim());
                String Esp = row[13].toString().trim() + " " + row[14].toString().trim();
                Integer Subid = Integer.parseInt(row[15].toString().trim());
                String Sub = row[16].toString().trim() + " " + row[17].toString().trim();
                Integer UOid = Integer.parseInt(row[18].toString().trim());
                String UO = " UO " + row[19].toString().trim() + " " + row[20].toString().trim() + " " + row[23].toString().trim() + " / " + row[21].toString().trim();
                String UOdescr = row[20].toString().trim();
                String UOum = row[21].toString().trim();
                Double cantUO = Double.parseDouble(row[22].toString().trim());
                String certCant = row[23].toString().trim();
                String certCostMat = row[24].toString().trim();
                String certCostMano = row[25].toString().trim();
                String certCostEquip = row[26].toString().trim();
                double total = Double.parseDouble(certCostMat) + Double.parseDouble(certCostMano) + Double.parseDouble(certCostEquip);


                Double cantRV = Double.parseDouble(row[27].toString().trim());
                Double mateRV = Double.parseDouble(row[28].toString().trim());
                Double manoRV = Double.parseDouble(row[29].toString().trim());
                Double equpRV = Double.parseDouble(row[30].toString().trim());

                String rvcode = row[31].toString().trim();
                String rvdesc = row[32].toString().trim();
                String rvum = row[33].toString().trim();

                String brigada = row[34].toString().trim() + " " + row[35].toString().trim();
                String grupo = row[36].toString().trim() + " " + row[37].toString().trim();
                String cuadrilla = row[38].toString().trim() + " " + row[39].toString().trim();

                double cantCertRV = cantRV * Double.parseDouble(certCant) / cantUO;

                double costMatRVCet = cantCertRV * mateRV / cantRV;
                double costManoRVCet = cantCertRV * manoRV / cantRV;
                double costequipRVCet = cantCertRV * equpRV / cantRV;

                double totalCertRV = costMatRVCet + costManoRVCet + costequipRVCet;


                datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(idEmpr, Empr, Zonid, Zon, Objid, Obj, Nivid, Niv, Espid, Esp, Subid, Sub, UOid, UO, UOdescr, UOum, Double.parseDouble(certCant), Double.parseDouble(certCostMat), Double.parseDouble(certCostMano), Double.parseDouble(certCostEquip), Math.round(total * 100d) / 100d, rvcode, rvdesc, rvum, Math.round(cantCertRV * 100d) / 100d, Math.round(costMatRVCet * 100d) / 100d, Math.round(costManoRVCet * 100d) / 100d, Math.round(costequipRVCet * 100d) / 100d, Math.round(totalCertRV * 100d) / 100d, brigada, grupo, cuadrilla, 1, 1);
                temp.add(datosCertificacionOrigenUORV);
            }

            Query query2 = session.createQuery(queryM);

            for (Iterator it = ((org.hibernate.query.Query) query2).iterate(); it.hasNext(); ) {
                Object[] row = (Object[]) it.next();
                Integer idEmpr = Integer.parseInt(row[0].toString().trim());
                String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                Integer Zonid = Integer.parseInt(row[3].toString().trim());
                String Zon = row[4].toString().trim() + " " + row[5].toString().trim();
                Integer Objid = Integer.parseInt(row[6].toString().trim());
                String Obj = row[7].toString().trim() + " " + row[8].toString().trim();
                Integer Nivid = Integer.parseInt(row[9].toString().trim());
                String Niv = row[10].toString().trim() + " " + row[11].toString().trim();
                Integer Espid = Integer.parseInt(row[12].toString().trim());
                String Esp = row[13].toString().trim() + " " + row[14].toString().trim();
                Integer Subid = Integer.parseInt(row[15].toString().trim());
                String Sub = row[16].toString().trim() + " " + row[17].toString().trim();
                Integer UOid = Integer.parseInt(row[18].toString().trim());
                String UO = " UO " + row[19].toString().trim() + " " + row[20].toString().trim() + " " + row[23].toString().trim() + " / " + row[21].toString().trim();
                String UOdescr = row[20].toString().trim();
                String UOum = row[21].toString().trim();
                Double cantUO = Double.parseDouble(row[22].toString().trim());
                String certCant = row[23].toString().trim();
                String certCostMat = row[24].toString().trim();
                String certCostMano = row[25].toString().trim();
                String certCostEquip = row[26].toString().trim();
                double total = Double.parseDouble(certCostMat) + Double.parseDouble(certCostMano) + Double.parseDouble(certCostEquip);

                if (row[29].toString().trim().contentEquals("1")) {
                    cantRV = Double.parseDouble(row[27].toString().trim());
                    mateRV = Double.parseDouble(row[28].toString().trim());
                    manoRV = 0.0;
                    equpRV = 0.0;

                    rvcode = row[31].toString().trim();
                    rvdesc = row[32].toString().trim();
                    rvum = row[33].toString().trim();
                } else if (row[29].toString().trim().contentEquals("J")) {
                    juegoproducto = getJuegoproducto(Integer.parseInt(row[30].toString().trim()));

                    cantRV = Double.parseDouble(row[27].toString().trim());
                    mateRV = Double.parseDouble(row[28].toString().trim());
                    manoRV = 0.0;
                    equpRV = 0.0;

                    rvcode = juegoproducto.getCodigo();
                    rvdesc = juegoproducto.getDescripcion();
                    rvum = juegoproducto.getUm();

                } else if (row[29].toString().trim().contentEquals("S")) {
                    suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[30].toString().trim()));

                    cantRV = Double.parseDouble(row[27].toString().trim());
                    mateRV = Double.parseDouble(row[28].toString().trim());
                    manoRV = 0.0;
                    equpRV = 0.0;

                    rvcode = suministrossemielaborados.getCodigo();
                    rvdesc = suministrossemielaborados.getDescripcion();
                    rvum = suministrossemielaborados.getUm();
                }

                double cantCertRV = cantRV * Double.parseDouble(certCant) / cantUO;

                double costMatRVCet = cantCertRV * mateRV / cantRV;
                double costManoRVCet = 0.0;
                double costequipRVCet = 0.0;

                double totalCertRV = costMatRVCet;

                String brigada = row[34].toString().trim() + " " + row[35].toString().trim();
                String grupo = row[36].toString().trim() + " " + row[37].toString().trim();
                String cuadrilla = row[38].toString().trim() + " " + row[39].toString().trim();


                datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(idEmpr, Empr, Zonid, Zon, Objid, Obj, Nivid, Niv, Espid, Esp, Subid, Sub, UOid, UO, UOdescr, UOum, Double.parseDouble(certCant), Double.parseDouble(certCostMat), Double.parseDouble(certCostMano), Double.parseDouble(certCostEquip), Math.round(total * 100d) / 100d, rvcode, rvdesc, rvum, Math.round(cantCertRV * 100d) / 100d, Math.round(costMatRVCet * 100d) / 100d, Math.round(costManoRVCet * 100d) / 100d, Math.round(costequipRVCet * 100d) / 100d, Math.round(totalCertRV * 100d) / 100d, brigada, grupo, cuadrilla, 1, 1);
                temp.add(datosCertificacionOrigenUORV);
            }

            temp.sort(Comparator.comparing(DatosCertificacionOrigenUORV::getIdUnidad));
            datosCertificacionOrigenUORVArrayList.addAll(temp);


            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return datosCertificacionOrigenUORVArrayList;

    }

    public ArrayList<DatosCertificacionOrigenUORV> getDatosCertificacionOrigenUOinRVRVArrayList(ReportesController
                                                                                                        reportes, String query, String queryM, int idOb) {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            datosCertificacionOrigenUORVArrayList = new ArrayList<>();
            ArrayList<DatosCertificacionOrigenUORV> temp = new ArrayList<DatosCertificacionOrigenUORV>();
            cantRV = null;
            mateRV = null;
            manoRV = null;
            equpRV = null;

            List<Object[]> query1 = session.createQuery(query).getResultList();
            for (Object[] row : query1) {
                coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);

                empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                zonaBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                nivelBild = new StringBuilder().append(row[10].toString().trim()).append(" ").append(row[11].toString().trim());
                especialidadBild = new StringBuilder().append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                subBild = new StringBuilder().append(row[16].toString().trim()).append(" ").append(row[17].toString().trim());
                uocode = new StringBuilder().append(" RV ").append(row[25].toString().trim()).append(" ").append(row[26].toString().trim()).append(" ").append(row[21].toString().trim()).append(" / ").append(row[27].toString().trim());
                double mano = Double.parseDouble(row[21].toString().trim()) * Double.parseDouble(row[37].toString().trim()) * coeficienteMano;
                double equipo = Double.parseDouble(row[21].toString().trim()) * Double.parseDouble(row[38].toString().trim()) * coeficienteEquipo;
                total = mano + equipo;
                brigBuilder = new StringBuilder().append(row[28].toString().trim()).append(" ").append(row[29].toString().trim());
                grupBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                if (row[33] != null) {
                    cuadBuilder = new StringBuilder().append(row[33].toString().trim()).append(" ").append(row[34].toString().trim());
                } else {
                    cuadBuilder = new StringBuilder().append(" ");
                }
                temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[19].toString().trim(), row[20].toString().trim(), Double.parseDouble(row[21].toString().trim()), 0.0, Double.parseDouble(row[37].toString().trim()) * coeficienteMano, Double.parseDouble(row[38].toString().trim()) * coeficienteEquipo, total, row[25].toString().trim(), row[26].toString().trim(), row[27].toString().trim(), Double.parseDouble(row[21].toString().trim()), 0.0, Double.parseDouble(row[21].toString().trim()) * Double.parseDouble(row[37].toString().trim()) * coeficienteMano, Double.parseDouble(row[21].toString().trim()) * Double.parseDouble(row[38].toString().trim()) * coeficienteEquipo, total, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), Integer.parseInt(row[32].toString().trim()), Integer.parseInt(row[32].toString().trim())));
            }

            List<Object[]> query2 = session.createQuery(queryM).getResultList();
            for (Object[] row : query2) {
                empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                zonaBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                nivelBild = new StringBuilder().append(row[10].toString().trim()).append(" ").append(row[11].toString().trim());
                especialidadBild = new StringBuilder().append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                subBild = new StringBuilder().append(row[16].toString().trim()).append(" ").append(row[17].toString().trim());
                uocode = new StringBuilder().append(" RV ").append(row[25].toString().trim()).append(" ").append(row[26].toString().trim()).append(" ").append(row[21].toString().trim()).append(" / ").append(row[27].toString().trim());
                total = Double.parseDouble(row[23].toString().trim());

                brigBuilder = new StringBuilder().append(row[28].toString().trim()).append(" ").append(row[29].toString().trim());
                grupBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                if (row[32] == null) {
                    cuadBuilder = new StringBuilder().append(" ");

                } else if (row[32] != null) {
                    cuadBuilder = new StringBuilder().append(row[32].toString().trim()).append(" ").append(row[33].toString().trim());
                }

                if (row[24].toString().trim().startsWith("1")) {
                    recursos = getRecursosa(Integer.parseInt(row[36].toString().trim()));
                    cantRV = Double.parseDouble(row[22].toString().trim());
                    mateRV = Double.parseDouble(row[23].toString().trim());
                    manoRV = 0.0;
                    equpRV = 0.0;

                    rvcode = recursos.getCodigo();
                    rvdesc = recursos.getDescripcion();
                    rvum = recursos.getUm();

                    temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[19].toString().trim(), row[20].toString().trim(), Double.parseDouble(row[22].toString().trim()), recursos.getPreciomn(), 0.0, 0.0, Math.round(total * 100d) / 100d, rvcode, rvdesc, rvum, Math.round(cantRV * 100d) / 100d, Double.parseDouble(row[22].toString().trim()) * recursos.getPreciomn(), Math.round(manoRV * 100d) / 100d, Math.round(equpRV * 100d) / 100d, Double.parseDouble(row[22].toString().trim()) * recursos.getPreciomn(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), Integer.parseInt(row[35].toString().trim()), Integer.parseInt(row[34].toString().trim())));

                } else if (row[24].toString().trim().startsWith("J")) {
                    juegoproducto = getJuegoproducto(Integer.parseInt(row[36].toString().trim()));

                    cantRV = Double.parseDouble(row[22].toString().trim());
                    mateRV = Double.parseDouble(row[23].toString().trim());
                    manoRV = 0.0;
                    equpRV = 0.0;

                    rvcode = juegoproducto.getCodigo();
                    rvdesc = juegoproducto.getDescripcion();
                    rvum = juegoproducto.getUm();

                    temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[19].toString().trim(), row[20].toString().trim(), Double.parseDouble(row[22].toString().trim()), juegoproducto.getPreciomn(), 0.0, 0.0, Math.round(total * 100d) / 100d, rvcode, rvdesc, rvum, Math.round(cantRV * 100d) / 100d, Double.parseDouble(row[22].toString().trim()) * juegoproducto.getPreciomn(), Math.round(manoRV * 100d) / 100d, Math.round(equpRV * 100d) / 100d, Double.parseDouble(row[22].toString().trim()) * juegoproducto.getPreciomn(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), Integer.parseInt(row[35].toString().trim()), Integer.parseInt(row[34].toString().trim())));


                } else if (row[24].toString().trim().startsWith("S")) {
                    suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[36].toString().trim()));

                    cantRV = Double.parseDouble(row[22].toString().trim());
                    mateRV = Double.parseDouble(row[23].toString().trim());
                    manoRV = 0.0;
                    equpRV = 0.0;

                    rvcode = suministrossemielaborados.getCodigo();
                    rvdesc = suministrossemielaborados.getDescripcion();
                    rvum = suministrossemielaborados.getUm();

                    temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[19].toString().trim(), row[20].toString().trim(), Double.parseDouble(row[22].toString().trim()), suministrossemielaborados.getPreciomn(), 0.0, 0.0, Math.round(total * 100d) / 100d, rvcode, rvdesc, rvum, Math.round(cantRV * 100d) / 100d, Double.parseDouble(row[22].toString().trim()) * suministrossemielaborados.getPreciomn(), Math.round(manoRV * 100d) / 100d, Math.round(equpRV * 100d) / 100d, Double.parseDouble(row[22].toString().trim()) * suministrossemielaborados.getPreciomn(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), Integer.parseInt(row[35].toString().trim()), Integer.parseInt(row[34].toString().trim())));

                }

            }


            temp.sort(Comparator.comparing(DatosCertificacionOrigenUORV::getIdRenglon));
            datosCertificacionOrigenUORVArrayList.addAll(temp);


            tx.commit();
            session.close();
            return datosCertificacionOrigenUORVArrayList;
        } catch (Exception ex) {
            if (tx != null) tx.rollback();

            ex.printStackTrace();
            /*
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setHeaderText(this.getClass().getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();
*/

        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    public ArrayList<DatosPlanificacionMesUO> getDatosPlanificacionMesUOArrayList(ReportesController
                                                                                          reportes, String query, int niveles) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            datosPlanificacionMesUOArrayList = new ArrayList<DatosPlanificacionMesUO>();
            Query query1 = session.createQuery(query);
            List<Object[]> listPlan = query1.getResultList();

            totalCalc = 0.0;
            if (niveles < 9) {
                for (Object[] row : listPlan) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    totalCalc = Double.parseDouble(row[23].toString().trim()) + Double.parseDouble(row[24].toString().trim()) + Double.parseDouble(row[25].toString().trim());

                    brigBuilder = new StringBuilder().append(row[26].toString().trim()).append(" ").append(row[27].toString().trim());
                    grupBuilder = new StringBuilder().append(row[28].toString().trim()).append(" ").append(row[29].toString().trim());

                    datosPlanificacionMesUO = new DatosPlanificacionMesUO(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), Double.parseDouble(row[25].toString().trim()), Math.round(totalCalc * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ");
                    datosPlanificacionMesUOArrayList.add(datosPlanificacionMesUO);
                }

            } else if (niveles == 9) {
                for (Object[] row : listPlan) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    totalCalc = Double.parseDouble(row[23].toString().trim()) + Double.parseDouble(row[24].toString().trim()) + Double.parseDouble(row[25].toString().trim());

                    brigBuilder = new StringBuilder().append(row[26].toString().trim()).append(" ").append(row[27].toString().trim());
                    grupBuilder = new StringBuilder().append(row[28].toString().trim()).append(" ").append(row[29].toString().trim());
                    cuadBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());

                    datosPlanificacionMesUO = new DatosPlanificacionMesUO(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), Double.parseDouble(row[25].toString().trim()), Math.round(totalCalc * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                    datosPlanificacionMesUOArrayList.add(datosPlanificacionMesUO);
                }
            }
            tx.commit();
            session.close();
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setHeaderText("Error: " + CalForReport.class.getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();
        } finally {
            session.close();
        }
        return datosPlanificacionMesUOArrayList;
    }

    public ArrayList<GroupToReport> getEmpresaInArrayRVModels
            (ArrayList<RenglonVarianteReportModel> uoReportModelArray, Obra obra) {
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        for (RenglonVarianteReportModel uoreprt : uoReportModelArray) {
            GroupToReport groupToReport = new GroupToReport(uoreprt.getIdEmpesa(), uoreprt.getEmpresa(), obra.getSalarioBySalarioId().getTag());
            if (groupToReportsArrayList.size() == 0) {
                groupToReportsArrayList.add(groupToReport);
            } else if (!groupToReportsArrayList.contains(groupToReport)) {
                groupToReportsArrayList.add(groupToReport);
            }
        }
        return groupToReportsArrayList;
    }

    public ArrayList<GroupToReport> getEmpresaInArrayDCModels
            (ArrayList<DatosCertificacionOrigen> datosArrayList, Obra obra) {
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        for (DatosCertificacionOrigen uoreprt : datosArrayList) {
            GroupToReport groupToReport = new GroupToReport(uoreprt.getIdEmpresa(), uoreprt.getEmpresa(), obra.getSalarioBySalarioId().getTag());
            if (groupToReportsArrayList.size() == 0) {
                groupToReportsArrayList.add(groupToReport);
            } else if (!groupToReportsArrayList.contains(groupToReport)) {
                groupToReportsArrayList.add(groupToReport);
            }
        }
        return groupToReportsArrayList;
    }

    public ArrayList<DatosPlanificacionMesUORV> getDatosPlanificacionMesUORVRVModelArrayList(ReportesController
                                                                                                     reportes, String query, String queryM) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            planificacionMesUORVArrayList = new ArrayList<DatosPlanificacionMesUORV>();

            ArrayList<DatosPlanificacionMesUORV> temp = new ArrayList<DatosPlanificacionMesUORV>();
            List<Object[]> query2 = session.createQuery(queryM).getResultList();
            total = null;

            List<Object[]> query1 = session.createQuery(query).getResultList();
            for (Object[] row : query1) {
                empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                zonaBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                nivelBild = new StringBuilder().append(row[10].toString().trim()).append(" ").append(row[11].toString().trim());
                especialidadBild = new StringBuilder().append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                subBild = new StringBuilder().append(row[16].toString().trim()).append(" ").append(row[17].toString().trim());
                uocode = new StringBuilder().append(" RV ").append(row[25].toString().trim()).append(" ").append(row[26].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(row[27].toString().trim());
                total = Double.parseDouble(row[23].toString().trim()) + Double.parseDouble(row[24].toString().trim());

                brigBuilder = new StringBuilder().append(row[28].toString().trim()).append(" ").append(row[29].toString().trim());
                grupBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                if (row[32] != null) {
                    cuadBuilder = new StringBuilder().append(row[32].toString().trim()).append(" ").append(row[33].toString().trim());
                } else {
                    cuadBuilder = new StringBuilder().append(" ");
                }


                datosPlanificacionMesUORV = new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), 0.0, Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), total, row[25].toString().trim(), row[26].toString().trim(), row[27].toString().trim(), Double.parseDouble(row[22].toString().trim()), 0.0, Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), total, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                temp.add(datosPlanificacionMesUORV);


            }

            for (Object[] row : query2) {
                empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                zonaBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                nivelBild = new StringBuilder().append(row[10].toString().trim()).append(" ").append(row[11].toString().trim());
                especialidadBild = new StringBuilder().append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                subBild = new StringBuilder().append(row[16].toString().trim()).append(" ").append(row[17].toString().trim());
                uocode = new StringBuilder().append(" RV ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                total = Double.parseDouble(row[24].toString().trim());

                brigBuilder = new StringBuilder().append(row[28].toString().trim()).append(" ").append(row[29].toString().trim());
                grupBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                if (row[32] == null) {
                    cuadBuilder = new StringBuilder().append(" ");

                } else if (row[32] != null) {
                    cuadBuilder = new StringBuilder().append(row[32].toString().trim()).append(" ").append(row[33].toString().trim());
                }

                if (row[35].toString().trim().startsWith("1")) {
                    recursos = getRecursosa(Integer.parseInt(row[34].toString().trim()));
                    cantRV = Double.parseDouble(row[23].toString().trim());
                    mateRV = Double.parseDouble(row[24].toString().trim());
                    manoRV = 0.0;
                    equpRV = 0.0;
                    datosPlanificacionMesUORV = new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Math.round(total * 100d) / 100d, recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Math.round(cantRV * 100d) / 100d, Math.round(mateRV * 100d) / 100d, Math.round(manoRV * 100d) / 100d, Math.round(equpRV * 100d) / 100d, Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                    temp.add(datosPlanificacionMesUORV);

                } else if (row[35].toString().trim().startsWith("J")) {
                    juegoproducto = getJuegoproducto(Integer.parseInt(row[34].toString().trim()));

                    cantRV = Double.parseDouble(row[23].toString().trim());
                    mateRV = Double.parseDouble(row[24].toString().trim());
                    manoRV = 0.0;
                    equpRV = 0.0;

                    datosPlanificacionMesUORV = new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Math.round(total * 100d) / 100d, juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Math.round(cantRV * 100d) / 100d, Math.round(mateRV * 100d) / 100d, Math.round(manoRV * 100d) / 100d, Math.round(equpRV * 100d) / 100d, Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                    temp.add(datosPlanificacionMesUORV);

                } else if (row[35].toString().trim().startsWith("S")) {
                    suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[34].toString().trim()));

                    cantRV = Double.parseDouble(row[23].toString().trim());
                    mateRV = Double.parseDouble(row[24].toString().trim());
                    manoRV = 0.0;
                    equpRV = 0.0;

                    datosPlanificacionMesUORV = new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Math.round(total * 100d) / 100d, suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Math.round(cantRV * 100d) / 100d, Math.round(mateRV * 100d) / 100d, Math.round(manoRV * 100d) / 100d, Math.round(equpRV * 100d) / 100d, Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                    temp.add(datosPlanificacionMesUORV);
                }

            }

            Collections.sort(temp);
            planificacionMesUORVArrayList.addAll(temp);


            tx.commit();
            session.close();
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();
            /*
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setHeaderText(this.getClass().getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();
*/
        } finally {
            session.close();
        }

        return planificacionMesUORVArrayList;

    }

    public ArrayList<GroupToReport> getEmpresasInPlanificacionMes
            (ArrayList<DatosPlanificacionMesUO> datosArrayList, Obra obra) {
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        for (DatosPlanificacionMesUO uoreprt : datosArrayList) {
            GroupToReport groupToReport = new GroupToReport(uoreprt.getIdEmpresa(), uoreprt.getEmpresa(), obra.getSalarioBySalarioId().getTag());
            if (groupToReportsArrayList.size() == 0) {
                groupToReportsArrayList.add(groupToReport);
            } else if (!groupToReportsArrayList.contains(groupToReport)) {
                groupToReportsArrayList.add(groupToReport);
            }
        }
        return groupToReportsArrayList;
    }

    public ArrayList<GroupToReport> getEmpresasInPlanificacionMesUORV
            (ArrayList<DatosPlanificacionMesUORV> datosArrayList, Obra obra) {
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        for (DatosPlanificacionMesUORV uoreprt : datosArrayList) {
            GroupToReport groupToReport = new GroupToReport(uoreprt.getIdEmpresa(), uoreprt.getEmpresa(), obra.getSalarioBySalarioId().getTag());
            if (groupToReportsArrayList.size() == 0) {
                groupToReportsArrayList.add(groupToReport);
            } else if (!groupToReportsArrayList.contains(groupToReport)) {
                groupToReportsArrayList.add(groupToReport);
            }
        }
        return groupToReportsArrayList;
    }

    public ArrayList<PresupuestoUO> createReportesUOFormater(ReportesController
                                                                     reportes, ArrayList<UOReportModel> uoReportModelArray, Obra obra) {
        reportesController = reportes;
        presupuestoUOArrayList = new ArrayList<>();
        groupToReportsArrayList = new ArrayList<>();
        uoReportModelArrayList = new ArrayList<>();
        uoReportModelArrayList = uoReportModelArray;
        temp = new ArrayList<>();

        groupToReportsArrayList = getEmpresaInArray(uoReportModelArrayList, obra);

        for (GroupToReport ent : groupToReportsArrayList) {
            presupuestoUOArrayList = getDatosReporteUOArrayList(uoReportModelArrayList, ent, 0, obra);
            temp.addAll(presupuestoUOArrayList);
        }

        return temp;
    }

    public ArrayList<PresupuestoUORVN> createReportesUORVFormater(ReportesController
                                                                          reportes, ArrayList<RenglonVarianteReportModel> uoReportModelArray, Obra obra) {
        reportesController = reportes;
        presupuestoUORVNArrayList = new ArrayList<PresupuestoUORVN>();
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        renglonVarianteReportModelArrayList = new ArrayList<RenglonVarianteReportModel>();
        renglonVarianteReportModelArrayList = uoReportModelArray;

        groupToReportsArrayList = getEmpresaInArrayRVModels(renglonVarianteReportModelArrayList, obra);

        temp2 = new ArrayList<>();

        for (GroupToReport ent : groupToReportsArrayList) {
            presupuestoUORVNArrayList = getDatosReporteUORVArrayList(renglonVarianteReportModelArrayList, ent, obra);
            temp2.addAll(presupuestoUORVNArrayList);

        }

        return temp2;
    }

    public ArrayList<DatosCertificacionOrigenUORV> getDatosCertificacionOrigenUOinRVArrayList(ReportesController
                                                                                                      reportes, String query, String queryM, Integer niveles, int idOb) {

        ArrayList<DatosCertificacionOrigenUORV> temp = new ArrayList<>();
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            datosCertificacionOrigenUORVArrayList = new ArrayList<>();
            List<Object[]> datosCertif = session.createQuery(query).getResultList();
            List<Object[]> listObjects = session.createQuery(queryM).getResultList();
            Obra obraS = structureSingelton.getObra(idOb);
            if (niveles <= 6) {
                for (Object[] row : datosCertif) {
                    coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    List<Empresaobratarifa> tariList = util.getEmpresaobratarifaList(obraS.getId(), Integer.parseInt(row[0].toString().trim()), obraS.getTarifaSalarialByTarifa().getId());
                    uocode = new StringBuilder().append("UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append("   ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    unidadobrarenglon = structureSingelton.getUnidadobrarenglon(Integer.parseInt(row[18].toString().trim()), Integer.parseInt(row[33].toString().trim()));
                    if (unidadobrarenglon.getConMat().trim() != null && unidadobrarenglon.getConMat().trim().equals("0")) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[33].toString().trim())).findFirst().get();
                        double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                        double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                        double totalValCalc = 0.0 + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo;
                        datosCertificacionOrigenUORVArrayList.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), 0.0, costoMano * coeficienteMano, costoEq * coeficienteEquipo, 0.0 + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), 0.0, Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, totalValCalc, " ", " ", " ", 0, 1));
                    } else if (unidadobrarenglon.getConMat().trim() != null && unidadobrarenglon.getConMat().trim().equals("1")) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[33].toString().trim())).findFirst().get();
                        double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                        double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                        double totalValCalc = Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat() + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo;
                        datosCertificacionOrigenUORVArrayList.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), renglonvariante.getCostomat(), costoMano * coeficienteMano, costoEq * coeficienteEquipo, Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat() + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat(), Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, totalValCalc, " ", " ", " ", 0, 1));
                    }
                }
                for (Object[] row : listObjects) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append("UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append("   ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    // totalCalc = Double.parseDouble(row[24].toString().trim());
                    if (row[25] != null) {
                        if (row[25].toString().trim().startsWith("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[26].toString().trim()));
                            if (recursos != null) {
                                datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), " ", " ", " ", 0, 1);
                            }
                            temp.add(datosCertificacionOrigenUORV);
                        } else if (row[25].toString().trim().startsWith("J")) {
                            juegoproducto = getJuegoproducto(Integer.parseInt(row[26].toString().trim()));
                            if (juegoproducto != null) {
                                datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), " ", " ", " ", 0, 1);
                            }
                            temp.add(datosCertificacionOrigenUORV);
                        } else if (row[25].toString().trim().startsWith("S")) {
                            suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[26].toString().trim()));
                            if (suministrossemielaborados != null) {
                                datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), " ", " ", " ", 0, 1);
                            }
                            temp.add(datosCertificacionOrigenUORV);
                        }
                    }
                }

            } else if (niveles == 7) {
                for (Object[] row : datosCertif) {
                    coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append("UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append("   ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    brigBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                    List<Empresaobratarifa> tariList = util.getEmpresaobratarifaList(obraS.getId(), Integer.parseInt(row[0].toString().trim()), obraS.getTarifaSalarialByTarifa().getId());
                    unidadobrarenglon = structureSingelton.getUnidadobrarenglon(Integer.parseInt(row[18].toString().trim()), Integer.parseInt(row[35].toString().trim()));
                    if (unidadobrarenglon.getConMat().trim().equals("0")) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[35].toString().trim())).findFirst().get();
                        double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                        double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                        double totalValCalc = 0.0 + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo;
                        datosCertificacionOrigenUORVArrayList.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), 0.0, costoMano * coeficienteMano, costoEq * coeficienteEquipo, 0.0 + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), 0.0, Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, totalValCalc, brigBuilder.toString().trim(), " ", " ", 0, 1));
                    } else if (unidadobrarenglon.getConMat().trim().equals("1")) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[35].toString().trim())).findFirst().get();
                        double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                        double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                        double totalValCalc = Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat() + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo;
                        datosCertificacionOrigenUORVArrayList.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), renglonvariante.getCostomat(), costoMano * coeficienteMano, costoEq * coeficienteEquipo, Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat() + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat(), Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, totalValCalc, brigBuilder.toString().trim(), " ", " ", 0, 1));
                    }

                }

                for (Object[] row : listObjects) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append("UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append("   ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    totalCalc = Double.parseDouble(row[24].toString().trim());
                    brigBuilder = new StringBuilder().append(row[25].toString().trim()).append(" ").append(row[26].toString().trim());

                    if (row[27].toString().trim().startsWith("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[28].toString().trim()));
                        temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), brigBuilder.toString().trim(), " ", " ", 0, 1));
                    } else if (row[27].toString().trim().startsWith("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[28].toString().trim()));
                        temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), brigBuilder.toString().trim(), " ", " ", 0, 1));
                    } else if (row[27].toString().trim().startsWith("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[28].toString().trim()));
                        temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), suministrossemielaborados.getPreciomn(), 0.0, 0.0, totalCalc * 100d, suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), brigBuilder.toString().trim(), " ", " ", 0, 1));
                    }

                }
            } else if (niveles == 8) {
                for (Object[] row : datosCertif) {
                    coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);

                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append("UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append("   ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    brigBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                    grupBuilder = new StringBuilder().append(row[32].toString().trim()).append(" ").append(row[33].toString().trim());
                    List<Empresaobratarifa> tariList = util.getEmpresaobratarifaList(obraS.getId(), Integer.parseInt(row[0].toString().trim()), obraS.getTarifaSalarialByTarifa().getId());
                    unidadobrarenglon = structureSingelton.getUnidadobrarenglon(Integer.parseInt(row[18].toString().trim()), Integer.parseInt(row[37].toString().trim()));
                    if (unidadobrarenglon.getConMat().trim().equals("0")) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[37].toString().trim())).findFirst().get();
                        double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                        double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                        double totalValCalc = 0.0 + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo;
                        datosCertificacionOrigenUORVArrayList.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), 0.0, costoMano * coeficienteMano, costoEq * coeficienteEquipo, 0.0 + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), 0.0, Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, totalValCalc, brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ", 0, 1));
                    } else if (unidadobrarenglon.getConMat().trim().equals("1")) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[37].toString().trim())).findFirst().get();
                        double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                        double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                        double totalValCalc = Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat() + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo;
                        datosCertificacionOrigenUORVArrayList.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), renglonvariante.getCostomat(), costoMano * coeficienteMano, costoEq * coeficienteEquipo, Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat() + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat(), Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, totalValCalc, brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ", 0, 1));
                    }
                }

                for (Object[] row : listObjects) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append("UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append("   ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    totalCalc = Double.parseDouble(row[24].toString().trim());

                    brigBuilder = new StringBuilder().append(row[25].toString().trim()).append(" ").append(row[26].toString().trim());
                    grupBuilder = new StringBuilder().append(row[27].toString().trim()).append(" ").append(row[28].toString().trim());

                    if (row[29].toString().trim().startsWith("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[30].toString().trim()));
                        temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ", 0, 1));


                    } else if (row[29].toString().trim().startsWith("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[30].toString().trim()));
                        temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ", 0, 1));
                    } else if (row[29].toString().trim().startsWith("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[30].toString().trim()));
                        temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ", 0, 1));
                    }
                }
            } else if (niveles == 9) {
                for (Object[] row : datosCertif) {
                    coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);

                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append("UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append("   ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    brigBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                    grupBuilder = new StringBuilder().append(row[32].toString().trim()).append(" ").append(row[33].toString().trim());
                    cuadBuilder = new StringBuilder().append(row[34].toString().trim()).append(" ").append(row[35].toString().trim());
                    List<Empresaobratarifa> tariList = util.getEmpresaobratarifaList(obraS.getId(), Integer.parseInt(row[0].toString().trim()), obraS.getTarifaSalarialByTarifa().getId());
                    unidadobrarenglon = structureSingelton.getUnidadobrarenglon(Integer.parseInt(row[18].toString().trim()), Integer.parseInt(row[39].toString().trim()));
                    if (unidadobrarenglon.getConMat().trim().equals("0")) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[39].toString().trim())).findFirst().get();
                        double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                        double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                        double totalValCalc = 0.0 + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo;
                        datosCertificacionOrigenUORVArrayList.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), 0.0, costoMano * coeficienteMano, costoEq * coeficienteEquipo, 0.0 + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), 0.0, Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, totalValCalc, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), 0, 1));
                    } else if (unidadobrarenglon.getConMat().trim().equals("1")) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[39].toString().trim())).findFirst().get();
                        double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                        double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                        double totalValCalc = Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat() + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo;
                        datosCertificacionOrigenUORVArrayList.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), renglonvariante.getCostomat(), costoMano * coeficienteMano, costoEq * coeficienteEquipo, Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat() + Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * renglonvariante.getCostomat(), Double.parseDouble(row[23].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[23].toString().trim()) * costoEq * coeficienteEquipo, totalValCalc, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), 0, 1));
                    }

                }

                for (Object[] row : listObjects) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append("UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append("   ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    totalCalc = Double.parseDouble(row[24].toString().trim());

                    brigBuilder = new StringBuilder().append(row[25].toString().trim()).append(" ").append(row[26].toString().trim());
                    grupBuilder = new StringBuilder().append(row[27].toString().trim()).append(" ").append(row[28].toString().trim());
                    if (row[29] == null || row[30] == null) {
                        cuadBuilder = new StringBuilder().append(" ");
                    } else {
                        cuadBuilder = new StringBuilder().append(row[29].toString().trim()).append(" ").append(row[30].toString().trim());
                    }
                    if (row[31].toString().trim().startsWith("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[32].toString().trim()));
                        temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * recursos.getPreciomn(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), 0, 1));


                    } else if (row[31].toString().trim().startsWith("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[32].toString().trim()));
                        temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), 0, 1));


                    } else if (row[31].toString().trim().startsWith("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[32].toString().trim()));
                        temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), 0, 1));

                    }
                }
            }

            datosCertificacionOrigenUORVArrayList.addAll(temp);

            tx.commit();
            session.close();
            return datosCertificacionOrigenUORVArrayList;

        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();

            /*
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setHeaderText("Error: " + CalForReport.class.getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();
*/

        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    public List<GroupToReport> getEmpresaInArrayRVExtendsModels
            (ArrayList<RenglonVarianteReportModelExtend> uoReportModelArray, Obra obra) {
        groupToReportsArrayList = new ArrayList<>();

        for (RenglonVarianteReportModelExtend uoreprt : uoReportModelArray) {
            GroupToReport groupToReport = new GroupToReport(uoreprt.getIdEmpesa(), uoreprt.getEmpresa(), obra.getSalarioBySalarioId().getTag());
            if (groupToReportsArrayList.size() == 0) {
                groupToReportsArrayList.add(groupToReport);
            } else if (!groupToReportsArrayList.contains(groupToReport)) {
                groupToReportsArrayList.add(groupToReport);
            }
        }
        return groupToReportsArrayList;
    }

    public ArrayList<CertificacionOrigenUO> createReportesCOUOFormater(ReportesController
                                                                               reportes, ArrayList<DatosCertificacionOrigen> certificacionOrigensArry, Obra obra) {
        reportesController = reportes;
        certificacionOrigenUOArrayList = new ArrayList<CertificacionOrigenUO>();
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        datosCertificacionOrigenArrayList = new ArrayList<DatosCertificacionOrigen>();
        datosCertificacionOrigenArrayList = certificacionOrigensArry;

        groupToReportsArrayList = getEmpresaInArrayDCModels(datosCertificacionOrigenArrayList, obra);

        tempcertO = new ArrayList<>();
        for (GroupToReport ent : groupToReportsArrayList) {
            certificacionOrigenUOArrayList = getDatosReporteVertificacionOrigenUOArrayList(datosCertificacionOrigenArrayList, ent, obra);
            tempcertO.addAll(certificacionOrigenUOArrayList);
        }

        return tempcertO;
    }

    /**
     * Para las certificaciones y el plan
     */

    public ArrayList<PlanificacionMesUO> createReportesPlanMesUOFormater(ReportesController
                                                                                 reportes, ArrayList<DatosPlanificacionMesUO> datosPlanificacionMes, Obra obra) {
        reportesController = reportes;
        planificacionMesUOArrayList = new ArrayList<PlanificacionMesUO>();
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        datosPlanificacionMesUOArrayList = new ArrayList<DatosPlanificacionMesUO>();
        datosPlanificacionMesUOArrayList = datosPlanificacionMes;


        groupToReportsArrayList = getEmpresasInPlanificacionMes(datosPlanificacionMesUOArrayList, obra);

        tempplan = new ArrayList<>();
        for (GroupToReport ent : groupToReportsArrayList) {
            planificacionMesUOArrayList = getDatosPlanificacionMesUOArrayList(datosPlanificacionMesUOArrayList, ent, obra);
            tempplan.addAll(planificacionMesUOArrayList);
        }

        return tempplan;
    }

    public ArrayList<PlanificacionMesUOinRV> createReportesPlanMesUORVFormater(ReportesController
                                                                                       reportes, ArrayList<DatosPlanificacionMesUORV> datosPlanificacionMes, Obra obra) {
        reportesController = reportes;
        planificacionMesUOinRVArrayList = new ArrayList<PlanificacionMesUOinRV>();
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        planificacionMesUORVArrayList = new ArrayList<DatosPlanificacionMesUORV>();
        planificacionMesUORVArrayList = datosPlanificacionMes;

        groupToReportsArrayList = getEmpresasInPlanificacionMesUORV(planificacionMesUORVArrayList, obra);
        collectionPlanUORV = new ArrayList<>();
        groupToReportsArrayList.forEach(ent -> {
            planificacionMesUOinRVArrayList = getDatosReportePlanificacionMesUOinRVArrayList(planificacionMesUORVArrayList, ent, obra);
            collectionPlanUORV.addAll(planificacionMesUOinRVArrayList);
        });

        return collectionPlanUORV;
    }

    public ArrayList<PresupuestoUO> getDatosReporteUOArrayList
            (ArrayList<UOReportModel> uoReportModelArray, GroupToReport groupToReport, int niveles, Obra obra) {
        listConceptos = new ArrayList<ConceptosReporte>();
        presupuestoUOArrayList = new ArrayList<PresupuestoUO>();

        gastosDirectos = new Double[3];
        gastosDirectos = calcPresuUOGastosDirectos(uoReportModelArray, groupToReport);
        listConceptos = createConceptosList(gastosDirectos, groupToReport.getIdEmpresa(), obra);
        for (UOReportModel arrayUO : uoReportModelArray) {
            if (arrayUO.getIdEmp() == groupToReport.getIdEmpresa() && arrayUO.getEmpresa().contentEquals(groupToReport.getEmpresaName())) {
                presupuestoUOArrayList.add(new PresupuestoUO(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getIdZona(), arrayUO.getZona(), arrayUO.getIdObj(), arrayUO.getObjeto(), arrayUO.getIdONiv(), arrayUO.getNivel(), arrayUO.getIdEsp(), arrayUO.getEspecialidad(), arrayUO.getIdSub(), arrayUO.getSubespacialidad(), arrayUO.getCode(), arrayUO.getDescripcion(), arrayUO.getUm(), arrayUO.getCantidad(), arrayUO.getCostoUnitario(), arrayUO.getCostoTotal(), arrayUO.getCostoMaterial(), arrayUO.getCostoMano(), arrayUO.getCostEquipo(), listConceptos));
            }
        }
        return presupuestoUOArrayList;

    }

    public Double[] calcPresuUOGastosDirectos(ArrayList<UOReportModel> uoReportModelArray, GroupToReport
            groupToReport) {
        Double[] valuesGastosDirectos = new Double[3];
        valuesGastosDirectos[0] = uoReportModelArray.parallelStream().filter(uoR -> uoR.getIdEmp() == groupToReport.getIdEmpresa()).map(UOReportModel::getCostoMaterial).reduce(0.0, Double::sum);
        valuesGastosDirectos[1] = uoReportModelArray.parallelStream().filter(uoR -> uoR.getIdEmp() == groupToReport.getIdEmpresa()).map(UOReportModel::getCostoMano).reduce(0.0, Double::sum);
        valuesGastosDirectos[2] = uoReportModelArray.parallelStream().filter(uoR -> uoR.getIdEmp() == groupToReport.getIdEmpresa()).map(UOReportModel::getCostEquipo).reduce(0.0, Double::sum);

        return valuesGastosDirectos;

    }

    public ArrayList<PresupuestoUORVN> getDatosReporteUORVArrayList
            (ArrayList<RenglonVarianteReportModel> uoReportModelArray, GroupToReport groupToReport, Obra obra) {
        listConceptos = new ArrayList<ConceptosReporte>();
        presupuestoUORVNArrayList = new ArrayList<PresupuestoUORVN>();
        gastosDirectos = new Double[3];
        gastosDirectos = calcPresuUORVGastosDirectos(uoReportModelArray, groupToReport);
        listConceptos = createConceptosList(gastosDirectos, groupToReport.getIdEmpresa(), obra);
        for (RenglonVarianteReportModel arrayUO : uoReportModelArray) {
            if (arrayUO.getIdEmpesa() == groupToReport.getIdEmpresa()) {
                presupuestoUORVNArrayList.add(new PresupuestoUORVN(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getIdZona(), arrayUO.getZona(), arrayUO.getIdObjeto(), arrayUO.getObjeto(), arrayUO.getIdNivel(), arrayUO.getNivel(), arrayUO.getIdEspecialidad(), arrayUO.getEspecialidad(), arrayUO.getIdSub(), arrayUO.getSubespecialidad(), arrayUO.getIdUnidad(), arrayUO.getUnidad(), arrayUO.getDescripUnidad(), arrayUO.getUoUM(), arrayUO.getCantUO(), arrayUO.getUoTotal(), arrayUO.getId(), arrayUO.getCodigo(), arrayUO.getDescripcion(), arrayUO.getUm(), arrayUO.getCantidad(), arrayUO.getMaterial(), arrayUO.getMano(), arrayUO.getEquip(), arrayUO.getCostMat(), arrayUO.getCostMano(), arrayUO.getCostEquip(), arrayUO.getTotal(), listConceptos));

            }
        }
        return presupuestoUORVNArrayList;

    }

    public ArrayList<PresupuestoUORVNExtend> createReportesUORVExtendFormater(ReportesController
                                                                                      reportes, ArrayList<RenglonVarianteReportModelExtend> uoReportModelArray, Obra obra) {
        reportesController = reportes;
        presupuestoUORVNExtendArrayList = new ArrayList<>();
        listEmpresas = new ArrayList<>();

        renglonVarianteReportModelExtendArrayList = new ArrayList<>();
        renglonVarianteReportModelExtendArrayList = uoReportModelArray;
        listEmpresas = getEmpresaInArrayRVExtendsModels(renglonVarianteReportModelExtendArrayList, obra);

        tempExtendArrayList = new ArrayList<>();

        for (GroupToReport ent : listEmpresas.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
            presupuestoUORVNExtendArrayList = getDatosReporteUORVUorvnExtends(renglonVarianteReportModelExtendArrayList, ent, obra);
            tempExtendArrayList.addAll(presupuestoUORVNExtendArrayList);

        }
        return tempExtendArrayList;
    }

    public ArrayList<PresupuestoUORVNExtend> getDatosReporteUORVUorvnExtends
            (ArrayList<RenglonVarianteReportModelExtend> uoReportModelArray, GroupToReport groupToReport, Obra obra) {
        listConceptos = new ArrayList<>();
        presupuestoUORVNExtendArrayList = new ArrayList<>();
        gastosDirectos = new Double[3];
        gastosDirectos = calcPresuUORVExtendsDoubles(uoReportModelArray, groupToReport);
        listConceptos = createConceptosList(gastosDirectos, groupToReport.getIdEmpresa(), obra);


        for (RenglonVarianteReportModelExtend arrayUO : uoReportModelArray) {
            if (arrayUO.getIdEmpesa() == groupToReport.getIdEmpresa()) {
                presupuestoUORVNExtendArrayList.add(new PresupuestoUORVNExtend(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getIdZona(), arrayUO.getZona(), arrayUO.getIdObjeto(), arrayUO.getObjeto(), arrayUO.getIdNivel(), arrayUO.getNivel(), arrayUO.getIdEspecialidad(), arrayUO.getEspecialidad(), arrayUO.getIdSub(), arrayUO.getSubespecialidad(), arrayUO.getIdUnidad(), arrayUO.getUnidad(), arrayUO.getDescripUnidad(), arrayUO.getUoUM(), arrayUO.getCantUO(), arrayUO.getUoTotal(), arrayUO.getId(), arrayUO.getCodigo(), arrayUO.getDescripcion(), arrayUO.getUm(), arrayUO.getCantidad(), arrayUO.getMaterial(), arrayUO.getMano(), arrayUO.getEquip(), arrayUO.getCostMat(), arrayUO.getCostMano(), arrayUO.getCostEquip(), arrayUO.getTotal(), arrayUO.getSobreGrup(), arrayUO.getRvGrup(), arrayUO.getSubreGrup, listConceptos));

            }
        }
        return presupuestoUORVNExtendArrayList;

    }

    public Double[] calcPresuUORVGastosDirectos
            (ArrayList<RenglonVarianteReportModel> uoReportModelArray, GroupToReport groupToReport) {
        valuesGastosDirectos = new Double[3];
        valuesGastosDirectos[0] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpesa() == groupToReport.getIdEmpresa()).map(RenglonVarianteReportModel::getCostMat).reduce(0.0, Double::sum);
        valuesGastosDirectos[1] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpesa() == groupToReport.getIdEmpresa()).map(RenglonVarianteReportModel::getCostMano).reduce(0.0, Double::sum);
        valuesGastosDirectos[2] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpesa() == groupToReport.getIdEmpresa()).map(RenglonVarianteReportModel::getCostEquip).reduce(0.0, Double::sum);

        return valuesGastosDirectos;
    }

    public ArrayList<CertificacionOrigenUO> getDatosReporteVertificacionOrigenUOArrayList
            (ArrayList<DatosCertificacionOrigen> uoReportModelArray, GroupToReport groupToReport, Obra obra) {
        listConceptos = new ArrayList<ConceptosReporte>();
        certificacionOrigenUOArrayList = new ArrayList<CertificacionOrigenUO>();

        gastosDirectos = new Double[3];
        gastosDirectos = calcVertificacionOrigenUOGastosDirectos(uoReportModelArray, groupToReport);
        listConceptos = createConceptosList(gastosDirectos, groupToReport.getIdEmpresa(), obra);
        for (DatosCertificacionOrigen arrayUO : uoReportModelArray) {
            if (arrayUO.getIdEmpresa() == groupToReport.getIdEmpresa() && arrayUO.getEmpresa().contentEquals(groupToReport.getEmpresaName())) {

                certificacionOrigenUO = new CertificacionOrigenUO(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getIdZona(), arrayUO.getZona(), arrayUO.getIdObjeto(), arrayUO.getObjeto(), arrayUO.getIdNivel(), arrayUO.getNivel(), arrayUO.getIdEspecialidad(), arrayUO.getEspecialidad(), arrayUO.getIdSub(), arrayUO.getSubespecialidad(), arrayUO.getIdUnidad(), arrayUO.getUnidad(), arrayUO.getDescripUnidad(), arrayUO.getUoUM(), arrayUO.getCantidad(), arrayUO.getCostMateriales(), arrayUO.getCostMano(), arrayUO.getCostEquipo(), arrayUO.getCostTotal(), arrayUO.getBrigada(), arrayUO.getGrupo(), arrayUO.getCuadrilla(), listConceptos);
                certificacionOrigenUOArrayList.add(certificacionOrigenUO);
            }
        }

        return certificacionOrigenUOArrayList;

    }

    public Double[] calcVertificacionOrigenUOGastosDirectos
            (ArrayList<DatosCertificacionOrigen> uoReportModelArray, GroupToReport groupToReport) {

        Double[] valuesGastosDirectos = new Double[3];
        valuesGastosDirectos[0] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosCertificacionOrigen::getCostMateriales).reduce(0.0, Double::sum);
        valuesGastosDirectos[1] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosCertificacionOrigen::getCostMano).reduce(0.0, Double::sum);
        valuesGastosDirectos[2] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosCertificacionOrigen::getCostEquipo).reduce(0.0, Double::sum);

        return valuesGastosDirectos;

    }

    public ArrayList<PlanificacionMesUO> getDatosPlanificacionMesUOArrayList
            (ArrayList<DatosPlanificacionMesUO> uoReportModelArray, GroupToReport groupToReport, Obra obra) {
        listConceptos = new ArrayList<ConceptosReporte>();
        planificacionMesUOArrayList = new ArrayList<PlanificacionMesUO>();

        gastosDirectos = new Double[3];
        gastosDirectos = calcPlanificacionMesUOGastosDirectos(uoReportModelArray, groupToReport);
        listConceptos = createConceptosList(gastosDirectos, groupToReport.getIdEmpresa(), obra);

        for (DatosPlanificacionMesUO arrayUO : uoReportModelArray) {
            if (arrayUO.getIdEmpresa() == groupToReport.getIdEmpresa() && arrayUO.getEmpresa().contentEquals(groupToReport.getEmpresaName())) {
                planificacionMesUO = new PlanificacionMesUO(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getIdZona(), arrayUO.getZona(), arrayUO.getIdObjeto(), arrayUO.getObjeto(), arrayUO.getIdNivel(), arrayUO.getNivel(), arrayUO.getIdEspecialidad(), arrayUO.getEspecialidad(), arrayUO.getIdSub(), arrayUO.getSubespecialidad(), arrayUO.getIdUnidad(), arrayUO.getUnidad(), arrayUO.getDescripUnidad(), arrayUO.getUoUM(), arrayUO.getCantidad(), arrayUO.getCostMateriales(), arrayUO.getCostMano(), arrayUO.getCostEquipo(), arrayUO.costTotal, arrayUO.getBrigada(), arrayUO.getGrupo(), arrayUO.getCuadrilla(), listConceptos);
                planificacionMesUOArrayList.add(planificacionMesUO);
            }
        }

        return planificacionMesUOArrayList;

    }

    public Double[] calcPlanificacionMesUOGastosDirectos
            (ArrayList<DatosPlanificacionMesUO> uoReportModelArray, GroupToReport groupToReport) {

        Double[] valuesGastosDirectos = new Double[3];
        valuesGastosDirectos[0] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosPlanificacionMesUO::getCostMateriales).reduce(0.0, Double::sum);
        valuesGastosDirectos[1] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosPlanificacionMesUO::getCostMano).reduce(0.0, Double::sum);
        valuesGastosDirectos[2] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosPlanificacionMesUO::getCostEquipo).reduce(0.0, Double::sum);

        return valuesGastosDirectos;

    }

    public ArrayList<DatosCertificacionOrigenUORV> getDatosCERTIFORIGENUPDATE(ReportesController reportes, String
            query, String queryM, Integer niveles, int idOb) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            datosCertificacionOrigenUORVArrayList = new ArrayList<>();
            ArrayList<DatosCertificacionOrigenUORV> temp = new ArrayList<>();
            List<Object[]> datosCertif = session.createQuery(query).getResultList();
            List<Object[]> listObjects = session.createQuery(queryM).getResultList();
            Obra obraS = structureSingelton.getObra(idOb);
            listObjects.size();
            if (niveles <= 6) {
                for (Object[] row : datosCertif) {
                    coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    List<Empresaobratarifa> tariList = util.getEmpresaobratarifaList(obraS.getId(), Integer.parseInt(row[0].toString().trim()), obraS.getTarifaSalarialByTarifa().getId());
                    Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[32].toString().trim())).findFirst().get();
                    double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                    double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                    double totalCosto = 0.0 + Double.parseDouble(row[22].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[22].toString().trim()) * costoEq * coeficienteEquipo;
                    temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + Double.toString(getCantidadCertificada(Integer.parseInt(row[18].toString().trim()))) + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), 0.0, costoMano * coeficienteMano, costoEq * coeficienteEquipo, totalCosto, row[26].toString().trim(), row[27].toString().trim(), row[28].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[22].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[22].toString().trim()) * costoEq * coeficienteEquipo, totalCosto, " ", " ", " ", 1, 1));

                }

                for (Object[] row : listObjects) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    if (row[24] != null) {
                        if (row[24].toString().trim().equals("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[25].toString().trim()));
                            temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + String.valueOf(getCantidadCertificada(Integer.parseInt(row[18].toString().trim()))) + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()), " ", " ", " ", 1, 1));
                        } else if (row[24].toString().trim().equals("J")) {
                            juegoproducto = getJuegoproducto(Integer.parseInt(row[25].toString().trim()));
                            datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + String.valueOf(getCantidadCertificada(Integer.parseInt(row[18].toString().trim()))) + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()), " ", " ", " ", 1, 1);
                            temp.add(datosCertificacionOrigenUORV);

                        } else if (row[24].toString().trim().equals("S")) {
                            suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[25].toString().trim()));
                            datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + String.valueOf(getCantidadCertificada(Integer.parseInt(row[18].toString().trim()))) + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), 0.0, 0.0, Double.parseDouble(row[23].toString().trim()), " ", " ", " ", 1, 1);
                            temp.add(datosCertificacionOrigenUORV);
                        }
                    }
                }

            } else if (niveles == 7) {
                for (Object[] row : datosCertif) {
                    coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    brigBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                    List<Empresaobratarifa> tariList = util.getEmpresaobratarifaList(obraS.getId(), Integer.parseInt(row[0].toString().trim()), obraS.getTarifaSalarialByTarifa().getId());
                    Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[32].toString().trim())).findFirst().get();
                    double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                    double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                    double totalCosto = 0.0 + Double.parseDouble(row[22].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[22].toString().trim()) * costoEq * coeficienteEquipo;

                    temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + String.valueOf(getCantidadCertificada(Integer.parseInt(row[18].toString().trim()))) + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), 0.0, costoMano * coeficienteMano, costoEq * coeficienteEquipo, totalCosto, row[26].toString().trim(), row[27].toString().trim(), row[28].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[22].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[22].toString().trim()) * costoEq * coeficienteEquipo, totalCosto, brigBuilder.toString().trim(), " ", " ", 1, 1));

                }

                for (Object[] row : listObjects) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    // uocode = new StringBuilder().append(" UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim().substring(0, 30)).append(" ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    totalCalc = Double.parseDouble(row[24].toString().trim());
                    brigBuilder = new StringBuilder().append(row[25].toString().trim()).append(" ").append(row[26].toString().trim());
                    if (row[27] != null) {
                        if (row[27].toString().trim().startsWith("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[28].toString().trim()));
                            temp.add(datosCertificacionOrigenUORV);
                        } else if (row[27].toString().trim().startsWith("J")) {
                            juegoproducto = getJuegoproducto(Integer.parseInt(row[28].toString().trim()));
                            datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + row[22].toString().trim() + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, totalCalc, juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Double.parseDouble(row[24].toString().trim()), brigBuilder.toString().trim(), " ", " ", 0, 1);
                            temp.add(datosCertificacionOrigenUORV);
                        } else if (row[27].toString().trim().startsWith("S")) {
                            suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[28].toString().trim()));
                            datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + row[22].toString().trim() + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, totalCalc, suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Double.parseDouble(row[24].toString().trim()), brigBuilder.toString().trim(), " ", " ", 0, 1);
                            temp.add(datosCertificacionOrigenUORV);
                        }
                    }
                }
            } else if (niveles == 8) {
                for (Object[] row : datosCertif) {
                    coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    brigBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                    grupBuilder = new StringBuilder().append(row[32].toString().trim()).append(" ").append(row[33].toString().trim());
                    List<Empresaobratarifa> tariList = util.getEmpresaobratarifaList(obraS.getId(), Integer.parseInt(row[0].toString().trim()), obraS.getTarifaSalarialByTarifa().getId());
                    Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[32].toString().trim())).findFirst().get();
                    double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                    double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                    double totalCosto = 0.0 + Double.parseDouble(row[22].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[22].toString().trim()) * costoEq * coeficienteEquipo;
                    temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + String.valueOf(getCantidadCertificada(Integer.parseInt(row[18].toString().trim()))) + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), 0.0, costoMano * coeficienteMano, costoEq * coeficienteEquipo, totalCosto, row[26].toString().trim(), row[27].toString().trim(), row[28].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[22].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[22].toString().trim()) * costoEq * coeficienteEquipo, totalCosto, brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ", 1, 1));

                }
                for (Object[] row : listObjects) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    // uocode = new StringBuilder().append(" UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim().substring(0, 30)).append(" ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    totalCalc = Double.parseDouble(row[24].toString().trim());

                    brigBuilder = new StringBuilder().append(row[25].toString().trim()).append(" ").append(row[26].toString().trim());
                    grupBuilder = new StringBuilder().append(row[27].toString().trim()).append(" ").append(row[28].toString().trim());
                    if (row[29] != null) {
                        if (row[29].toString().trim().startsWith("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[30].toString().trim()));
                            datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + row[22].toString().trim() + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, totalCalc, recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Double.parseDouble(row[24].toString().trim()), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ", 0, 1);
                            temp.add(datosCertificacionOrigenUORV);

                        } else if (row[29].toString().trim().startsWith("J")) {
                            juegoproducto = getJuegoproducto(Integer.parseInt(row[30].toString().trim()));
                            datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + row[22].toString().trim() + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, totalCalc, juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Double.parseDouble(row[24].toString().trim()), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ", 0, 1);
                            temp.add(datosCertificacionOrigenUORV);

                        } else if (row[29].toString().trim().startsWith("S")) {
                            suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[30].toString().trim()));
                            datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + row[22].toString().trim() + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, totalCalc, suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Double.parseDouble(row[24].toString().trim()), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ", 0, 1);
                            temp.add(datosCertificacionOrigenUORV);
                        }
                    }
                }
            } else if (niveles == 9) {
                for (Object[] row : datosCertif) {
                    coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == idOb && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    brigBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                    grupBuilder = new StringBuilder().append(row[32].toString().trim()).append(" ").append(row[33].toString().trim());
                    cuadBuilder = new StringBuilder().append(row[34].toString().trim()).append(" ").append(row[35].toString().trim());
                    List<Empresaobratarifa> tariList = util.getEmpresaobratarifaList(obraS.getId(), Integer.parseInt(row[0].toString().trim()), obraS.getTarifaSalarialByTarifa().getId());
                    Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[32].toString().trim())).findFirst().get();
                    double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                    double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                    double totalCosto = 0.0 + Double.parseDouble(row[22].toString().trim()) * costoMano * coeficienteMano + Double.parseDouble(row[22].toString().trim()) * costoEq * coeficienteEquipo;
                    temp.add(new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + String.valueOf(getCantidadCertificada(Integer.parseInt(row[18].toString().trim()))) + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), 0.0, costoMano * coeficienteMano, costoEq * coeficienteEquipo, totalCosto, row[26].toString().trim(), row[27].toString().trim(), row[28].toString().trim(), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[22].toString().trim()) * costoMano * coeficienteMano, Double.parseDouble(row[22].toString().trim()) * costoEq * coeficienteEquipo, totalCosto, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), 1, 1));
                }
                for (Object[] row : listObjects) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    //  uocode = new StringBuilder().append(" UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim().substring(0, 30)).append(" ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    totalCalc = Double.parseDouble(row[24].toString().trim());

                    brigBuilder = new StringBuilder().append(row[25].toString().trim()).append(" ").append(row[26].toString().trim());
                    grupBuilder = new StringBuilder().append(row[27].toString().trim()).append(" ").append(row[28].toString().trim());
                    cuadBuilder = new StringBuilder().append(row[29].toString().trim()).append(" ").append(row[30].toString().trim());
                    if (row[31] != null) {
                        if (row[31].toString().trim().startsWith("1")) {
                            recursos = getRecursosa(Integer.parseInt(row[32].toString().trim()));
                            datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + row[22].toString().trim() + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, totalCalc, recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Double.parseDouble(row[24].toString().trim()), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), 0, 1);
                            temp.add(datosCertificacionOrigenUORV);

                        } else if (row[31].toString().trim().startsWith("J")) {
                            juegoproducto = getJuegoproducto(Integer.parseInt(row[32].toString().trim()));
                            datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + row[22].toString().trim() + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, totalCalc, juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Double.parseDouble(row[24].toString().trim()), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), 0, 1);
                            temp.add(datosCertificacionOrigenUORV);

                        } else if (row[31].toString().trim().startsWith("S")) {
                            suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[32].toString().trim()));
                            datosCertificacionOrigenUORV = new DatosCertificacionOrigenUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), "UO " + " " + row[19].toString().trim() + " " + row[20].toString().trim() + "   " + row[22].toString().trim() + " / " + row[21].toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, totalCalc, suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Double.parseDouble(row[24].toString().trim()), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim(), 0, 1);
                            temp.add(datosCertificacionOrigenUORV);
                        }
                    }
                }
            }

            datosCertificacionOrigenUORVArrayList.addAll(temp);
            tx.commit();
            session.close();
            return datosCertificacionOrigenUORVArrayList;

        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();

            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setHeaderText("Error: " + CalForReport.class.getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();


        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    public ArrayList<CertificacionOrigenUOinRV> getDatosReporteVertificacionOrigenUORVArrayList
            (ArrayList<DatosCertificacionOrigenUORV> uoReportModelArray, GroupToReport groupToReport, Obra obra) {
        listConceptos = new ArrayList<ConceptosReporte>();
        certificacionOrigenUOinRVArrayList = new ArrayList<CertificacionOrigenUOinRV>();

        gastosDirectos = new Double[3];
        gastosDirectos = calcVertificacionOrigenUORVGastosDirectos(uoReportModelArray, groupToReport);
        listConceptos = createConceptosList(gastosDirectos, groupToReport.getIdEmpresa(), obra);
        for (DatosCertificacionOrigenUORV arrayUO : uoReportModelArray) {
            if (arrayUO.getIdEmpresa() == groupToReport.getIdEmpresa() && arrayUO.getEmpresa().contentEquals(groupToReport.getEmpresaName())) {
                certificacionOrigenUOinRVArrayList.add(new CertificacionOrigenUOinRV(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getIdZona(), arrayUO.getZona(), arrayUO.getIdObjeto(), arrayUO.getObjeto(), arrayUO.getIdNivel(), arrayUO.getNivel(), arrayUO.getIdEspecialidad(), arrayUO.getEspecialidad(), arrayUO.getIdSub(), arrayUO.getSubespecialidad(), arrayUO.getIdUnidad(), arrayUO.getUnidad(), arrayUO.getDescripUnidad(), arrayUO.getUoUM(), arrayUO.getCantidad(), arrayUO.getCostMateriales(), arrayUO.getCostMano(), arrayUO.getCostEquipo(), arrayUO.costTotal, arrayUO.getCodeRV(), arrayUO.getDescRV(), arrayUO.getUmRV(), arrayUO.getCantRVCert(), arrayUO.getCostMatRV(), arrayUO.getCostManoRV(), arrayUO.getCostEquipoRV(), arrayUO.getCostTotalCertRV(), arrayUO.getBrigada(), arrayUO.getGrupo(), arrayUO.getCuadrilla(), listConceptos));

            }
        }
        return certificacionOrigenUOinRVArrayList;

    }

    public Double[] calcVertificacionOrigenUORVGastosDirectos
            (ArrayList<DatosCertificacionOrigenUORV> uoReportModelArray, GroupToReport groupToReport) {
        Double[] valuesGastosDirectos = new Double[3];
        valuesGastosDirectos[0] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosCertificacionOrigenUORV::getCostMatRV).reduce(0.0, Double::sum);
        valuesGastosDirectos[1] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosCertificacionOrigenUORV::getCostManoRV).reduce(0.0, Double::sum);
        valuesGastosDirectos[2] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosCertificacionOrigenUORV::getCostEquipoRV).reduce(0.0, Double::sum);
        return valuesGastosDirectos;


    }

    public ArrayList<CertificacionOrigenUOinRV> createReportesCOUORVFormater(ReportesController
                                                                                     reportes, ArrayList<DatosCertificacionOrigenUORV> certificacionOrigensArry, Obra obra) {
        reportesController = reportes;
        certificacionOrigenUOinRVArrayList = new ArrayList<>();
        groupToReportsArrayList = new ArrayList<>();

        datosCertificacionOrigenUORVArrayList = new ArrayList<>();
        datosCertificacionOrigenUORVArrayList = certificacionOrigensArry;

        groupToReportsArrayList = getEmpresaInArrayDCRVModels(datosCertificacionOrigenUORVArrayList, obra);

        temCO = new ArrayList<>();
        for (GroupToReport ent : groupToReportsArrayList) {
            certificacionOrigenUOinRVArrayList = getDatosReporteVertificacionOrigenUORVArrayList(datosCertificacionOrigenUORVArrayList, ent, obra);
            temCO.addAll(certificacionOrigenUOinRVArrayList);
        }

        return temCO;
    }

    public List<Conceptosgasto> getListGastos(int idResol) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            List<Conceptosgasto> list = new ArrayList<>();
            System.out.println(idResol);
            list = session.createQuery("FROM Conceptosgasto WHERE pertence =: id ORDER BY code ASC ").setParameter("id", idResol).getResultList();
            tx.commit();
            session.close();
            return list;

        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();
    }

    public Recursos getRecursosByCode(String code, String tag) {
        Recursos rec = null;
        System.out.printf(code + " ******* " + tag);
        if (util.recursosEquiposList == null) {
            List<Recursos> recursosList = util.getRecursosEquiposList(tag);
            rec = util.recursosEquiposList.parallelStream().filter(item -> item.getCodigo().trim().equals(code.trim())).findFirst().get();
        } else if (util.recursosEquiposList.size() > 0) {
            rec = util.recursosEquiposList.parallelStream().filter(item -> item.getCodigo().trim().equals(code.trim())).findFirst().get();
        }
        return rec;
    }

    public ArrayList<ConceptosReporte> createConceptosList(Double[] valores, Integer idEmpresa, Obra obra) {
        listConceptos = new ArrayList<ConceptosReporte>();
        resumenSubReportArrayList = new ArrayList<ResumenSubReport>();
        resumenSubReportArrayList = getResumenConcepts(idEmpresa);
        concept4 = 0.0;
        concept5 = 0.0;
        concept6 = 0.0;
        concept7 = 0.0;
        concept8 = 0.0;
        concept9 = 0.0;
        concept10 = 0.0;
        concept11 = 0.0;
        concept12 = 0.0;
        concept13 = 0.0;
        concept14 = 0.0;
        concept15 = 0.0;
        concept16 = 0.0;
        concept17 = 0.0;
        concept18 = 0.0;
        concept19 = 0.0;
        concept20 = 0.0;
        calEquipos = 0.0;
        if (obra.getSalarioId() == 1) {
            for (ResumenSubReport resumen : resumenSubReportArrayList) {
                if (resumen.getIdConcept() == 1) {
                    concept = new ConceptosReporte(idEmpresa, "01", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), valores[0]);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 2) {
                    concept = new ConceptosReporte(idEmpresa, "02", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), valores[1]);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 3) {
                    concept = new ConceptosReporte(idEmpresa, "03", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), valores[2]);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 4) {
                    if (resumen.getPorciento() == 1) {
                        concept = new ConceptosReporte(idEmpresa, "04", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept4);
                        listConceptos.add(concept);
                    } else {
                        tempVal = valores[0] + valores[1] + valores[2];
                        double valPorc = resumen.getPorciento() / 100;
                        double mult = tempVal * valPorc;
                        concept4 = mult;
                        concept = new ConceptosReporte(idEmpresa, "04", resumen.getConcept(), String.valueOf(resumen.getPorciento()) + "% de " + resumen.getFormula(), resumen.getCoef(), concept4);
                        listConceptos.add(concept);
                    }
                } else if (resumen.getIdConcept() == 5) {
                    if (resumen.getPorciento() == 1) {
                        concept = new ConceptosReporte(idEmpresa, "05", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept5);
                        listConceptos.add(concept);
                    } else {
                        tempVal = valores[0];
                        double valPorc = resumen.getPorciento() / 100;
                        double mult = tempVal * valPorc;
                        concept5 = mult;
                        concept = new ConceptosReporte(idEmpresa, "05", resumen.getConcept(), String.valueOf(resumen.getPorciento()) + "% de " + resumen.getFormula(), resumen.getCoef(), concept5);
                        listConceptos.add(concept);
                    }
                } else if (resumen.getIdConcept() == 6) {
                    concept6 = valores[0] + valores[1] + valores[2] + concept4 + concept5;
                    concept = new ConceptosReporte(idEmpresa, "06", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), Math.round(concept6 * 100d) / 100d);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 7) {
                    if (resumen.getPorciento() == 1) {
                        ConceptosReporte c7 = new ConceptosReporte(idEmpresa, "07", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept7);
                        listConceptos.add(c7);
                    } else {
                        tempVal = concept6;
                        double valPorc = resumen.getPorciento() / 100;
                        double mult = tempVal * valPorc;
                        concept7 = mult;
                        ConceptosReporte c7 = new ConceptosReporte(idEmpresa, "07", resumen.getConcept(), String.valueOf(resumen.getPorciento()) + "% de " + resumen.getFormula(), resumen.getCoef(), concept7);
                        listConceptos.add(c7);
                    }
                } else if (resumen.getIdConcept() == 8) {
                    concept8 = concept7;
                    concept = new ConceptosReporte(idEmpresa, "08", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept8);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 9) {
                    concept9 = concept6 + concept8;
                    concept = new ConceptosReporte(idEmpresa, "09", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), Math.round(concept9 * 100d) / 100d);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 10) {
                    if (resumen.getCalcular().contentEquals("1")) {
                        concept10 = calcConcept10(concept9, obra.getTipoobraId());
                        concept = new ConceptosReporte(idEmpresa, "10", resumen.getConcept(), resumen.getFormula(), facCoef, concept10);
                        listConceptos.add(concept);
                    } else if (resumen.getCalcular().contentEquals("0")) {
                        concept = new ConceptosReporte(idEmpresa, "10", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept10);
                        listConceptos.add(concept);
                    }
                } else if (resumen.getIdConcept() == 11) {
                    concept = new ConceptosReporte(idEmpresa, "11", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept11);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 12) {
                    concept = new ConceptosReporte(idEmpresa, "12", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept12);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 13) {
                    concept = new ConceptosReporte(idEmpresa, "13", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept13);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 14) {
                    concept = new ConceptosReporte(idEmpresa, "14", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept14);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 15) {
                    concept = new ConceptosReporte(idEmpresa, "15", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept15);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 16) {
                    concept = new ConceptosReporte(idEmpresa, "16", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), concept16);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 17) {
                    concept17 = concept10 + concept11 + concept12 + concept13 + concept14 + concept15 + concept16;
                    concept = new ConceptosReporte(idEmpresa, "17", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), Math.round(concept17 * 100d) / 100d);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 18) {
                    concept18 = concept9 + concept17;
                    concept = new ConceptosReporte(idEmpresa, "18", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), Math.round(concept18 * 100d) / 100d);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 19) {
                    concept19 = 0.2 * (concept9 - valores[0]);
                    concept = new ConceptosReporte(idEmpresa, "19", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), Math.round(concept19 * 100d) / 100d);
                    listConceptos.add(concept);
                } else if (resumen.getIdConcept() == 20) {
                    concept20 = concept18 + concept19;
                    concept = new ConceptosReporte(idEmpresa, "20", resumen.getConcept(), resumen.getFormula(), resumen.getCoef(), Math.round(concept20 * 100d) / 100d);
                    listConceptos.add(concept);
                }
            }
        } else {
            int resol = 0;
            if (obra.getSalarioId() > 1) {
                resol = 3;
            }
            for (Conceptosgasto cg : getListGastos(resol)) {
                if (cg.getDescripcion().trim().equals("Materiales")) {
                    listConceptos.add(new ConceptosReporte(idEmpresa, "01", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), valores[0]));
                } else if (cg.getDescripcion().trim().equals("Mano de Obra")) {
                    listConceptos.add(new ConceptosReporte(idEmpresa, "02", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), valores[1]));
                } else if (cg.getDescripcion().trim().equals("Uso de Equipos")) {
                    double val = getValorEmpresaObraConcepto(obra, idEmpresa, cg.getId());
                    //System.out.println("C1: " + val + " C2: " + valores[2]);
                    if (val > valores[2]) {
                        calEquipos = valores[2];
                    } else {
                        calEquipos = valores[2];
                    }
                    listConceptos.add(new ConceptosReporte(idEmpresa, "03", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), calEquipos));
                } else if (cg.getDescripcion().trim().equals("Otros Gastos Directos del Proceso Productivo")) {
                    System.out.println(cg.getId());
                    System.out.println(getValorEmpresaObraConcepto(obra, idEmpresa, cg.getId()));
                    concept4 = getValorEmpresaObraConcepto(obra, idEmpresa, cg.getId());
                    listConceptos.add(new ConceptosReporte(idEmpresa, "04", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept4));
                } else if (cg.getDescripcion().trim().equals("Costos Directos de Producción")) {
                    concept5 = valores[0] + valores[1] + calEquipos + concept4;
                    listConceptos.add(new ConceptosReporte(idEmpresa, "05", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept5));
                } else if (cg.getDescripcion().trim().equals("Gastos Asociados a la Producción de la Obra")) {
                    concept6 = getValorEmpresaObraConcepto(obra, idEmpresa, cg.getId());
                    listConceptos.add(new ConceptosReporte(idEmpresa, "06", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept6));
                } else if (cg.getDescripcion().trim().equals("Total de Costos y Gastos de Producción de la Obra")) {
                    concept7 = concept5 + concept6;
                    listConceptos.add(new ConceptosReporte(idEmpresa, "07", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept7));
                } else if (cg.getDescripcion().trim().equals("Gastos Generales y de Administración")) {
                    concept8 = getValorEmpresaObraConcepto(obra, idEmpresa, cg.getId());
                    listConceptos.add(new ConceptosReporte(idEmpresa, "08", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept8));
                } else if (cg.getDescripcion().trim().equals("Gastos Indirectos")) {
                    concept9 = concept6 + concept8;
                    listConceptos.add(new ConceptosReporte(idEmpresa, "09", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept9));
                } else if (cg.getDescripcion().trim().equals("Otros Conceptos de Gastos")) {
                    concept10 = getValorEmpresaObraConcepto(obra, idEmpresa, cg.getId());
                    listConceptos.add(new ConceptosReporte(idEmpresa, "10", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept10));
                    int count = 0;
                    for (Subconcepto subconcepto : cg.getSubConceptosById()) {
                        count++;
                        listConceptos.add(new ConceptosReporte(idEmpresa, " 10." + count, subconcepto.getDescripcion(), " - ", 1.0, getValorEmpresaObraSubconcepto(obra, idEmpresa, subconcepto.getId())));
                    }
                } else if (cg.getDescripcion().trim().equals("Gastos Financieros")) {
                    concept11 = getValorEmpresaObraConcepto(obra, idEmpresa, cg.getId());
                    listConceptos.add(new ConceptosReporte(idEmpresa, "11", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept11));
                } else if (cg.getDescripcion().trim().equals("Gastos Tributarios")) {
                    concept12 = getValorEmpresaObraConcepto(obra, idEmpresa, cg.getId());
                    listConceptos.add(new ConceptosReporte(idEmpresa, "12", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept12));
                } else if (cg.getDescripcion().trim().equals("Total de Gastos de la Obra")) {
                    concept13 = concept8 + concept10 + concept11 + concept12;
                    listConceptos.add(new ConceptosReporte(idEmpresa, "13", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept13));
                } else if (cg.getDescripcion().trim().equals("Total de Costos y Gastos")) {
                    concept14 = concept5 + concept9 + concept10 + concept11 + concept12;
                    listConceptos.add(new ConceptosReporte(idEmpresa, "14", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept14));
                } else if (cg.getDescripcion().trim().equals("Utilidad")) {
                    double val = concept14 - valores[0] - concept13;
                    concept15 = 0.15 * val;
                    listConceptos.add(new ConceptosReporte(idEmpresa, "15", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept15));
                } else if (cg.getDescripcion().trim().equals("Impuestos sobre ventas autorizados por MFP")) {
                    concept16 = getValorEmpresaObraConcepto(obra, idEmpresa, cg.getId());
                    listConceptos.add(new ConceptosReporte(idEmpresa, "16", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept16));
                } else if (cg.getDescripcion().trim().equals("Precio del Servicio de Construcción y Montaje")) {
                    concept17 = concept16 + concept14 + concept15;
                    listConceptos.add(new ConceptosReporte(idEmpresa, "17", cg.getDescripcion(), cg.getFormula(), cg.getCoeficiente(), concept17));
                }
            }
        }
        // listConceptos.sort(Comparator.comparing(ConceptosReporte::getIndice));
        return listConceptos;
    }

    private double getValorEmpresaObraConcepto(Obra obra, int idEmpresa, int idCon) {
        return obra.getEmpresaobraconceptosById().parallelStream().filter(item -> item.getEmpresaconstructoraId() == idEmpresa && item.getConceptosgastoId() == idCon).map(Empresaobraconcepto::getValor).findFirst().orElse(0.0);
    }

    private double calcConcept10(double concepto9, Integer tipo) {

        val = 0.0;
        tempValue = 0.0;
        facCoef = 0.0;
        if (tipo == 1) {
            facCoef = 0.03;
            val = 0.03 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 2) {
            val = 0.04 * concepto9;
            facCoef = 0.04;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 3) {
            val = 0.03 * concepto9;
            facCoef = 0.03;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 4) {
            val = 0.03 * concepto9;
            facCoef = 0.03;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 5) {
            facCoef = 0.03;
            val = 0.03 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 6) {
            facCoef = 0.02;
            val = 0.02 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 7) {
            facCoef = 0.02;
            val = 0.02 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 8) {
            facCoef = 0.04;
            val = 0.04 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 9) {
            facCoef = 0.02;
            val = 0.02 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 10) {
            facCoef = 0.03;
            val = 0.03 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 13) {
            facCoef = 0.03;
            double val = 0.03 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 14) {
            facCoef = 0.02;
            val = 0.02 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 15) {
            facCoef = 0.03;
            val = 0.03 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 16) {
            facCoef = 0.06;
            val = 0.06 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        } else if (tipo == 17) {
            facCoef = 0.01;
            val = 0.01 * concepto9;
            tempValue = Math.round(val * 100d) / 100d;
        }

        return tempValue;
    }

    public ArrayList<ResumenSubReport> getResumenConcepts(int id) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            resumenSubReportArrayList = new ArrayList<>();
            Query query = session.createQuery("SELECT con.id, con.descripcion, eg.coeficiente, eg.formula, eg.calcular, eg.porciento FROM Empresagastos eg INNER JOIN Conceptosgasto con ON eg.conceptosgastoId = con.id WHERE eg.empresaconstructoraId =: idEmp ORDER BY con.id ASC ").setParameter("idEmp", id);
            List<Object[]> datosConceptos = query.getResultList();
            for (Object[] row : datosConceptos) {
                resumenSubReport = new ResumenSubReport(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Double.parseDouble(row[2].toString().trim()), row[3].toString().trim(), row[4].toString().trim(), Double.parseDouble(row[5].toString().trim()));
                resumenSubReportArrayList.add(resumenSubReport);
            }
            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return resumenSubReportArrayList;
    }

    public Double getTotalMateriescert(String queryMateriales, int niveles) {

        materiales = 0.0;

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            Query query = session.createQuery(queryMateriales);

            if (niveles == 1) {
                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();

                    materiales = Double.parseDouble(row[2].toString().trim());


                }

            }


            if (niveles == 2) {


                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    materiales = Double.parseDouble(row[4].toString().trim());

                }

            }

            if (niveles == 3) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    materiales = Double.parseDouble(row[6].toString().trim());

                }

            }

            if (niveles == 4) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();

                    materiales = Double.parseDouble(row[8].toString().trim());

                }

            }
            if (niveles == 5) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();

                    materiales = Double.parseDouble(row[10].toString().trim());

                }

            }

            if (niveles == 6) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    materiales = Double.parseDouble(row[12].toString().trim());


                }

            }

            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return materiales;


    }

    public Double getTotalManoObra(String queryManoObra, int niveles) {

        mano = 0.0;

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            Query query = session.createQuery(queryManoObra);

            if (niveles == 1) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();

                    mano = Double.parseDouble(row[2].toString().trim());


                }

            }


            if (niveles == 2) {


                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    mano = Double.parseDouble(row[4].toString().trim());

                }

            }

            if (niveles == 3) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    mano = Double.parseDouble(row[6].toString().trim());

                }

            }

            if (niveles == 4) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();

                    mano = Double.parseDouble(row[8].toString().trim());

                }

            }
            if (niveles == 5) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();

                    mano = Double.parseDouble(row[10].toString().trim());

                }

            }

            if (niveles == 6) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    mano = Double.parseDouble(row[12].toString().trim());


                }

            }

            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return mano;


    }

    public ArrayList<PlanificacionMesUOinRV> getDatosReportePlanificacionMesUOinRVArrayList
            (ArrayList<DatosPlanificacionMesUORV> uoReportModelArray, GroupToReport groupToReport, Obra obra) {
        listConceptos = new ArrayList<ConceptosReporte>();
        planificacionMesUOinRVArrayList = new ArrayList<PlanificacionMesUOinRV>();

        gastosDirectos = new Double[3];

        gastosDirectos = calcPlanUORVGastosDirectos(uoReportModelArray, groupToReport);
        listConceptos = createConceptosList(gastosDirectos, groupToReport.getIdEmpresa(), obra);
        for (DatosPlanificacionMesUORV arrayUO : uoReportModelArray) {
            if (arrayUO.getIdEmpresa() == groupToReport.getIdEmpresa() && arrayUO.getEmpresa().contentEquals(groupToReport.getEmpresaName())) {
                planificacionMesUOinRV = new PlanificacionMesUOinRV(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getIdZona(), arrayUO.getZona(), arrayUO.getIdObjeto(), arrayUO.getObjeto(), arrayUO.getIdNivel(), arrayUO.getNivel(), arrayUO.getIdEspecialidad(), arrayUO.getEspecialidad(), arrayUO.getIdSub(), arrayUO.getSubespecialidad(), arrayUO.getIdUnidad(), arrayUO.getUnidad(), arrayUO.getDescripUnidad(), arrayUO.getUoUM(), arrayUO.getCantidad(), arrayUO.getCostMateriales(), arrayUO.getCostMano(), arrayUO.getCostEquipo(), arrayUO.costTotal, arrayUO.getCodeRV(), arrayUO.getDescRV(), arrayUO.getUmRV(), arrayUO.getCantRVCert(), arrayUO.getCostMatRV(), arrayUO.getCostManoRV(), arrayUO.getCostEquipoRV(), arrayUO.getCostTotalCertRV(), arrayUO.getBrigada(), arrayUO.getGrupo(), arrayUO.getCuadrilla(), listConceptos);
                planificacionMesUOinRVArrayList.add(planificacionMesUOinRV);
            }
        }

        return planificacionMesUOinRVArrayList;

    }

    public Double[] getCoeficientesEmpresa(Integer idEmpresa) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            valCoeficientes = new Double[2];
            Query query = session.createQuery(" FROM Empresagastos WHERE empresaconstructoraId =:idEmp ORDER BY conceptosgastoId").setParameter("idEmp", idEmpresa);
            List<Empresagastos> values = (List<Empresagastos>) query.getResultList();
            for (Empresagastos eg : values) {
                if (eg.getConceptosgastoId() == 2) {
                    valCoeficientes[0] = eg.getCoeficiente();
                } else if (eg.getConceptosgastoId() == 3) {
                    valCoeficientes[1] = eg.getCoeficiente();
                }
            }
            tx.commit();
            session.close();
            return valCoeficientes;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return valCoeficientes;

    }

    public Double getTotalEquipos(String queryEquipos, int niveles) {

        equipo = 0.0;

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            Query query = session.createQuery(queryEquipos);

            if (niveles == 1) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();

                    equipo = Double.parseDouble(row[2].toString().trim());


                }

            }


            if (niveles == 2) {


                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    equipo = Double.parseDouble(row[4].toString().trim());

                }

            }

            if (niveles == 3) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    equipo = Double.parseDouble(row[6].toString().trim());

                }

            }

            if (niveles == 4) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();

                    equipo = Double.parseDouble(row[8].toString().trim());

                }

            }
            if (niveles == 5) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();

                    equipo = Double.parseDouble(row[10].toString().trim());

                }

            }

            if (niveles == 6) {

                for (Iterator it = ((org.hibernate.query.Query) query).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    equipo = Double.parseDouble(row[12].toString().trim());


                }

            }

            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return equipo;


    }

    public Double[] calcPlanUORVGastosDirectos
            (ArrayList<DatosPlanificacionMesUORV> uoReportModelArray, GroupToReport groupToReport) {
        Double[] valuesGastosDirectos = new Double[3];
        valuesGastosDirectos[0] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosPlanificacionMesUORV::getCostMatRV).reduce(0.0, Double::sum);
        valuesGastosDirectos[1] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosPlanificacionMesUORV::getCostManoRV).reduce(0.0, Double::sum);
        valuesGastosDirectos[2] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpresa() == groupToReport.getIdEmpresa()).map(DatosPlanificacionMesUORV::getCostEquipoRV).reduce(0.0, Double::sum);
        return valuesGastosDirectos;

    }

    public List<TotalReportFormater> createReportTotalesFormater
            (ArrayList<TotalReportModel> totalReportModelArrayList, Obra obra) {
        List<TotalReportFormater> listToValuesByReport = new ArrayList<>();
        List<TotalReportFormater> temp = new ArrayList<>();
        List<Integer> idObrasList = totalReportModelArrayList.parallelStream().map(TotalReportModel::getIdEmpresa).collect(Collectors.toList());

        for (Integer value : idObrasList) {
            listToValuesByReport = buildTotalReportFormater(totalReportModelArrayList, value, obra);
            temp.addAll(listToValuesByReport);
        }

        return temp;
    }

    private List<TotalReportFormater> buildTotalReportFormater
            (ArrayList<TotalReportModel> totalReportModelArrayList, Integer idEmpresa, Obra obrap) {
        Double[] valores = new Double[3];
        valores[0] = totalReportModelArrayList.parallelStream().filter(item -> item.getIdEmpresa() == idEmpresa).map(TotalReportModel::getCostMat).reduce(0.0, Double::sum);
        valores[1] = totalReportModelArrayList.parallelStream().filter(item -> item.getIdEmpresa() == idEmpresa).map(TotalReportModel::getCostMano).reduce(0.0, Double::sum);
        valores[2] = totalReportModelArrayList.parallelStream().filter(item -> item.getIdEmpresa() == idEmpresa).map(TotalReportModel::getCostEquip).reduce(0.0, Double::sum);

        List<TotalReportFormater> totalList = new ArrayList<>();
        ArrayList<ConceptosReporte> conceptosReportes = new ArrayList<>();
        conceptosReportes = createConceptosList(valores, idEmpresa, obrap);
        List<TotalReportModel> modelList = totalReportModelArrayList.parallelStream().filter(item -> item.getIdEmpresa() == idEmpresa).collect(Collectors.toList());
        for (TotalReportModel item : modelList) {
            if (item.getIdEmpresa() == idEmpresa) {
                totalList.add(new TotalReportFormater(item.getIdEmpresa(), item.getEmpresa(), item.getZona(), item.getObjeto(), item.getNivel(), item.getEspecialidad(), item.getSubespecialidad(), item.getCostMat(), item.getCostMano(), item.getCostEquip(), item.getTotal(), conceptosReportes));
            }
        }
        return totalList;
    }

    public ArrayList<DatosCuantitativaModel> getRecursos(ReportesController reportes, String query, int niveles) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaModelArrayList = new ArrayList<>();
            Query query1 = session.createQuery(query);
            List<Object[]> cuantitativaList = query1.getResultList();

            for (Object[] row : cuantitativaList) {

                empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);

                if (row[21].toString().trim().contentEquals("2")) {
                    Double costo = Double.parseDouble(row[22].toString().trim()) * Double.parseDouble(row[23].toString().trim());
                    cuantitativaModelArrayList.add(new DatosCuantitativaModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), row[18].toString().trim(), row[19].toString().trim(), row[20].toString().trim(), "Mano de Obra", Double.parseDouble(row[24].toString().trim()), Double.parseDouble(row[25].toString().trim()), Double.parseDouble(row[26].toString().trim()), Double.parseDouble(row[27].toString().trim()), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[28].toString().trim()), costo));
                } else if (row[21].toString().trim().contentEquals("3")) {
                    Double costo = Double.parseDouble(row[22].toString().trim()) * Double.parseDouble(row[23].toString().trim());
                    cuantitativaModelArrayList.add(new DatosCuantitativaModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), row[18].toString().trim(), row[19].toString().trim(), row[20].toString().trim(), "Equipos", Double.parseDouble(row[24].toString().trim()), Double.parseDouble(row[25].toString().trim()), Double.parseDouble(row[26].toString().trim()), Double.parseDouble(row[27].toString().trim()), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[28].toString().trim()), costo));
                } else if (row[21].toString().trim().contentEquals("1")) {
                    Double costo = Double.parseDouble(row[22].toString().trim()) * Double.parseDouble(row[23].toString().trim());
                    cuantitativaModelArrayList.add(new DatosCuantitativaModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), row[18].toString().trim(), row[19].toString().trim(), row[20].toString().trim(), "Materiales", Double.parseDouble(row[24].toString().trim()), Double.parseDouble(row[25].toString().trim()), Double.parseDouble(row[26].toString().trim()), Double.parseDouble(row[27].toString().trim()), Double.parseDouble(row[22].toString().trim()), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[28].toString().trim()), Double.parseDouble(row[24].toString().trim())));

                }


            }

            tx.commit();
            session.close();
            return cuantitativaModelArrayList;
        } catch (Exception ex) {
            ex.printStackTrace();
            /*
            if (tx != null) tx.rollback();
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setHeaderText("Error: " + CalForReport.class.getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();
            */

        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    public ArrayList<TotalReportCertModel> getTotalesToCertPlan(ReportesController reportes, String query, String
            qmateriales, String qMano, String qEquipos, int niveles) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            totalReportCertModelArrayList = new ArrayList<>();
            Query query1 = session.createQuery(query);

            if (niveles == 1) {

                double totalMateriales = getTotalMateriescert(qmateriales, niveles);
                double totalMano = getTotalManoObra(qMano, niveles);
                double totalEquipo = getTotalEquipos(qEquipos, niveles);

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    String codEmp = row[0].toString().trim();
                    String empDescr = row[1].toString().trim();
                    String rvCostSalario = row[2].toString().trim();

                    double total = totalMateriales + totalMano + totalEquipo;


                    totalReportCertModel = new TotalReportCertModel(codEmp + " " + empDescr, "", "", "", "", "", totalMateriales, totalMano, totalEquipo, Double.parseDouble(rvCostSalario), Math.round(total * 100d) / 100d);
                    totalReportCertModelArrayList.add(totalReportCertModel);
                }

            }


            if (niveles == 2) {
                double totalMateriales = getTotalMateriescert(qmateriales, niveles);
                double totalMano = getTotalManoObra(qMano, niveles);
                double totalEquipo = getTotalEquipos(qEquipos, niveles);

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    String codEmp = row[0].toString().trim();
                    String empDescr = row[1].toString().trim();
                    String zonCode = row[2].toString().trim();
                    String zonDesc = row[3].toString().trim();
                    String rvCostSalario = row[4].toString().trim();

                    double total = totalMateriales + totalMano + totalEquipo;


                    totalReportCertModel = new TotalReportCertModel(codEmp + " " + empDescr, zonCode + " " + zonDesc, "", "", "", "", totalMateriales, totalMano, totalEquipo, Double.parseDouble(rvCostSalario), Math.round(total * 100d) / 100d);
                    totalReportCertModelArrayList.add(totalReportCertModel);
                }

            }

            if (niveles == 3) {
                double totalMateriales = getTotalMateriescert(qmateriales, niveles);
                double totalMano = getTotalManoObra(qMano, niveles);
                double totalEquipo = getTotalEquipos(qEquipos, niveles);
                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    String codEmp = row[0].toString().trim();
                    String empDescr = row[1].toString().trim();
                    String zonCode = row[2].toString().trim();
                    String zonDesc = row[3].toString().trim();
                    String objCode = row[4].toString().trim();
                    String objDesc = row[5].toString().trim();
                    String rvCostSalario = row[6].toString().trim();
                    double total = totalMateriales + totalMano + totalEquipo;


                    totalReportCertModel = new TotalReportCertModel(codEmp + " " + empDescr, zonCode + " " + zonDesc, objCode + " " + objDesc, "", "", "", totalMateriales, totalMano, totalEquipo, Double.parseDouble(rvCostSalario), Math.round(total * 100d) / 100d);
                    totalReportCertModelArrayList.add(totalReportCertModel);
                }

            }

            if (niveles == 4) {
                double totalMateriales = getTotalMateriescert(qmateriales, niveles);
                double totalMano = getTotalManoObra(qMano, niveles);
                double totalEquipo = getTotalEquipos(qEquipos, niveles);

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    String codEmp = row[0].toString().trim();
                    String empDescr = row[1].toString().trim();
                    String zonCode = row[2].toString().trim();
                    String zonDesc = row[3].toString().trim();
                    String objCode = row[4].toString().trim();
                    String objDesc = row[5].toString().trim();
                    String nivCode = row[6].toString().trim();
                    String nivDesc = row[7].toString().trim();
                    String rvCostSalario = row[8].toString().trim();
                    double total = totalMateriales + totalMano + totalEquipo;


                    totalReportCertModel = new TotalReportCertModel(codEmp + " " + empDescr, zonCode + " " + zonDesc, objCode + " " + objDesc, nivCode + " " + nivDesc, "", "", totalMateriales, totalMano, totalEquipo, Double.parseDouble(rvCostSalario), Math.round(total * 100d) / 100d);
                    totalReportCertModelArrayList.add(totalReportCertModel);
                }

            }
            if (niveles == 5) {
                double totalMateriales = getTotalMateriescert(qmateriales, niveles);
                double totalMano = getTotalManoObra(qMano, niveles);
                double totalEquipo = getTotalEquipos(qEquipos, niveles);
                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    String codEmp = row[0].toString().trim();
                    String empDescr = row[1].toString().trim();
                    String zonCode = row[2].toString().trim();
                    String zonDesc = row[3].toString().trim();
                    String objCode = row[4].toString().trim();
                    String objDesc = row[5].toString().trim();
                    String nivCode = row[6].toString().trim();
                    String nivDesc = row[7].toString().trim();
                    String codEsp = row[8].toString().trim();
                    String desEsp = row[9].toString().trim();
                    String rvCostSalario = row[10].toString().trim();
                    double total = totalMateriales + totalMano + totalEquipo;


                    totalReportCertModel = new TotalReportCertModel(codEmp + " " + empDescr, zonCode + " " + zonDesc, objCode + " " + objDesc, nivCode + " " + nivDesc, codEsp + " " + desEsp, "", totalMateriales, totalMano, totalEquipo, Double.parseDouble(rvCostSalario), Math.round(total * 100d) / 100d);
                    totalReportCertModelArrayList.add(totalReportCertModel);
                }

            }

            if (niveles == 6) {
                double totalMateriales = getTotalMateriescert(qmateriales, niveles);
                double totalMano = getTotalManoObra(qMano, niveles);
                double totalEquipo = getTotalEquipos(qEquipos, niveles);
                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    String codEmp = row[0].toString().trim();
                    String empDescr = row[1].toString().trim();
                    String zonCode = row[2].toString().trim();
                    String zonDesc = row[3].toString().trim();
                    String objCode = row[4].toString().trim();
                    String objDesc = row[5].toString().trim();
                    String nivCode = row[6].toString().trim();
                    String nivDesc = row[7].toString().trim();
                    String codEsp = row[8].toString().trim();
                    String desEsp = row[9].toString().trim();
                    String codeSub = row[10].toString().trim();
                    String subDes = row[11].toString().trim();
                    String rvCostSalario = row[12].toString().trim();
                    double total = totalMateriales + totalMano + totalEquipo;


                    totalReportCertModel = new TotalReportCertModel(codEmp + " " + empDescr, zonCode + " " + zonDesc, objCode + " " + objDesc, nivCode + " " + nivDesc, codEsp + " " + desEsp, codeSub + " " + subDes, totalMateriales, totalMano, totalEquipo, Double.parseDouble(rvCostSalario), Math.round(total * 100d) / 100d);
                    totalReportCertModelArrayList.add(totalReportCertModel);
                }

            }
            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return totalReportCertModelArrayList;

    }

    public Double[] calcPresuUORVExtendsDoubles
            (ArrayList<RenglonVarianteReportModelExtend> uoReportModelArray, GroupToReport groupToReport) {
        valuesGastosDirectos = new Double[3];
        valuesGastosDirectos[0] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpesa() == groupToReport.getIdEmpresa()).map(RenglonVarianteReportModelExtend::getCostMat).reduce(0.0, Double::sum);
        valuesGastosDirectos[1] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpesa() == groupToReport.getIdEmpresa()).map(RenglonVarianteReportModelExtend::getCostMano).reduce(0.0, Double::sum);
        valuesGastosDirectos[2] = uoReportModelArray.parallelStream().filter(item -> item.getIdEmpesa() == groupToReport.getIdEmpresa()).map(RenglonVarianteReportModelExtend::getCostEquip).reduce(0.0, Double::sum);

        return valuesGastosDirectos;
    }

    private ArrayList<RecComponetsModel> getDesgloseMat(Integer idSemi) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            arrayListComponets = new ArrayList<>();
            List<Object[]> datos = session.createQuery("SELECT rec.codigo, rec.descripcion, rec.um, rec.preciomn, rec.preciomlc, semiRec.cantidad, rec.tipo, rec.grupoescala FROM Suministrossemielaborados semi INNER JOIN Semielaboradosrecursos semiRec ON semi.id = semiRec.suministrossemielaboradosId INNER JOIN Recursos rec ON semiRec.recursosId = rec.id WHERE semi.id =: idrec").setParameter("idrec", idSemi).getResultList();
            for (Object[] row : datos) {
                if (row[6].toString().trim().equals("1")) {
                    tipo = "Materiales";
                } else if (row[6].toString().trim().equals("2")) {
                    tipo = "Mano de Obra";
                } else if (row[6].toString().trim().equals("3")) {
                    tipo = "Equipos";
                }
                arrayListComponets.add(new RecComponetsModel(row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), Double.parseDouble(row[3].toString().trim()), Double.parseDouble(row[4].toString().trim()), Double.parseDouble(row[5].toString().trim()), tipo, row[7].toString().trim()));
            }
            tx.commit();
            session.close();
            return arrayListComponets;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        session.close();
        return new ArrayList<>();
    }

    private ArrayList<RecComponetsModel> getDesgloseMatJueg(Integer idSemi) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            arrayListComponets = new ArrayList<>();
            List<Object[]> datos = session.createQuery("SELECT rec.codigo, rec.descripcion, rec.um, rec.preciomn, rec.preciomlc, semiRec.cantidad, rec.tipo, rec.grupoescala FROM Juegoproducto semi INNER JOIN Juegorecursos semiRec ON semi.id = semiRec.juegoproductoId INNER JOIN Recursos rec ON semiRec.recursosId = rec.id WHERE semi.id =: idrec").setParameter("idrec", idSemi).getResultList();
            for (Object[] row : datos) {
                if (row[6].toString().trim().equals("1")) {
                    tipo = "Materiales";
                } else if (row[6].toString().trim().equals("2")) {
                    tipo = "Mano de Obra";
                } else if (row[6].toString().trim().equals("3")) {
                    tipo = "Equipos";
                }
                arrayListComponets.add(new RecComponetsModel(row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), Double.parseDouble(row[3].toString().trim()), Double.parseDouble(row[4].toString().trim()), Double.parseDouble(row[5].toString().trim()), tipo, row[7].toString()));
            }
            tx.commit();
            session.close();
            return arrayListComponets;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        session.close();
        return new ArrayList<>();
    }

    /**
     * para la cuantitativa
     */

    public ArrayList<DatosCuantitativaModelCert> getRecursosCertAndPlan(ReportesController reportes, String query,
                                                                        int niveles, Obra obra) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaModelCertsArrayList = new ArrayList<DatosCuantitativaModelCert>();
            Query query1 = session.createQuery(query);
            List<Object[]> objectList = query1.getResultList();
            if (niveles <= 6) {
                for (Object[] row : objectList) {
                    coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obra.getId() && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obra.getId() && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append(" UO ").append(row[22].toString().trim()).append(" ").append(row[23].toString().trim()).append(" ").append(row[25].toString().trim()).append(" / ").append(row[24].toString().trim());
                    if (row[18].toString().trim().equals("2")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[19].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[20].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[20].toString().trim()) * recVal * coeficienteMano, uocode.toString().trim(), " ", " ", " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[18].toString().trim().equals("3")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[19].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[20].toString().trim()), recursos.getPreciomn() * coeficienteEquipo, recursos.getPreciomlc(), Double.parseDouble(row[20].toString().trim()) * recursos.getPreciomn() * coeficienteEquipo, uocode.toString().trim(), " ", " ", " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[18].toString().trim().contentEquals("1")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[19].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[20].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[20].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), " ", " ", " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[18].toString().trim().contentEquals("J")) {
                        juegoproducto = (Juegoproducto) session.get(Juegoproducto.class, Integer.parseInt(row[19].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[20].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[20].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), " ", " ", " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[18].toString().trim().contentEquals("S")) {
                        suministrossemielaborados = (Suministrossemielaborados) session.get(Suministrossemielaborados.class, Integer.parseInt(row[19].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[20].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[20].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), " ", " ", " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    }
                }
            }
            if (niveles == 7) {
                for (Object[] row : objectList) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    brigBuilder = new StringBuilder().append(row[18].toString().trim()).append(" ").append(row[19].toString().trim());
                    uocode = new StringBuilder().append(" UO ").append(row[24].toString().trim()).append(" ").append(row[25].toString().trim()).append(" ").append(row[27].toString().trim()).append(" / ").append(row[25].toString().trim());
                    if (row[20].toString().trim().contentEquals("2  ")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[21].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[22].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[22].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[20].toString().trim().contentEquals("3  ")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[21].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[22].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[22].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[20].toString().trim().contentEquals("1  ")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[21].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[22].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[22].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[20].toString().trim().contentEquals("J  ")) {
                        juegoproducto = (Juegoproducto) session.get(Juegoproducto.class, Integer.parseInt(row[21].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[22].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[22].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[20].toString().trim().contentEquals("S  ")) {
                        suministrossemielaborados = (Suministrossemielaborados) session.get(Suministrossemielaborados.class, Integer.parseInt(row[21].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[22].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[22].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    }

                }
            } else if (niveles == 8) {

                for (Object[] row : objectList) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    brigBuilder = new StringBuilder().append(row[18].toString().trim()).append(" ").append(row[19].toString().trim());
                    grupBuilder = new StringBuilder().append(row[20].toString().trim()).append(" ").append(row[21].toString().trim());

                    uocode = new StringBuilder().append(" UO ").append(row[26].toString().trim()).append(" ").append(row[27].toString().trim()).append(" ").append(row[29].toString().trim()).append(" / ").append(row[28].toString().trim());


                    if (row[22].toString().trim().contentEquals("2  ")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[23].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[24].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[24].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[22].toString().trim().contentEquals("3  ")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[23].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[24].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[24].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[22].toString().trim().contentEquals("1  ")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[23].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[24].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[24].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[22].toString().trim().contentEquals("J  ")) {
                        juegoproducto = (Juegoproducto) session.get(Juegoproducto.class, Integer.parseInt(row[23].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[24].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[24].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[22].toString().trim().contentEquals("S  ")) {
                        suministrossemielaborados = (Suministrossemielaborados) session.get(Suministrossemielaborados.class, Integer.parseInt(row[23].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[24].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[24].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ");
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    }
                }
            } else if (niveles == 9) {

                for (Object[] row : objectList) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    brigBuilder = new StringBuilder().append(row[18].toString().trim()).append(" ").append(row[19].toString().trim());
                    grupBuilder = new StringBuilder().append(row[20].toString().trim()).append(" ").append(row[21].toString().trim());
                    cuadBuilder = new StringBuilder().append(row[22].toString().trim()).append(" ").append(row[23].toString().trim());

                    uocode = new StringBuilder().append(" UO ").append(row[28].toString().trim()).append(" ").append(row[29].toString().trim()).append(" ").append(row[31].toString().trim()).append(" / ").append(row[30].toString().trim());


                    if (row[24].toString().trim().contentEquals("2  ")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[25].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[26].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[26].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[24].toString().trim().contentEquals("3  ")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[25].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[26].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[26].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[24].toString().trim().contentEquals("1  ")) {
                        recursos = (Recursos) session.get(Recursos.class, Integer.parseInt(row[25].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[26].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[26].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[24].toString().trim().contentEquals("J  ")) {
                        juegoproducto = (Juegoproducto) session.get(Juegoproducto.class, Integer.parseInt(row[25].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[26].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[26].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    } else if (row[24].toString().trim().contentEquals("S  ")) {
                        suministrossemielaborados = (Suministrossemielaborados) session.get(Suministrossemielaborados.class, Integer.parseInt(row[25].toString().trim()));
                        datosCuantitativaModelCert = new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[26].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[26].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                        cuantitativaModelCertsArrayList.add(datosCuantitativaModelCert);
                    }
                }
            }

            tx.commit();
            session.close();
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();
            /*
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setHeaderText("Error: " + CalForReport.class.getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();

             */
        } finally {
            session.close();
        }

        return cuantitativaModelCertsArrayList;

    }

    public ArrayList<DatosCuantitativaModelVGES> getRecursosConsolidados(ReportesController reportes, String query,
                                                                         int niveles) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            datosCuantitativaModelVGESArrayList = new ArrayList<>();
            Query query1 = session.createSQLQuery(query);

            if (niveles == 1) {
                valCoeficientes = new Double[2];
                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    valCoeficientes = getCoeficientesEmpresa(idEmp);
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    // String rvZon = row[1].toString().trim();
                    //String rvObj = row[2].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String code = row[3].toString().trim();
                    String descrip = row[4].toString().trim();
                    String um = row[5].toString().trim();
                    if (row[6].toString().trim().contentEquals("2")) {
                        tipo = "Mano de Obra";

                        String cantidad = row[7].toString().trim();
                        String precio = row[9].toString().trim();

                        Double costo = Double.parseDouble(cantidad) * Double.parseDouble(precio) * valCoeficientes[0];


                        Double cpo = Double.parseDouble(row[9].toString().trim());
                        Double cpe = Double.parseDouble(row[10].toString().trim());
                        Double cet = Double.parseDouble(row[11].toString().trim());
                        Double otra = Double.parseDouble(row[12].toString().trim());
                        preciomlc = Double.parseDouble(row[13].toString().trim());
                        String ges = row[14].toString().trim();


                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, null, "", null, "", null, "", null, "", null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));

                    } else if (row[6].toString().trim().contentEquals("1")) {
                        tipo = "Materiales";

                        String cantidad = row[7].toString().trim();
                        String precio = row[9].toString().trim();

                        Double costo = Double.parseDouble(cantidad) * Double.parseDouble(precio);


                        Double cpo = Double.parseDouble(row[9].toString().trim());
                        Double cpe = Double.parseDouble(row[10].toString().trim());
                        Double cet = Double.parseDouble(row[11].toString().trim());
                        Double otra = Double.parseDouble(row[12].toString().trim());
                        preciomlc = Double.parseDouble(row[13].toString().trim());
                        String ges = "I";


                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, null, "", null, "", null, "", null, "", null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));
                    }

                }

            }


            if (niveles == 2) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    valCoeficientes = getCoeficientesEmpresa(idEmp);
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    //String rvObj = row[2].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String code = row[6].toString().trim();
                    String descrip = row[7].toString().trim();
                    String um = row[8].toString().trim();
                    if (row[9].toString().trim().contentEquals("2")) {
                        tipo = "Mano de Obra";
                        String cantidad = row[10].toString().trim();
                        String precio = row[12].toString().trim();

                        Double costo = Double.parseDouble(cantidad) * Double.parseDouble(precio) * valCoeficientes[0];

                        Double cpo = Double.parseDouble(row[12].toString().trim());
                        Double cpe = Double.parseDouble(row[13].toString().trim());
                        Double cet = Double.parseDouble(row[14].toString().trim());
                        Double otra = Double.parseDouble(row[15].toString().trim());
                        preciomlc = Double.parseDouble(row[16].toString().trim());
                        String ges = row[17].toString().trim();


                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, null, "", null, "", null, "", null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));


                    } else if (row[9].toString().trim().contentEquals("1")) {
                        tipo = "Materiales";

                        String cantidad = row[10].toString().trim();
                        String precio = row[12].toString().trim();

                        Double costo = Math.round(Double.parseDouble(cantidad) * 100d) / 100d * Double.parseDouble(precio);

                        Double cpo = Double.parseDouble(row[12].toString().trim());
                        Double cpe = Double.parseDouble(row[13].toString().trim());
                        Double cet = Double.parseDouble(row[14].toString().trim());
                        Double otra = Double.parseDouble(row[15].toString().trim());
                        preciomlc = Double.parseDouble(row[16].toString().trim());
                        String ges = "I";


                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, null, "", null, "", null, "", null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));

                    }


                }

            }

            if (niveles == 3) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    valCoeficientes = getCoeficientesEmpresa(idEmp);
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String code = row[9].toString().trim();
                    String descrip = row[10].toString().trim();
                    String um = row[11].toString().trim();
                    if (row[12].toString().trim().contentEquals("2")) {
                        tipo = "Mano de Obra";
                        String cantidad = row[13].toString().trim();
                        String precio = row[14].toString().trim();

                        Double costo = Double.parseDouble(cantidad) * Double.parseDouble(precio) * valCoeficientes[0];

                        Double cpo = Double.parseDouble(row[15].toString().trim());
                        Double cpe = Double.parseDouble(row[16].toString().trim());
                        Double cet = Double.parseDouble(row[17].toString().trim());
                        Double otra = Double.parseDouble(row[18].toString().trim());
                        preciomlc = Double.parseDouble(row[19].toString().trim());

                        String ges = row[20].toString().trim();


                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, null, "", null, "", null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));

                    } else if (row[12].toString().trim().contentEquals("1")) {

                        tipo = "Materiales";

                        String cantidad = row[13].toString().trim();
                        String precio = row[14].toString().trim();

                        Double costo = Math.round(Double.parseDouble(cantidad) * 100d) / 100d * Double.parseDouble(precio);

                        Double cpo = Double.parseDouble(row[15].toString().trim());
                        Double cpe = Double.parseDouble(row[16].toString().trim());
                        Double cet = Double.parseDouble(row[17].toString().trim());
                        Double otra = Double.parseDouble(row[18].toString().trim());
                        preciomlc = Double.parseDouble(row[19].toString().trim());
                        String ges = "I";

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, null, "", null, "", null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));

                    }


                }

            }

            if (niveles == 4) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    valCoeficientes = getCoeficientesEmpresa(idEmp);
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String code = row[12].toString().trim();
                    String descrip = row[13].toString().trim();
                    String um = row[14].toString().trim();


                    if (row[15].toString().trim().contentEquals("2")) {
                        tipo = "Mano de Obra";

                        String cantidad = row[16].toString().trim();
                        String precio = row[17].toString().trim();

                        Double costo = Double.parseDouble(cantidad) * Double.parseDouble(precio) * valCoeficientes[0];

                        Double cpo = Double.parseDouble(row[18].toString().trim());
                        Double cpe = Double.parseDouble(row[19].toString().trim());
                        Double cet = Double.parseDouble(row[20].toString().trim());
                        Double otra = Double.parseDouble(row[21].toString().trim());
                        preciomlc = Double.parseDouble(row[22].toString().trim());
                        String ges = row[23].toString().trim();

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, null, "", null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));


                    } else if (row[15].toString().trim().contentEquals("1")) {
                        tipo = "Materiales";
                        String cantidad = row[16].toString().trim();
                        String precio = row[17].toString().trim();

                        Double costo = Math.round(Double.parseDouble(cantidad) * 100d) / 100d * Double.parseDouble(precio);

                        Double cpo = Double.parseDouble(row[18].toString().trim());
                        Double cpe = Double.parseDouble(row[19].toString().trim());
                        Double cet = Double.parseDouble(row[20].toString().trim());
                        Double otra = Double.parseDouble(row[21].toString().trim());
                        preciomlc = Double.parseDouble(row[22].toString().trim());
                        String ges = "I";

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, null, "", null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));

                    }

                }

            }

            if (niveles == 5) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    valCoeficientes = getCoeficientesEmpresa(idEmp);
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    String rvEsp = row[13].toString().trim() + " " + row[14].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String code = row[15].toString().trim();
                    String descrip = row[16].toString().trim();
                    String um = row[17].toString().trim();
                    if (row[18].toString().trim().contentEquals("2")) {
                        tipo = "Mano de Obra";

                        String cantidad = row[19].toString().trim();
                        String precio = row[20].toString().trim();

                        Double costo = Double.parseDouble(cantidad) * Double.parseDouble(precio) * valCoeficientes[0];

                        Double cpo = Double.parseDouble(row[21].toString().trim());
                        Double cpe = Double.parseDouble(row[22].toString().trim());
                        Double cet = Double.parseDouble(row[23].toString().trim());
                        Double otra = Double.parseDouble(row[24].toString().trim());
                        preciomlc = Double.parseDouble(row[25].toString().trim());
                        String ges = row[26].toString().trim();


                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));


                    } else if (row[18].toString().trim().contentEquals("1")) {
                        tipo = "Materiales";

                        String cantidad = row[19].toString().trim();
                        String precio = row[20].toString().trim();

                        Double costo = Math.round(Double.parseDouble(cantidad) * 100d) / 100d * Double.parseDouble(precio);

                        Double cpo = Double.parseDouble(row[21].toString().trim());
                        Double cpe = Double.parseDouble(row[22].toString().trim());
                        Double cet = Double.parseDouble(row[23].toString().trim());
                        Double otra = Double.parseDouble(row[24].toString().trim());
                        preciomlc = Double.parseDouble(row[25].toString().trim());
                        String ges = "I";

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));

                    }

                }

            }

            if (niveles == 6) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    valCoeficientes = getCoeficientesEmpresa(idEmp);
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    String rvEsp = row[13].toString().trim() + " " + row[14].toString().trim();
                    String rvSub = row[16].toString().trim() + " " + row[17].toString().trim();
                    String code = row[18].toString().trim();
                    String descrip = row[19].toString().trim();
                    String um = row[20].toString().trim();
                    if (row[21].toString().trim().contentEquals("2")) {
                        tipo = "Mano de Obra";

                        String cantidad = row[22].toString().trim();
                        String precio = row[23].toString().trim();

                        Double costo = Double.parseDouble(cantidad) * Double.parseDouble(precio) * valCoeficientes[0];

                        Double cpo = Double.parseDouble(row[24].toString().trim());
                        Double cpe = Double.parseDouble(row[25].toString().trim());
                        Double cet = Double.parseDouble(row[26].toString().trim());
                        Double otra = Double.parseDouble(row[27].toString().trim());
                        preciomlc = Double.parseDouble(row[28].toString().trim());
                        String ges = row[29].toString().trim();


                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, Integer.parseInt(row[15].toString().trim()), rvSub, code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));

                    } else if (row[21].toString().trim().contentEquals("1")) {
                        tipo = "Materiales";

                        String cantidad = row[22].toString().trim();
                        String precio = row[23].toString().trim();

                        Double costo = Math.round(Double.parseDouble(cantidad) * 100d) / 100d * Double.parseDouble(precio);

                        Double cpo = Double.parseDouble(row[24].toString().trim());
                        Double cpe = Double.parseDouble(row[25].toString().trim());
                        Double cet = Double.parseDouble(row[26].toString().trim());
                        Double otra = Double.parseDouble(row[27].toString().trim());
                        preciomlc = Double.parseDouble(row[28].toString().trim());

                        String ges = "I";

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, Integer.parseInt(row[15].toString().trim()), rvSub, code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));

                    }


                }

            }

            if (niveles == 55) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    valCoeficientes = getCoeficientesEmpresa(idEmp);
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    String rvEsp = row[13].toString().trim() + " " + row[14].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String code = row[15].toString().trim();
                    String descrip = row[16].toString().trim();
                    String um = row[17].toString().trim();
                    if (row[18].toString().trim().contentEquals("2")) {
                        tipo = "Mano de Obra";

                        String cantidad = row[19].toString().trim();
                        String precio = row[20].toString().trim();

                        Double costo = Double.parseDouble(cantidad) * Double.parseDouble(precio) * valCoeficientes[0];

                        Double cpo = Double.parseDouble(row[21].toString().trim());
                        Double cpe = Double.parseDouble(row[22].toString().trim());
                        Double cet = Double.parseDouble(row[23].toString().trim());
                        Double otra = Double.parseDouble(row[24].toString().trim());
                        preciomlc = Double.parseDouble(row[25].toString().trim());
                        String ges = row[26].toString().trim();


                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));


                    } else if (row[18].toString().trim().contentEquals("1")) {
                        tipo = "Materiales";

                        String cantidad = row[19].toString().trim();
                        String precio = row[20].toString().trim();

                        Double costo = Math.round(Double.parseDouble(cantidad) * 100d) / 100d * Double.parseDouble(precio);

                        Double cpo = Double.parseDouble(row[21].toString().trim());
                        Double cpe = Double.parseDouble(row[22].toString().trim());
                        Double cet = Double.parseDouble(row[23].toString().trim());
                        Double otra = Double.parseDouble(row[24].toString().trim());
                        preciomlc = Double.parseDouble(row[25].toString().trim());
                        String ges = "I";

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, tipo, cpo, cpe, cet, otra, Double.parseDouble(cantidad), Double.parseDouble(precio), preciomlc, costo, ges));

                    }

                }

            }


            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return datosCuantitativaModelVGESArrayList;

    }

    public ArrayList<DatosPlanificacionMesUORV> getDatosPlanificacionMesUORVArrayList(ReportesController
                                                                                              reportes, String query, String queryM, Integer niveles) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            ArrayList<DatosPlanificacionMesUORV> temp = new ArrayList<DatosPlanificacionMesUORV>();
            planificacionMesUORVArrayList = new ArrayList<>();
            Query query1 = session.createQuery(query);
            List<Object[]> listPlan = query1.getResultList();

            Query query2 = session.createQuery(queryM);
            List<Object[]> listPlanMat = query2.getResultList();
            totalCalc = 0.0;
            if (niveles < 9) {
                System.out.println("Aqui");
                for (Object[] row : listPlan) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append(" UO ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    totalCalc = Double.parseDouble(row[24].toString().trim()) + Double.parseDouble(row[25].toString().trim()) + Double.parseDouble(row[26].toString().trim());

                    brigBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                    grupBuilder = new StringBuilder().append(row[32].toString().trim()).append(" ").append(row[33].toString().trim());

                    if (row[37].toString().trim().equals("1")) {
                        temp.add(new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), Math.round(Double.parseDouble(row[34].toString().trim()) * 100d) / 100d, Math.round(Double.parseDouble(row[35].toString().trim()) * 100d) / 100d, Math.round(Double.parseDouble(row[36].toString().trim()) * 100d) / 100d, Math.round(totalCalc * 100d) / 100d, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, Math.round(Double.parseDouble(row[25].toString().trim()) * 100d) / 100d, Math.round(Double.parseDouble(row[26].toString().trim()) * 100d) / 100d, Math.round(totalCalc * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), " "));
                    } else if (row[37].toString().trim().equals("0")) {
                        temp.add(new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), 0.0, Math.round(Double.parseDouble(row[35].toString().trim()) * 100d) / 100d, Math.round(Double.parseDouble(row[36].toString().trim()) * 100d) / 100d, Math.round(totalCalc * 100d) / 100d, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, Math.round(Double.parseDouble(row[25].toString().trim()) * 100d) / 100d, Math.round(Double.parseDouble(row[26].toString().trim()) * 100d) / 100d, Math.round(totalCalc * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), " "));

                    }
                }

                for (Object[] row : listPlanMat) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append(" UO ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    totalCalc = Double.parseDouble(row[24].toString().trim());

                    if (row[28].toString().trim().contentEquals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[33].toString().trim()));
                        temp.add(new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), recursos.getPreciomn(), 0.0, 0.0, totalCalc, row[25].toString().trim(), row[26].toString().trim(), row[27].toString().trim(), Double.parseDouble(row[23].toString().trim()), Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, 0.0, 0.0, totalCalc, brigBuilder.toString().trim(), grupBuilder.toString().trim(), " "));
                    } else if (row[28].toString().trim().contentEquals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[33].toString().trim()));
                        datosPlanificacionMesUORV = new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, 0.0, 0.0, totalCalc, juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[23].toString().trim()), Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, 0.0, 0.0, totalCalc, brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ");
                        temp.add(datosPlanificacionMesUORV);
                    } else if (row[38].toString().trim().contentEquals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[33].toString().trim()));
                        datosPlanificacionMesUORV = new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, 0.0, 0.0, totalCalc, suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[23].toString().trim()), Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, 0.0, 0.0, totalCalc, brigBuilder.toString().trim(), grupBuilder.toString().trim(), " ");
                        temp.add(datosPlanificacionMesUORV);
                    }

                }

                //     Collections.sort(temp);
                planificacionMesUORVArrayList.addAll(temp);
            } else if (niveles == 9) {
                for (Object[] row : listPlan) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append(" UO ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    totalCalc = Double.parseDouble(row[24].toString().trim()) + Double.parseDouble(row[25].toString().trim()) + Double.parseDouble(row[26].toString().trim());

                    brigBuilder = new StringBuilder().append(row[30].toString().trim()).append(" ").append(row[31].toString().trim());
                    grupBuilder = new StringBuilder().append(row[32].toString().trim()).append(" ").append(row[33].toString().trim());
                    cuadBuilder = new StringBuilder().append(row[38].toString().trim()).append(" ").append(row[39].toString().trim());

                    datosPlanificacionMesUORV = new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), Math.round(Double.parseDouble(row[24].toString().trim())) * 100d / 100d, Math.round(Double.parseDouble(row[25].toString().trim())) * 100d / 100d, Math.round(Double.parseDouble(row[26].toString().trim())) * 100d / 100d, Math.round(totalCalc * 100d) / 100d, row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), Double.parseDouble(row[23].toString().trim()), Math.round(Double.parseDouble(row[24].toString().trim()) * 100d) / 100d, Math.round(Double.parseDouble(row[25].toString().trim()) * 100d) / 100d, Math.round(Double.parseDouble(row[26].toString().trim()) * 100d) / 100d, Math.round(totalCalc * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                    temp.add(datosPlanificacionMesUORV);
                }

                for (Object[] row : listPlanMat) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append(" UO ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                    totalCalc = Double.parseDouble(row[24].toString().trim());


                    if (row[28].toString().trim().contentEquals("1")) {
                        datosPlanificacionMesUORV = new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Math.round(totalCalc * 100d) / 100d, row[25].toString().trim(), row[26].toString().trim(), row[27].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Math.round(totalCalc * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                        temp.add(datosPlanificacionMesUORV);

                    } else if (row[28].toString().trim().contentEquals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[31].toString().trim()));

                        datosPlanificacionMesUORV = new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Math.round(totalCalc * 100d) / 100d, juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Math.round(totalCalc * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                        temp.add(datosPlanificacionMesUORV);

                    } else if (row[38].toString().trim().contentEquals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[31].toString().trim()));

                        datosPlanificacionMesUORV = new DatosPlanificacionMesUORV(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), Integer.parseInt(row[18].toString().trim()), uocode.toString().trim(), row[20].toString().trim(), row[21].toString().trim(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Math.round(totalCalc * 100d) / 100d, suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[23].toString().trim()), Double.parseDouble(row[24].toString().trim()), 0.0, 0.0, Math.round(totalCalc * 100d) / 100d, brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim());
                        temp.add(datosPlanificacionMesUORV);
                    }

                }

                //  Collections.sort(temp);
                planificacionMesUORVArrayList.addAll(temp);
            }

            tx.commit();
            session.close();
        } catch (Exception ex) {
            ex.printStackTrace();
            if (tx != null) tx.rollback();

            /*
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setHeaderText("Error: " + CalForReport.class.getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();

             */
        } finally {
            session.close();
        }

        return planificacionMesUORVArrayList;

    }

    private double getValorEmpresaObraSubconcepto(Obra obra, int idEmp, int idCon) {
        return obra.getEmpresaobrasubconceptosById().parallelStream().filter(item -> item.getEmpresaconstructoraId() == idEmp && item.getSubconceptoId() == idCon).map(Empresaobrasubconcepto::getValor).findFirst().orElse(0.0);
    }

    public ArrayList<DatosCuantitativaGenreralModel> getRecursosGeneralRV(ReportesController reportes, String query,
                                                                          int niveles, Empresaconstructora empres, Obra obra, String queryRecIn) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaGenreralModelArrayList = new ArrayList<>();
            List<Object[]> cuantitativaList = session.createQuery(query).getResultList();
            coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obra.getId() && eocc.getEmpresaconstructoraId() == empres.getId() && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
            coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obra.getId() && eocc.getEmpresaconstructoraId() == empres.getId() && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
            for (Object[] row : cuantitativaList) {
                if (niveles == 1) {
                    if (row[3].toString().trim().contentEquals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[2].toString().trim()));
                        double cant = Math.round(Double.parseDouble(row[1].toString().trim()) * 10000d) / 10000d;
                        double total = cant * getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), "Mano de Obra", Double.parseDouble(row[6].toString().trim()), Double.parseDouble(row[7].toString().trim()), Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), cant, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[10].toString().trim()), Math.round(total * 100d) / 100d));
                    } else if (row[3].toString().trim().contentEquals("3")) {
                        double cant = Math.round(Double.parseDouble(row[1].toString().trim()) * 10000d) / 10000d;
                        double total = cant * recursos.getPreciomn() * coeficienteEquipo;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), "Equipos", Double.parseDouble(row[6].toString().trim()), Double.parseDouble(row[7].toString().trim()), Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), cant, Double.parseDouble(row[5].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[10].toString().trim()), Math.round(total * 100d) / 100d));

                    }
                } else if (niveles == 2) {
                    if (row[5].toString().trim().contentEquals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                        double cant = Math.round(Double.parseDouble(row[6].toString().trim()) * 10000d) / 10000d;
                        double total = cant * getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Mano de Obra", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[12].toString().trim()), Math.round(total * 100d) / 100d));
                    } else if (row[5].toString().trim().contentEquals("3")) {
                        double cant = Math.round(Double.parseDouble(row[6].toString().trim()) * 10000d) / 10000d;
                        double total = cant * Double.parseDouble(row[7].toString().trim()) * coeficienteEquipo;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Equipos", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, Double.parseDouble(row[7].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[12].toString().trim()), Math.round(total * 100d) / 100d));
                    }
                } else if (niveles == 3) {
                    if (row[7].toString().trim().contentEquals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                        double cant = Math.round(Double.parseDouble(row[8].toString().trim()) * 10000d) / 10000d;
                        double total = cant * getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[14].toString().trim()), Math.round(total * 100d) / 100d));
                    } else if (row[7].toString().trim().contentEquals("3")) {
                        double cant = Math.round(Double.parseDouble(row[8].toString().trim()) * 10000d) / 10000d;
                        double total = cant * Double.parseDouble(row[9].toString().trim()) * coeficienteEquipo;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, Double.parseDouble(row[9].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[14].toString().trim()), Math.round(total * 100d) / 100d));
                    }
                } else if (niveles == 4) {
                    if (row[9].toString().trim().contentEquals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                        double cant = Math.round(Double.parseDouble(row[10].toString().trim()) * 10000d) / 10000d;
                        double total = cant * getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Mano de Obra", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[16].toString().trim()), Math.round(total * 100d) / 100d));
                    } else if (row[9].toString().trim().contentEquals("3")) {
                        double cant = Math.round(Double.parseDouble(row[10].toString().trim()) * 10000d) / 10000d;
                        double total = cant * Double.parseDouble(row[11].toString().trim()) * coeficienteEquipo;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Equipos", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, Double.parseDouble(row[11].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[16].toString().trim()), Math.round(total * 100d) / 100d));
                    }
                } else if (niveles == 5) {
                    if (row[11].toString().trim().contentEquals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[23].toString().trim()));
                        double cant = Math.round(Double.parseDouble(row[12].toString().trim()) * 10000d) / 10000d;
                        double total = cant * getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", row[8].toString().trim(), row[9].toString().trim(), row[10].toString().trim(), "Mano de Obra", Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), cant, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[14].toString().trim()), Math.round(total * 100d) / 100d));
                    } else if (row[11].toString().trim().contentEquals("3")) {
                        double cant = Math.round(Double.parseDouble(row[12].toString().trim()) * 10000d) / 10000d;
                        double total = cant * Double.parseDouble(row[13].toString().trim()) * coeficienteEquipo;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", row[8].toString().trim(), row[9].toString().trim(), row[10].toString().trim(), "Equipos", Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), cant, Double.parseDouble(row[13].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[14].toString().trim()), Math.round(total * 100d) / 100d));
                    }
                } else if (niveles == 6) {
                    if (row[13].toString().trim().contentEquals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[25].toString().trim()));
                        double cant = Math.round(Double.parseDouble(row[14].toString().trim()) * 10000d) / 10000d;
                        double total = cant * getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), row[10].toString().trim(), row[11].toString().trim(), row[12].toString().trim(), "Mano de Obra", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), Double.parseDouble(row[18].toString().trim()), Double.parseDouble(row[19].toString().trim()), cant, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[20].toString().trim()), Math.round(total * 100d) / 100d));
                    } else if (row[13].toString().trim().contentEquals("3")) {
                        double cant = Math.round(Double.parseDouble(row[14].toString().trim()) * 10000d) / 10000d;
                        double total = cant * Double.parseDouble(row[15].toString().trim()) * coeficienteEquipo;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), row[10].toString().trim(), row[11].toString().trim(), row[12].toString().trim(), "Equipos", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), Double.parseDouble(row[18].toString().trim()), Double.parseDouble(row[19].toString().trim()), cant, Double.parseDouble(row[15].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[20].toString().trim()), Math.round(total * 100d) / 100d));
                    }
                } else if (niveles == 15) {//terminar hoy
                    if (row[5].toString().trim().contentEquals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                        double cant = Math.round(Double.parseDouble(row[6].toString().trim()) * 10000d) / 10000d;
                        double total = cant * getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Mano de Obra", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[12].toString().trim()), Math.round(total * 100d) / 100d));
                    } else if (row[5].toString().trim().contentEquals("3")) {
                        double cant = Math.round(Double.parseDouble(row[6].toString().trim()) * 10000d) / 10000d;
                        double total = cant * Double.parseDouble(row[7].toString().trim()) * coeficienteEquipo;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Equipos", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, Double.parseDouble(row[7].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[12].toString().trim()), Math.round(total * 100d) / 100d));
                    }
                } else if (niveles == 125) {//terminar hoy
                    if (row[7].toString().trim().contentEquals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                        double cant = Math.round(Double.parseDouble(row[8].toString().trim()) * 10000d) / 10000d;
                        double total = cant * getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[14].toString().trim()), Math.round(total * 100d) / 100d));
                    } else if (row[7].toString().trim().contentEquals("3")) {
                        double cant = Math.round(Double.parseDouble(row[8].toString().trim()) * 10000d) / 10000d;
                        double total = cant * Double.parseDouble(row[9].toString().trim()) * coeficienteEquipo;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, Double.parseDouble(row[9].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[14].toString().trim()), Math.round(total * 100d) / 100d));
                    }
                } else if (niveles == 1235) {//terminar hoy
                    if (row[9].toString().trim().contentEquals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                        double cant = Math.round(Double.parseDouble(row[10].toString().trim()) * 10000d) / 10000d;
                        double total = cant * getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Mano de Obra", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[16].toString().trim()), Math.round(total * 100d) / 100d));
                    } else if (row[9].toString().trim().contentEquals("3")) {
                        double cant = Math.round(Double.parseDouble(row[10].toString().trim()) * 10000d) / 10000d;
                        double total = cant * Double.parseDouble(row[11].toString().trim()) * coeficienteEquipo;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Equipos", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, Double.parseDouble(row[11].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[16].toString().trim()), Math.round(total * 100d) / 100d));
                    }
                } else if (niveles == 156) {//terminar hoy
                    if (row[7].toString().trim().contentEquals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                        double cant = Math.round(Double.parseDouble(row[8].toString().trim()) * 10000d) / 10000d;
                        double total = cant * getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[14].toString().trim()), Math.round(total * 100d) / 100d));
                    } else if (row[7].toString().trim().contentEquals("3")) {
                        double cant = Math.round(Double.parseDouble(row[8].toString().trim()) * 10000d) / 10000d;
                        double total = cant * Double.parseDouble(row[9].toString().trim()) * coeficienteEquipo;
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, Double.parseDouble(row[9].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[14].toString().trim()), Math.round(total * 100d) / 100d));
                    }
                }
            }
            if (niveles == 1) {
                List<DatosSuministrosPropios> datos = new ArrayList<>();
                datos = getDatosSuministrosPropiosList(queryRecIn);
                if (datos.size() > 0) {
                    for (DatosSuministrosPropios dato : datos.stream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", dato.getCodigo(), dato.getDescripcion(), dato.getUm(), dato.getTipo(), 1, 1, 1, 1, dato.getCantidad(), dato.getPrecio(), dato.getPreciomlc(), dato.getCostoTotal()));
                    }
                }
            }


            tx.commit();
            session.close();
            return cuantitativaGenreralModelArrayList;
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();

        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    public ArrayList<DatosCuantitativaGenreralModelCertificacion> getRecursosGeneralCertiFicacion(ReportesController reportes, String query,
                                                                                                  int niveles, Empresaconstructora empres, Obra obra, String queryRecIn) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;

        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaGenreralModelCertificacionArrayList = new ArrayList<>();
            if (!query.isEmpty()) {
                List<Object[]> cuantitativaList = session.createQuery(query).getResultList();
                coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obra.getId() && eocc.getEmpresaconstructoraId() == empres.getId() && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obra.getId() && eocc.getEmpresaconstructoraId() == empres.getId() && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                for (Object[] row : cuantitativaList) {
                    if (niveles == 1) {
                        if (Double.parseDouble(row[4].toString().trim()) > 0) {
                            if (row[3].toString().trim().contentEquals("2")) {
                                recursos = getRecursosa(Integer.parseInt(row[15].toString().trim()));
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double recVal = 0.0;
                                if (empres.getId() == 0) {
                                    recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                                } else {
                                    recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                                }
                                double total = cant * recVal;
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", "*", "*", "*", row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), "Mano de Obra", Double.parseDouble(row[6].toString().trim()), Double.parseDouble(row[7].toString().trim()), Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), cant, recVal, Double.parseDouble(row[10].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                            } else if (row[3].toString().trim().contentEquals("3")) {
                                recursos = getRecursosa(Integer.parseInt(row[15].toString().trim()));
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double recVal = recursos.getPreciomn();
                                double total = cant * recVal;
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", "*", "*", "*", row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), "Equipos", Double.parseDouble(row[6].toString().trim()), Double.parseDouble(row[7].toString().trim()), Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), cant, recVal, Double.parseDouble(row[10].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                            }
                        }
                    } else if (niveles == 2) {
                        if (row[5].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", "*", "*", "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Mano de Obra", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, Double.parseDouble(row[12].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[5].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", "*", "*", "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Equipos", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, Double.parseDouble(row[12].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }

                    } else if (niveles == 3) {
                        if (row[7].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, 0.0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[7].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, 0.0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 4) {
                        if (row[9].toString().trim().equals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", "*", "*", "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Mano de Obra", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, 0.0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[9].toString().trim().equals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", "*", "*", "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Equipos", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, 0.0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 5) {
                        if (row[11].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[23].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[12].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", "*", "*", "*", row[8].toString().trim(), row[9].toString().trim(), row[10].toString().trim(), "Mano de Obra", Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[11].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[23].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[12].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", "*", "*", "*", row[8].toString().trim(), row[9].toString().trim(), row[10].toString().trim(), "Equipos", Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 6) {
                        if (row[13].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[25].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[14].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), "*", "*", "*", row[10].toString().trim(), row[11].toString().trim(), row[12].toString().trim(), "Mano de Obra", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), Double.parseDouble(row[18].toString().trim()), Double.parseDouble(row[19].toString().trim()), cant, recVal, Double.parseDouble(row[20].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[13].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[25].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[14].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), "*", "*", "*", row[10].toString().trim(), row[11].toString().trim(), row[12].toString().trim(), "Equipos", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), Double.parseDouble(row[18].toString().trim()), Double.parseDouble(row[19].toString().trim()), cant, recVal, Double.parseDouble(row[20].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 15) {//terminar hoy
                        if (row[5].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Mano de Obra", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, Double.parseDouble(row[12].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[5].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Equipos", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, Double.parseDouble(row[12].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 125) {//terminar hoy
                        if (row[7].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[7].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 1235) {//terminar hoy
                        if (row[9].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Mano de Obra", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, Double.parseDouble(row[16].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[9].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Equipos", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, Double.parseDouble(row[16].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 156) {//terminar hoy
                        if (row[7].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[7].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 7) {//terminar hoy
                        if (row[8].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[20].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), "*", "*", row[5].toString().trim(), row[6].toString().trim(), row[7].toString().trim(), "Mano de Obra", 1, 1, 1, 1, cant, recVal, 0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[8].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[20].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), "*", "*", row[5].toString().trim(), row[6].toString().trim(), row[7].toString().trim(), "Equipos", 1, 1, 1, 1, cant, recVal, 0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                        cuantitativaGenreralModelCertificacionArrayList.sort(Comparator.comparing(DatosCuantitativaGenreralModelCertificacion::getEmpresa).thenComparing(DatosCuantitativaGenreralModelCertificacion::getBrigada).thenComparing(DatosCuantitativaGenreralModelCertificacion::getTipo));

                    } else if (niveles == 8) {//terminar hoy
                        if (row[10].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[22].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[11].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), "*", row[7].toString().trim(), row[8].toString().trim(), row[9].toString().trim(), "Mano de Obra", 1, 1, 1, 1, cant, recVal, 0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[10].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[22].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[11].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), "*", row[7].toString().trim(), row[8].toString().trim(), row[9].toString().trim(), "Equipos", 1, 1, 1, 1, cant, recVal, 0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                        cuantitativaGenreralModelCertificacionArrayList.sort(Comparator.comparing(DatosCuantitativaGenreralModelCertificacion::getEmpresa).thenComparing(DatosCuantitativaGenreralModelCertificacion::getBrigada).thenComparing(DatosCuantitativaGenreralModelCertificacion::getGrupo).thenComparing(DatosCuantitativaGenreralModelCertificacion::getTipo));
                    } else if (niveles == 9) {//terminar hoy
                        if (row[12].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[24].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[13].toString().trim()))).doubleValue();
                            double recVal = 0.0;
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), row[7].toString().trim() + " " + row[8].toString().trim(), row[9].toString().trim(), row[10].toString().trim(), row[11].toString().trim(), "Mano de Obra", 1, 1, 1, 1, cant, recVal, 0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[12].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[24].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[13].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), row[7].toString().trim() + " " + row[8].toString().trim(), row[9].toString().trim(), row[10].toString().trim(), row[11].toString().trim(), "Equipos", 1, 1, 1, 1, cant, recVal, 0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                        cuantitativaGenreralModelCertificacionArrayList.sort(Comparator.comparing(DatosCuantitativaGenreralModelCertificacion::getEmpresa).thenComparing(DatosCuantitativaGenreralModelCertificacion::getBrigada).thenComparing(DatosCuantitativaGenreralModelCertificacion::getGrupo).thenComparing(DatosCuantitativaGenreralModelCertificacion::getCuadrilla).thenComparing(DatosCuantitativaGenreralModelCertificacion::getTipo));
                    }
                }
            }
            /*
            //Recursos in RV
            if (!queryRecIn.isEmpty()) {
                List<Tuple> cuantitativaListRecInRV = session.createQuery(queryRecIn, Tuple.class).getResultList();
                if (niveles == 1) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(1).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 2) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(3).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", "*", "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", "*", "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", "*", "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 3) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(5).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 4) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(7).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 5) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(9).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 6) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(11).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), t.get(8).toString().trim() + " " + t.get(9).toString().trim(), renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), t.get(8).toString().trim() + " " + t.get(9).toString().trim(), renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), t.get(8).toString().trim() + " " + t.get(9).toString().trim(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 15) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(3).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(00, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 125) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(5).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 1235) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(7).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(3).toString().trim() + " " + t.get(4).toString().trim(), "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(3).toString().trim() + " " + t.get(4).toString().trim(), "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(3).toString().trim() + " " + t.get(4).toString().trim(), "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 156) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(5).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));
                            }
                        }
                    }
                }

             */


            cuantitativaGenreralModelCertificacionArrayList.sort(Comparator.comparing(DatosCuantitativaGenreralModelCertificacion::getTipo));
            tx.commit();
            session.close();
            return cuantitativaGenreralModelCertificacionArrayList;
        } catch (
                Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();

        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    /**
     * para el pendiente de la mano de obra el y los recursos
     */

    public ArrayList<DatosCuantitativaGenreralModel> getRecursosGeneralCertiFicacionPendientes(ReportesController
                                                                                                       reportes, String query,
                                                                                               int niveles, Empresaconstructora empres, Obra obra, String queryRecIn) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        System.out.println(niveles);
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaGenreralModelArrayList = new ArrayList<>();

            if (!query.isEmpty()) {
                List<Object[]> cuantitativaList = session.createSQLQuery(query).getResultList();
                coeficienteMano = 1;
                coeficienteEquipo = 1;

                for (Object[] row : cuantitativaList) {
                    if (niveles == 1) {
                        if (Double.parseDouble(row[4].toString().trim()) > 0) {
                            if (row[3].toString().trim().contentEquals("2")) {
                                recursos = getRecursosa(Integer.parseInt(row[15].toString().trim()));
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                                double total = cant * recVal;
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), "Mano de Obra", Double.parseDouble(row[6].toString().trim()), Double.parseDouble(row[7].toString().trim()), Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), cant, recVal, Double.parseDouble(row[10].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                            } else if (row[3].toString().trim().contentEquals("3")) {
                                recursos = getRecursosa(Integer.parseInt(row[15].toString().trim()));
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[16].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double recVal = recursos.getPreciomn();
                                double total = cant * recVal;
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), "Equipos", Double.parseDouble(row[6].toString().trim()), Double.parseDouble(row[7].toString().trim()), Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), cant, recVal, Double.parseDouble(row[10].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                            }
                        }
                    } else if (niveles == 2) {
                        if (row[5].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Mano de Obra", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, Double.parseDouble(row[12].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[5].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            //double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue() - 0.0;
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Equipos", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, Double.parseDouble(row[12].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }

                    } else if (niveles == 3) {
                        if (row[7].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, 0.0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[7].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[20].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, 0.0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 4) {
                        if (row[9].toString().trim().equals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Mano de Obra", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, 0.0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[9].toString().trim().equals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[22].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Equipos", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, 0.0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 5) {
                        if (row[11].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[23].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[12].toString().trim()))).doubleValue();
                            double recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", row[8].toString().trim(), row[9].toString().trim(), row[10].toString().trim(), "Mano de Obra", Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[11].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[23].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[24].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[12].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", row[8].toString().trim(), row[9].toString().trim(), row[10].toString().trim(), "Equipos", Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 6) {
                        if (row[13].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[25].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[14].toString().trim()))).doubleValue();
                            double recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), row[10].toString().trim(), row[11].toString().trim(), row[12].toString().trim(), "Mano de Obra", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), Double.parseDouble(row[18].toString().trim()), Double.parseDouble(row[19].toString().trim()), cant, recVal, Double.parseDouble(row[20].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[13].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[25].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[26].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[14].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), row[10].toString().trim(), row[11].toString().trim(), row[12].toString().trim(), "Equipos", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), Double.parseDouble(row[18].toString().trim()), Double.parseDouble(row[19].toString().trim()), cant, recVal, Double.parseDouble(row[20].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 15) {//terminar hoy
                        if (row[5].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Mano de Obra", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, Double.parseDouble(row[12].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[5].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[18].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Equipos", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, Double.parseDouble(row[12].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 125) {//terminar hoy
                        if (row[7].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[7].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[20].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 1235) {//terminar hoy
                        if (row[9].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Mano de Obra", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, Double.parseDouble(row[16].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[9].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Equipos", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, Double.parseDouble(row[16].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 156) {//terminar hoy
                        if (row[7].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[7].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[20].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    }
                }
            }

            //Recursos in RV
            if (!queryRecIn.isEmpty()) {
                List<Tuple> cuantitativaListRecInRV = session.createQuery(queryRecIn, Tuple.class).getResultList();
                if (niveles == 1) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(1).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 2) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(3).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", "*", "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", "*", "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", "*", "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 3) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(5).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 4) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(7).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 5) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(9).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 6) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(11).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), t.get(8).toString().trim() + " " + t.get(9).toString().trim(), renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), t.get(8).toString().trim() + " " + t.get(9).toString().trim(), renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), t.get(8).toString().trim() + " " + t.get(9).toString().trim(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 15) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(3).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(00, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 125) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(5).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 1235) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(7).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(3).toString().trim() + " " + t.get(4).toString().trim(), "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(3).toString().trim() + " " + t.get(4).toString().trim(), "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(3).toString().trim() + " " + t.get(4).toString().trim(), "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 156) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(5).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));
                            }
                        }
                    }
                }
            }

            cuantitativaGenreralModelArrayList.sort(Comparator.comparing(DatosCuantitativaGenreralModel::getTipo));
            tx.commit();
            session.close();
            return cuantitativaGenreralModelArrayList;
        } catch (
                Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();

        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    public ArrayList<DatosCuantitativaModel> getRecursosMateriales(ReportesController reportes, String query,
                                                                   int niveles, boolean flag) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaModelArrayList = new ArrayList<>();
            arrayListComponets = new ArrayList<RecComponetsModel>();
            javax.persistence.Query query1 = session.createSQLQuery(query);
            List<Object[]> materialesCuantitava = query1.getResultList();

            for (Object[] row : materialesCuantitava) {
                empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);

                if (row[21].toString().trim().contentEquals("1")) {
                    Recursos rec = session.get(Recursos.class, Integer.parseInt(row[20].toString().trim()));
                    cuantitativaModel = new DatosCuantitativaModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[18].toString().trim()), rec.getPreciomn(), rec.getPreciomlc(), Double.parseDouble(row[19].toString().trim()));
                    cuantitativaModelArrayList.add(cuantitativaModel);

                } else if (row[21].toString().trim().contentEquals("S")) {
                    if (flag == true) {
                        Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[20].toString().trim()));
                        arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                        arrayListComponets.forEach(items -> {
                            Double cant = items.getCantiADouble() * Double.parseDouble(row[18].toString().trim());
                            Double costS = cant * items.getPrecio();
                            cuantitativaModel = new DatosCuantitativaModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), items.getCode(), items.getDesc(), items.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[18].toString().trim()), items.getPrecio(), items.getPreciomlc(), Double.parseDouble(row[19].toString().trim()));
                            cuantitativaModelArrayList.add(cuantitativaModel);
                        });
                    } else {
                        Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[20].toString().trim()));
                        cuantitativaModel = new DatosCuantitativaModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[18].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[19].toString().trim()));
                        cuantitativaModelArrayList.add(cuantitativaModel);
                    }

                } else if (row[21].toString().trim().contentEquals("J")) {


                    if (flag == true) {
                        Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[20].toString().trim()));
                        arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                        arrayListComponets.forEach(items -> {
                            Double cant = items.getCantiADouble() * Double.parseDouble(row[18].toString().trim());
                            Double costS = cant * items.getPrecio();
                            cuantitativaModel = new DatosCuantitativaModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), items.getCode(), items.getDesc(), items.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[18].toString().trim()), items.getPrecio(), items.getPreciomlc(), Double.parseDouble(row[19].toString().trim()));
                            cuantitativaModelArrayList.add(cuantitativaModel);


                        });

                    } else {

                        Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[20].toString().trim()));
                        cuantitativaModel = new DatosCuantitativaModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), subBild.toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[18].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[19].toString().trim()));
                        cuantitativaModelArrayList.add(cuantitativaModel);
                    }
                }
            }
            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return cuantitativaModelArrayList;

    }

    public ArrayList<GroupToReport> getEmpresaInDatosCuentitativa
            (ArrayList<DatosCuantitativaModel> datosArrayList, Obra obra1) {
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        datosArrayList.forEach(uoreprt -> {
            GroupToReport groupToReport = new GroupToReport(uoreprt.getIdEmpresa(), uoreprt.getEmpresa(), obra1.getSalarioBySalarioId().getTag());
            if (groupToReportsArrayList.size() == 0) {
                groupToReportsArrayList.add(groupToReport);
            } else if (!groupToReportsArrayList.contains(groupToReport)) {
                groupToReportsArrayList.add(groupToReport);
            }

        });
        return groupToReportsArrayList;
    }

    public ArrayList<GroupToReport> getEmpresaInDatosCuentitativaCert
            (ArrayList<DatosCuantitativaModelCert> datosArrayList, Obra obra1) {
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        for (DatosCuantitativaModelCert uoreprt : datosArrayList) {
            GroupToReport groupToReport = new GroupToReport(uoreprt.getIdEmpresa(), uoreprt.getEmpresa(), obra1.getSalarioBySalarioId().getTag());
            if (groupToReportsArrayList.size() == 0) {
                groupToReportsArrayList.add(groupToReport);
            } else if (!groupToReportsArrayList.contains(groupToReport)) {
                groupToReportsArrayList.add(groupToReport);
            }
        }
        return groupToReportsArrayList;
    }

    /**
     * Materiales en el consolidado
     */

    public ArrayList<DatosCuantitativaModelVGES> getRecursosMaterialesConsolidados(ReportesController
                                                                                           reportes, String query, int niveles, boolean flag) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            datosCuantitativaModelVGESArrayList = new ArrayList<>();
            arrayListComponets = new ArrayList<RecComponetsModel>();
            javax.persistence.Query query1 = session.createSQLQuery(query);

            if (niveles == 1) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    // String rvZon = row[1].toString().trim();
                    //String rvObj = row[2].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();

                    if (row[6].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[5].toString().trim()));
                        code = rec.getCodigo();
                        descrip = rec.getDescripcion();
                        um = rec.getUm();
                        precio = rec.getPreciomn();
                        preciomlc = rec.getPreciomlc();

                        String cantidad = row[3].toString().trim();
                        Double costo = Double.parseDouble(row[4].toString().trim());

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, null, "", null, "", null, "", null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));


                    } else if (row[6].toString().trim().contentEquals("S")) {

                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));

                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[3].toString().trim());
                                Double costS = cant * precio;

                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, null, "", null, "", null, "", null, "", null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });
                        } else {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));
                            code = suministrossemielaborados.getCodigo();
                            descrip = suministrossemielaborados.getDescripcion();
                            um = suministrossemielaborados.getUm();
                            precio = suministrossemielaborados.getPreciomn();
                            preciomlc = suministrossemielaborados.getPreciomlc();

                            String cantidad = row[3].toString().trim();
                            Double costo = Double.parseDouble(row[4].toString().trim());

                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, null, "", null, "", null, "", null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));


                        }

                    } else if (row[6].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[3].toString().trim());
                                Double costS = cant * precio;
                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, null, "", null, "", null, "", null, "", null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });
                        } else {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            code = juegoproducto.getCodigo();
                            descrip = juegoproducto.getDescripcion();
                            um = juegoproducto.getUm();
                            precio = juegoproducto.getPreciomn();
                            preciomlc = juegoproducto.getPreciomlc();

                            String cantidad = row[3].toString().trim();
                            Double costo = Double.parseDouble(row[4].toString().trim());

                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, null, "", null, "", null, "", null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }
                    }
                }

            }

            if (niveles == 2) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {

                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    //String rvObj = row[2].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    if (row[9].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[8].toString().trim()));
                        code = rec.getCodigo();
                        descrip = rec.getDescripcion();
                        um = rec.getUm();
                        precio = rec.getPreciomn();
                        preciomlc = rec.getPreciomlc();

                        String cantidad = row[6].toString().trim();
                        Double costo = Double.parseDouble(row[7].toString().trim());

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, null, "", null, "", null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));


                    } else if (row[9].toString().trim().contentEquals("S")) {


                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[8].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[6].toString().trim());
                                Double costS = cant * precio;


                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, null, "", null, "", null, "", null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));
                            });

                        } else {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[8].toString().trim()));
                            code = suministrossemielaborados.getCodigo();
                            descrip = suministrossemielaborados.getDescripcion();
                            um = suministrossemielaborados.getUm();
                            precio = suministrossemielaborados.getPreciomn();
                            preciomlc = suministrossemielaborados.getPreciomlc();

                            String cantidad = row[6].toString().trim();
                            Double costo = Double.parseDouble(row[7].toString().trim());

                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, null, "", null, "", null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }

                    } else if (row[9].toString().trim().contentEquals("J")) {


                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[8].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[6].toString().trim());
                                Double costS = cant * precio;

                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, null, "", null, "", null, "", null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });

                        } else {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[8].toString().trim()));
                            code = juegoproducto.getCodigo();
                            descrip = juegoproducto.getDescripcion();
                            um = juegoproducto.getUm();
                            precio = juegoproducto.getPreciomn();
                            preciomlc = juegoproducto.getPreciomlc();
                            String cantidad = row[6].toString().trim();
                            Double costo = Double.parseDouble(row[7].toString().trim());

                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, null, "", null, "", null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }
                    }

                }

            }

            if (niveles == 3) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    if (row[12].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[11].toString().trim()));
                        code = rec.getCodigo();
                        descrip = rec.getDescripcion();
                        um = rec.getUm();
                        precio = rec.getPreciomn();
                        preciomlc = rec.getPreciomlc();

                        String cantidad = row[9].toString().trim();
                        Double costo = Double.parseDouble(row[10].toString().trim());


                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, null, "", null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));


                    } else if (row[12].toString().trim().contentEquals("S")) {


                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[11].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[9].toString().trim());
                                Double costS = cant * precio;

                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, null, "", null, "", null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });

                        } else {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[11].toString().trim()));
                            code = suministrossemielaborados.getCodigo();
                            descrip = suministrossemielaborados.getDescripcion();
                            um = suministrossemielaborados.getUm();
                            precio = suministrossemielaborados.getPreciomn();
                            preciomlc = suministrossemielaborados.getPreciomlc();

                            String cantidad = row[9].toString().trim();
                            Double costo = Double.parseDouble(row[10].toString().trim());


                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, null, "", null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }

                    } else if (row[12].toString().trim().contentEquals("J")) {


                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[9].toString().trim());
                                Double costS = cant * precio;

                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, null, "", null, "", null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));


                            });

                        } else {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[11].toString().trim()));
                            code = juegoproducto.getCodigo();
                            descrip = juegoproducto.getDescripcion();
                            um = juegoproducto.getUm();
                            precio = juegoproducto.getPreciomn();
                            preciomlc = juegoproducto.getPreciomlc();

                            String cantidad = row[9].toString().trim();
                            Double costo = Double.parseDouble(row[10].toString().trim());


                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, null, "", null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }
                    }
                }

            }

            if (niveles == 4) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();

                    if (row[15].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[14].toString().trim()));
                        code = rec.getCodigo();
                        descrip = rec.getDescripcion();
                        um = rec.getUm();
                        precio = rec.getPreciomn();
                        preciomlc = rec.getPreciomlc();

                        String cantidad = row[12].toString().trim();
                        Double costo = Double.parseDouble(row[13].toString().trim());

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));


                    } else if (row[15].toString().trim().contentEquals("S")) {


                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[14].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[12].toString().trim());
                                Double costS = cant * precio;

                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, null, "", null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });

                        } else {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[14].toString().trim()));
                            code = suministrossemielaborados.getCodigo();
                            descrip = suministrossemielaborados.getDescripcion();
                            um = suministrossemielaborados.getUm();
                            precio = suministrossemielaborados.getPreciomn();
                            preciomlc = suministrossemielaborados.getPreciomlc();

                            String cantidad = row[12].toString().trim();
                            Double costo = Double.parseDouble(row[13].toString().trim());

                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }

                    } else if (row[15].toString().trim().contentEquals("J")) {

                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[12].toString().trim());
                                Double costS = cant * precio;

                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, null, "", null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });

                        } else {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[14].toString().trim()));
                            code = juegoproducto.getCodigo();
                            descrip = juegoproducto.getDescripcion();
                            um = juegoproducto.getUm();
                            precio = juegoproducto.getPreciomn();
                            preciomlc = juegoproducto.getPreciomlc();

                            String cantidad = row[12].toString().trim();
                            Double costo = Double.parseDouble(row[13].toString().trim());

                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, null, "", null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }
                    }


                }

            }

            if (niveles == 5) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    String rvEsp = row[13].toString().trim() + " " + row[14].toString().trim();

                    if (row[18].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[17].toString().trim()));
                        code = rec.getCodigo();
                        descrip = rec.getDescripcion();
                        um = rec.getUm();
                        precio = rec.getPreciomn();

                        String cantidad = row[15].toString().trim();
                        Double costo = Double.parseDouble(row[16].toString().trim());

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));


                    } else if (row[18].toString().trim().contentEquals("S")) {


                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[15].toString().trim());
                                Double costS = cant * precio;

                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));


                            });

                        } else {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[17].toString().trim()));
                            code = suministrossemielaborados.getCodigo();
                            descrip = suministrossemielaborados.getDescripcion();
                            um = suministrossemielaborados.getUm();
                            precio = suministrossemielaborados.getPreciomn();
                            preciomlc = suministrossemielaborados.getPreciomlc();

                            String cantidad = row[15].toString().trim();
                            Double costo = Double.parseDouble(row[16].toString().trim());

                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));


                        }

                    } else if (row[18].toString().trim().contentEquals("J")) {

                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[15].toString().trim());
                                Double costS = cant * precio;
                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });

                        } else {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[17].toString().trim()));
                            code = juegoproducto.getCodigo();
                            descrip = juegoproducto.getDescripcion();
                            um = juegoproducto.getUm();
                            precio = juegoproducto.getPreciomn();
                            preciomlc = juegoproducto.getPreciomlc();

                            String cantidad = row[15].toString().trim();
                            Double costo = Double.parseDouble(row[16].toString().trim());

                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));


                        }
                    }


                }

            }

            if (niveles == 6) {

                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    String rvEsp = row[13].toString().trim() + " " + row[14].toString().trim();
                    String rvSub = row[16].toString().trim() + " " + row[17].toString().trim();

                    if (row[21].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[20].toString().trim()));
                        code = rec.getCodigo();
                        descrip = rec.getDescripcion();
                        um = rec.getUm();
                        precio = rec.getPreciomn();
                        preciomlc = rec.getPreciomlc();
                        String cantidad = row[18].toString().trim();
                        Double costo = Double.parseDouble(row[19].toString().trim());


                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, Integer.parseInt(row[15].toString().trim()), rvSub, code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));


                    } else if (row[21].toString().trim().contentEquals("S")) {


                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[20].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[18].toString().trim());
                                Double costS = cant * precio;
                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, Integer.parseInt(row[15].toString().trim()), rvSub, code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });

                        } else {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[20].toString().trim()));
                            code = suministrossemielaborados.getCodigo();
                            descrip = suministrossemielaborados.getDescripcion();
                            um = suministrossemielaborados.getUm();
                            precio = suministrossemielaborados.getPreciomn();
                            preciomlc = suministrossemielaborados.getPreciomlc();

                            String cantidad = row[18].toString().trim();
                            Double costo = Double.parseDouble(row[19].toString().trim());


                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, Integer.parseInt(row[15].toString().trim()), rvSub, code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }

                    } else if (row[21].toString().trim().contentEquals("J")) {


                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[20].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[18].toString().trim());
                                Double costS = cant * precio;

                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, Integer.parseInt(row[15].toString().trim()), rvSub, code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });

                        } else {

                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[20].toString().trim()));
                            code = juegoproducto.getCodigo();
                            descrip = juegoproducto.getDescripcion();
                            um = juegoproducto.getUm();
                            precio = juegoproducto.getPreciomn();
                            preciomlc = juegoproducto.getPreciomlc();

                            String cantidad = row[18].toString().trim();
                            Double costo = Double.parseDouble(row[19].toString().trim());


                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, Integer.parseInt(row[15].toString().trim()), rvSub, code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }
                    }


                }

            }

            if (niveles == 55) {
                System.out.println("Aqui se calcula");
                List<Object[]> empData = ((NativeQuery) query1).list();
                for (Object[] row : empData) {
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    String rvEsp = row[13].toString().trim() + " " + row[14].toString().trim();

                    if (row[18].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[17].toString().trim()));
                        code = rec.getCodigo();
                        descrip = rec.getDescripcion();
                        um = rec.getUm();
                        precio = rec.getPreciomn();
                        preciomlc = rec.getPreciomlc();

                        String cantidad = row[15].toString().trim();
                        Double costo = Double.parseDouble(row[16].toString().trim());

                        datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));


                    } else if (row[18].toString().trim().contentEquals("S")) {


                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[17].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[15].toString().trim());
                                Double costS = cant * precio;

                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });

                        } else {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[17].toString().trim()));
                            code = suministrossemielaborados.getCodigo();
                            descrip = suministrossemielaborados.getDescripcion();
                            um = suministrossemielaborados.getUm();
                            precio = suministrossemielaborados.getPreciomn();
                            preciomlc = suministrossemielaborados.getPreciomlc();

                            String cantidad = row[15].toString().trim();
                            Double costo = Double.parseDouble(row[16].toString().trim());

                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }

                    } else if (row[18].toString().trim().contentEquals("J")) {

                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            arrayListComponets.forEach(items -> {
                                code = items.getCode();
                                descrip = items.getDesc();
                                um = items.getUm();
                                precio = items.getPrecio();
                                preciomlc = items.getPreciomlc();
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[15].toString().trim());
                                Double costS = cant * precio;

                                datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, items.tipo, 1, 1, 1, 1, cant, precio, preciomlc, costS, "I"));

                            });

                        } else {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[14].toString().trim()));
                            code = juegoproducto.getCodigo();
                            descrip = juegoproducto.getDescripcion();
                            um = juegoproducto.getUm();
                            precio = juegoproducto.getPreciomn();
                            preciomlc = juegoproducto.getPreciomlc();

                            String cantidad = row[15].toString().trim();
                            Double costo = Double.parseDouble(row[16].toString().trim());

                            datosCuantitativaModelVGESArrayList.add(new DatosCuantitativaModelVGES(idEmp, Empr, Integer.parseInt(row[3].toString().trim()), rvZon, Integer.parseInt(row[6].toString().trim()), rvObj, Integer.parseInt(row[9].toString().trim()), rvNiv, Integer.parseInt(row[12].toString().trim()), rvEsp, null, "", code, descrip, um, "Materiales", 1, 1, 1, 1, Double.parseDouble(cantidad), precio, preciomlc, costo, "I"));

                        }
                    }
                }
            }

            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return datosCuantitativaModelVGESArrayList;

    }

    public ArrayList<CuantitativaModelToCERT> getCuantitativaDatosForReportCert
            (ArrayList<DatosCuantitativaModelCert> uoReportModelArray, GroupToReport groupToReport) {

        cuantitativaModelToCERTArrayList = new ArrayList<CuantitativaModelToCERT>();
        fondoHorarioExplotacionModels = new ArrayList<FondoHorarioExplotacionModel>();
        fondoHorarioExplotacionModels = getFondoHorarioExplotacionModelsCERT(uoReportModelArray, groupToReport);
        for (DatosCuantitativaModelCert arrayUO : uoReportModelArray) {
            if (arrayUO.getIdEmpresa() == groupToReport.getIdEmpresa() && arrayUO.getEmpresa().contentEquals(groupToReport.getEmpresaName())) {
                cuantitativaModelToCERTArrayList.add(new CuantitativaModelToCERT(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getZona(), arrayUO.getObjeto(), arrayUO.getNivel(), arrayUO.getEspecialidad(), arrayUO.getSubespecialidad(), arrayUO.getCodigo(), arrayUO.getDescripcion(), arrayUO.getUm(), arrayUO.getTipo(), arrayUO.getCantidad(), arrayUO.getPrecio(), arrayUO.getPreciomlc(), arrayUO.getCostoTotal(), arrayUO.getUnidad(), arrayUO.getBrigada(), arrayUO.getGrupo(), arrayUO.getCuadrilla(), fondoHorarioExplotacionModels));

            }
        }
        return cuantitativaModelToCERTArrayList;

    }

    public ArrayList<CuantitativaModel> createReportCuantitativaFormater(ReportesController
                                                                                 reportes, ArrayList<DatosCuantitativaModel> datosCuantitativaModel, Obra obra) {
        reportesController = reportes;

        groupToReportsArrayList = new ArrayList<GroupToReport>();
        cuantitativaModelArrayList = new ArrayList<DatosCuantitativaModel>();
        cuantitativaModelArrayList = datosCuantitativaModel;
        groupToReportsArrayList = getEmpresaInDatosCuentitativa(cuantitativaModelArrayList, obra);

        cuantitativaModelsReArrayList = new ArrayList<CuantitativaModel>();

        tempCuanti = new ArrayList<>();
        for (GroupToReport groupToRep : groupToReportsArrayList) {
            cuantitativaModelsReArrayList = getCuantitativaDatosForReport(cuantitativaModelArrayList, groupToRep);
            tempCuanti.addAll(cuantitativaModelsReArrayList);
        }
        return tempCuanti;
    }

    public ArrayList<FondoHorarioExplotacionModel> getFondoHorarioExplotacionModelsCERT
            (ArrayList<DatosCuantitativaModelCert> uoReportModelArray, GroupToReport groupToReport) {
        fondoHorarioExplotacionModels = new ArrayList<FondoHorarioExplotacionModel>();
        for (DatosCuantitativaModelCert datosCuantitativaModel : uoReportModelArray) {
            System.out.println(datosCuantitativaModel.getTipo());
            if (datosCuantitativaModel.getTipo().trim().equals("Equipos")) {
                Recursos rec = getRecursosByCode(datosCuantitativaModel.getCodigo().trim(), groupToReport.getObraSalarioTag());
                double cme = datosCuantitativaModel.getCantidad() * rec.getSalario();
                fondoHorarioExplotacionModels.add(new FondoHorarioExplotacionModel(1, rec.getCodigo(), rec.getDescripcion(), datosCuantitativaModel.getCantidad(), rec.getSalario(), cme, 0, 0, 0, 0, 0, 0));
            }
        }
        return fondoHorarioExplotacionModels;
    }

    public ArrayList<DatosCuantitativaGenreralForReportModel> createReportCuantitativaGeneralFormater
            (ReportesController reportes, ArrayList<DatosCuantitativaGenreralModel> datosCuantitativaModel, Obra obra) {
        reportesController = reportes;

        ArrayList<DatosCuantitativaGenreralForReportModel> datosCuantitativaGenreralForReportModels = new ArrayList<>();
        List<FondoHorarioExplotacionModel> datFondoHorarioExplotacionModels = new ArrayList<>();

        for (DatosCuantitativaGenreralModel dcgr : datosCuantitativaModel) {
            if (dcgr.getTipo().equals("Equipos")) {
                Recursos rec = getRecursosByCode(dcgr.getCodigo().trim(), obra.getSalarioBySalarioId().getTag());
                double cme = dcgr.getCantidad() * rec.getSalario();
                datFondoHorarioExplotacionModels.add(new FondoHorarioExplotacionModel(1, rec.getCodigo().trim(), rec.getDescripcion().trim(), dcgr.getCantidad(), rec.getSalario(), cme, 0, 0, 0, 0, 0, 0));
            }
        }
        for (DatosCuantitativaGenreralModel dcgr : datosCuantitativaModel) {
            datosCuantitativaGenreralForReportModels.add(new DatosCuantitativaGenreralForReportModel(dcgr.getEmpresa(), dcgr.getZona(), dcgr.getObjeto(), dcgr.getNivel(), dcgr.especialidad, dcgr.getSubespecialidad(), dcgr.getCodigo(), dcgr.getDescripcion(), dcgr.getUm(), dcgr.getTipo(), dcgr.getCantidad(), dcgr.getPrecio(), dcgr.getPreciomlc(), dcgr.getCostoTotal(), datFondoHorarioExplotacionModels));
        }
        return datosCuantitativaGenreralForReportModels;
    }

    public ArrayList<DatosCuantitativaGenreralForReportModelCertificacion> createReportCuantitativaGeneralFormaterCertificacion
            (ReportesController reportes, ArrayList<DatosCuantitativaGenreralModelCertificacion> datosCuantitativaModel, Obra obra) {
        reportesController = reportes;
        ArrayList<DatosCuantitativaGenreralForReportModelCertificacion> datosCuantitativaGenreralForReportModels = new ArrayList<>();
        List<FondoHorarioExplotacionModel> datFondoHorarioExplotacionModels = new ArrayList<>();
        for (DatosCuantitativaGenreralModelCertificacion dcgr : datosCuantitativaModel) {
            if (dcgr.getTipo().equals("Equipos")) {
                Recursos rec = getRecursosByCode(dcgr.getCodigo().trim(), obra.getSalarioBySalarioId().getTag());
                double cme = dcgr.getCantidad() * rec.getSalario();
                datFondoHorarioExplotacionModels.add(new FondoHorarioExplotacionModel(1, rec.getCodigo().trim(), rec.getDescripcion().trim(), dcgr.getCantidad(), rec.getSalario(), cme, 0, 0, 0, 0, 0, 0));
            }
        }
        for (DatosCuantitativaGenreralModelCertificacion dcgr : datosCuantitativaModel) {
            datosCuantitativaGenreralForReportModels.add(new DatosCuantitativaGenreralForReportModelCertificacion(dcgr.getEmpresa(), dcgr.getZona(), dcgr.getObjeto(), dcgr.getNivel(), dcgr.especialidad, dcgr.getSubespecialidad(), dcgr.getBrigada(), dcgr.getGrupo(), dcgr.getCuadrilla(), dcgr.getCodigo(), dcgr.getDescripcion(), dcgr.getUm(), dcgr.getTipo(), dcgr.getCantidad(), dcgr.getPrecio(), dcgr.getPreciomlc(), dcgr.getCostoTotal(), datFondoHorarioExplotacionModels));
        }
        return datosCuantitativaGenreralForReportModels;
    }

    public ArrayList<CuantitativaModelToCERT> createReportCuantitativaCertFormater(ReportesController
                                                                                           reportes, ArrayList<DatosCuantitativaModelCert> datosCuantitativaModel, Obra obra) {
        reportesController = reportes;
        groupToReportsArrayList = new ArrayList<GroupToReport>();
        cuantitativaModelCertsArrayList = new ArrayList<DatosCuantitativaModelCert>();
        cuantitativaModelCertsArrayList = datosCuantitativaModel;
        groupToReportsArrayList = getEmpresaInDatosCuentitativaCert(cuantitativaModelCertsArrayList, obra);

        cuantitativaModelToCERTArrayList = new ArrayList<CuantitativaModelToCERT>();
        tempCuantitoCert = new ArrayList<>();
        for (GroupToReport groupToRep : groupToReportsArrayList) {
            cuantitativaModelToCERTArrayList = getCuantitativaDatosForReportCert(cuantitativaModelCertsArrayList, groupToRep);
            tempCuantitoCert.addAll(cuantitativaModelToCERTArrayList);
        }

        return tempCuantitoCert;
    }

    public ArrayList<CuantitativaModel> getCuantitativaDatosForReport
            (ArrayList<DatosCuantitativaModel> uoReportModelArray, GroupToReport groupToReport) {

        cuantitativaModelsReArrayList = new ArrayList<CuantitativaModel>();
        fondoHorarioExplotacionModels = new ArrayList<FondoHorarioExplotacionModel>();
        valCoeficientes = new Double[2];
        fondoHorarioExplotacionModels = getFondoHorarioExplotacionModels(uoReportModelArray, groupToReport);
        valCoeficientes = getCoeficientesEmpresa(groupToReport.getIdEmpresa());
        calculate = 0.0;
        for (DatosCuantitativaModel arrayUO : uoReportModelArray) {
            if (arrayUO.getIdEmpresa() == groupToReport.getIdEmpresa() && arrayUO.getEmpresa().contentEquals(groupToReport.getEmpresaName())) {
                if (arrayUO.getTipo().contentEquals("Mano de Obra")) {
                    calculate = arrayUO.getCostoTotal() * valCoeficientes[0];
                    cuantitativaModelsReArrayList.add(new CuantitativaModel(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getZona(), arrayUO.getObjeto(), arrayUO.getNivel(), arrayUO.getEspecialidad(), arrayUO.getSubespecialidad(), arrayUO.getCodigo(), arrayUO.getDescripcion(), arrayUO.getUm(), arrayUO.getTipo(), arrayUO.getCantidad(), arrayUO.getPrecio(), arrayUO.getPreciomlc(), calculate, fondoHorarioExplotacionModels));

                } else if (arrayUO.getTipo().contentEquals("Equipos")) {
                    calculate = arrayUO.getCostoTotal() * valCoeficientes[1];
                    cuantitativaModelsReArrayList.add(new CuantitativaModel(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getZona(), arrayUO.getObjeto(), arrayUO.getNivel(), arrayUO.getEspecialidad(), arrayUO.getSubespecialidad(), arrayUO.getCodigo(), arrayUO.getDescripcion(), arrayUO.getUm(), arrayUO.getTipo(), arrayUO.getCantidad(), arrayUO.getPrecio(), arrayUO.getPreciomlc(), calculate, fondoHorarioExplotacionModels));

                } else if (arrayUO.getTipo().contentEquals("Materiales"))

                    cuantitativaModelsReArrayList.add(new CuantitativaModel(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getZona(), arrayUO.getObjeto(), arrayUO.getNivel(), arrayUO.getEspecialidad(), arrayUO.getSubespecialidad(), arrayUO.getCodigo(), arrayUO.getDescripcion(), arrayUO.getUm(), arrayUO.getTipo(), arrayUO.getCantidad(), arrayUO.getPrecio(), arrayUO.getPreciomlc(), arrayUO.getCostoTotal(), fondoHorarioExplotacionModels));

            }
        }

        return cuantitativaModelsReArrayList;

    }

    public ArrayList<FondoHorarioExplotacionModel> getFondoHorarioExplotacionModels
            (ArrayList<DatosCuantitativaModel> uoReportModelArray, GroupToReport groupToReport) {

        fondoHorarioExplotacionModels = new ArrayList<FondoHorarioExplotacionModel>();
        for (DatosCuantitativaModel datosCuantitativaModel : uoReportModelArray) {
            if (datosCuantitativaModel.getTipo().contentEquals("Equipos")) {
                Recursos rec = getRecursosByCode(datosCuantitativaModel.getCodigo().trim(), groupToReport.getObraSalarioTag());
                double cme = datosCuantitativaModel.getCantidad() * rec.getSalario();
                fondoHorarioExplotacionModels.add(new FondoHorarioExplotacionModel(1, rec.getCodigo().trim(), rec.getDescripcion().trim(), datosCuantitativaModel.getCantidad(), rec.getSalario(), cme, 0, 0, 0, 0, 0, 0));

            }
        }


        return fondoHorarioExplotacionModels;
    }

    public ArrayList<TotalReportModel> getTotales(ReportesController reportes, String query, int niveles) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            totalReportModelArrayList = new ArrayList<>();
            List<Object[]> tupleList = session.createQuery(query).getResultList();
            for (Object[] row : tupleList) {
                if (niveles == 1) {
                    double materiales = Double.parseDouble(row[3].toString().trim());
                    double mano = Double.parseDouble(row[4].toString().trim());
                    double equipos = Double.parseDouble(row[5].toString().trim());
                    double totalCalc = materiales + mano + equipos;
                    totalReportModelArrayList.add(new TotalReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), " ", " ", " ", " ", " ", materiales, mano, equipos, totalCalc));
                } else if (niveles == 2) {
                    total = Double.parseDouble(row[5].toString().trim()) + Double.parseDouble(row[6].toString().trim()) + Double.parseDouble(row[7].toString().trim());
                    totalReportModelArrayList.add(new TotalReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), " ", " ", " ", " ", Double.parseDouble(row[5].toString().trim()), Double.parseDouble(row[6].toString().trim()), Double.parseDouble(row[7].toString().trim()), Math.round(total * 100d) / 100d));
                } else if (niveles == 3) {
                    total = Double.parseDouble(row[7].toString().trim()) + Double.parseDouble(row[8].toString().trim()) + Double.parseDouble(row[9].toString().trim());
                    totalReportModelArrayList.add(new TotalReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), " ", " ", " ", Double.parseDouble(row[7].toString().trim()), Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Math.round(total * 100d) / 100d));
                } else if (niveles == 4) {
                    total = Double.parseDouble(row[9].toString().trim()) + Double.parseDouble(row[10].toString().trim()) + Double.parseDouble(row[11].toString().trim());
                    totalReportModelArrayList.add(new TotalReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), row[7].toString().trim() + " " + row[8].toString().trim(), " ", " ", Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Math.round(total * 100d) / 100d));
                } else if (niveles == 5) {
                    total = Double.parseDouble(row[11].toString().trim()) + Double.parseDouble(row[12].toString().trim()) + Double.parseDouble(row[13].toString().trim());
                    totalReportModelArrayList.add(new TotalReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), row[7].toString().trim() + " " + row[8].toString().trim(), row[9].toString().trim() + " " + row[10].toString().trim(), " ", Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Math.round(total * 100d) / 100d));
                } else if (niveles == 6) {
                    total = Double.parseDouble(row[13].toString().trim()) + Double.parseDouble(row[14].toString().trim()) + Double.parseDouble(row[15].toString().trim());
                    totalReportModelArrayList.add(new TotalReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), row[7].toString().trim() + " " + row[8].toString().trim(), row[9].toString().trim() + " " + row[10].toString().trim(), row[11].toString().trim() + " " + row[12].toString().trim(), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), Math.round(total * 100d) / 100d));
                } else if (niveles == 15) {
                    total = Double.parseDouble(row[5].toString().trim()) + Double.parseDouble(row[6].toString().trim()) + Double.parseDouble(row[7].toString().trim());
                    totalReportModelArrayList.add(new TotalReportModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), "", " ", " ", row[3].toString().trim() + " " + row[4].toString().trim(), " ", Double.parseDouble(row[5].toString().trim()), Double.parseDouble(row[6].toString().trim()), Double.parseDouble(row[7].toString().trim()), Math.round(total * 100d) / 100d));
                }


            }

            tx.commit();
            session.close();
            return totalReportModelArrayList;
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.WARNING);
            alert.setHeaderText(this.getClass().getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();

        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    public ArrayList<GroupToReport> getEmpresaInDatosCuentitativaUOGroup
            (ArrayList<DatosCuantitativaUOGRUPModel> datosArrayList, Obra obra) {
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        for (DatosCuantitativaUOGRUPModel uoreprt : datosArrayList) {
            GroupToReport groupToReport = new GroupToReport(uoreprt.getIdEmpresa(), uoreprt.getEmpresa(), obra.getSalarioBySalarioId().getTag());
            if (groupToReportsArrayList.size() == 0) {
                groupToReportsArrayList.add(groupToReport);
            } else if (!groupToReportsArrayList.contains(groupToReport)) {
                groupToReportsArrayList.add(groupToReport);
            }

        }
        return groupToReportsArrayList;
    }

    public ArrayList<CuantitativaUOGROUPModel> getCuantitativaUOGROUPDatosForReport
            (ArrayList<DatosCuantitativaUOGRUPModel> uoReportModelArray, GroupToReport groupToReport) {

        cuantitativaUOGROUPModelArrayList = new ArrayList<CuantitativaUOGROUPModel>();
        fondoHorarioExplotacionModels = new ArrayList<FondoHorarioExplotacionModel>();
        valCoeficientes = new Double[2];
        valCoeficientes = getCoeficientesEmpresa(groupToReport.getIdEmpresa());
        fondoHorarioExplotacionModels = getFondoHorarioExplotacionModelsUOGROUP(uoReportModelArray, groupToReport);

        calculate = 0.0;
        for (DatosCuantitativaUOGRUPModel arrayUO : uoReportModelArray) {
            if (arrayUO.getIdEmpresa() == groupToReport.getIdEmpresa() && arrayUO.getEmpresa().contentEquals(groupToReport.getEmpresaName())) {
                if (arrayUO.getTipo().contentEquals("Mano de Obra") || arrayUO.getTipo().contentEquals("2")) {
                    calculate = arrayUO.getCostoTotal() * 1.0;
                    cuantitativaUOGROUPModel = new CuantitativaUOGROUPModel(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getZona(), arrayUO.getObjeto(), arrayUO.getNivel(), arrayUO.getEspecialidad(), arrayUO.getSubespecialidad(), arrayUO.getIdUO(), arrayUO.getCodeUO(), arrayUO.getDescripUO(), arrayUO.getUmUO(), arrayUO.getCantUO(), arrayUO.getCodigo(), arrayUO.getDescripcion(), arrayUO.getUm(), arrayUO.getTipo(), arrayUO.getCantidad(), arrayUO.getPrecio(), arrayUO.getPreciomlc(), calculate, fondoHorarioExplotacionModels);
                } else if (arrayUO.getTipo().contentEquals("Equipos") || arrayUO.getTipo().contentEquals("3")) {
                    calculate = arrayUO.getCostoTotal() * 1.0;
                    cuantitativaUOGROUPModel = new CuantitativaUOGROUPModel(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getZona(), arrayUO.getObjeto(), arrayUO.getNivel(), arrayUO.getEspecialidad(), arrayUO.getSubespecialidad(), arrayUO.getIdUO(), arrayUO.getCodeUO(), arrayUO.getDescripUO(), arrayUO.getUmUO(), arrayUO.getCantUO(), arrayUO.getCodigo(), arrayUO.getDescripcion(), arrayUO.getUm(), arrayUO.getTipo(), arrayUO.getCantidad(), arrayUO.getPrecio(), arrayUO.getPreciomlc(), calculate, fondoHorarioExplotacionModels);
                } else if (arrayUO.getTipo().contentEquals("Materiales") || arrayUO.getTipo().contentEquals("1")) {
                    calculate = arrayUO.getCostoTotal();
                    cuantitativaUOGROUPModel = new CuantitativaUOGROUPModel(groupToReport.getIdEmpresa(), groupToReport.getEmpresaName(), arrayUO.getZona(), arrayUO.getObjeto(), arrayUO.getNivel(), arrayUO.getEspecialidad(), arrayUO.getSubespecialidad(), arrayUO.getIdUO(), arrayUO.getCodeUO(), arrayUO.getDescripUO(), arrayUO.getUmUO(), arrayUO.getCantUO(), arrayUO.getCodigo(), arrayUO.getDescripcion(), arrayUO.getUm(), arrayUO.getTipo(), arrayUO.getCantidad(), arrayUO.getPrecio(), arrayUO.getPreciomlc(), calculate, fondoHorarioExplotacionModels);
                }
                cuantitativaUOGROUPModelArrayList.add(cuantitativaUOGROUPModel);
            }
        }
        return cuantitativaUOGROUPModelArrayList;
    }

    public ArrayList<FondoHorarioExplotacionModel> getFondoHorarioExplotacionModelsUOGROUP
            (ArrayList<DatosCuantitativaUOGRUPModel> uoReportModelArray, GroupToReport groupToReport) {


        fondoHorarioExplotacionModels = new ArrayList<FondoHorarioExplotacionModel>();
        uoReportModelArray.forEach(datosCuantitativaModel -> {
            if (datosCuantitativaModel.getTipo().contentEquals("Equipos")) {
                Recursos rec = getRecursosByCode(datosCuantitativaModel.getCodigo().trim(), groupToReport.getObraSalarioTag());
                double cme = datosCuantitativaModel.getCantidad() * rec.getSalario();
                fondoHorarioExplotacionModels.add(new FondoHorarioExplotacionModel(1, rec.getCodigo(), rec.getDescripcion(), datosCuantitativaModel.getCantidad(), rec.getSalario(), cme, 0, 0, 0, 0, 0, 0));

            }

        });
        return fondoHorarioExplotacionModels;
    }

    /**
     * para el calculo del salario
     */
    public ArrayList<SalarioReportModel> getSalarioUO(ReportesController reportes, String query, int niveles) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            List<Unidadobra> unidadobrasList = session.createQuery(query).getResultList();
            salarioReportModelArrayList = new ArrayList<>();
            for (Unidadobra unidadobra : unidadobrasList) {
                empresaBild = new StringBuilder().append(unidadobra.getEmpresaconstructoraByEmpresaconstructoraId().getCodigo().trim()).append(" ").append(unidadobra.getEmpresaconstructoraByEmpresaconstructoraId().getDescripcion().trim());
                zonaBild = new StringBuilder().append(unidadobra.getZonasByZonasId().getCodigo().trim()).append(" ").append(unidadobra.getZonasByZonasId().getDesripcion().trim());
                objetoBild = new StringBuilder().append(unidadobra.getObjetosByObjetosId().getCodigo().trim()).append(" ").append(unidadobra.getObjetosByObjetosId().getDescripcion().trim());
                nivelBild = new StringBuilder().append(unidadobra.getNivelByNivelId().getCodigo().trim()).append(" ").append(unidadobra.getNivelByNivelId().getDescripcion().trim());
                especialidadBild = new StringBuilder().append(unidadobra.getEspecialidadesByEspecialidadesId().getCodigo().trim()).append(" ").append(unidadobra.getEspecialidadesByEspecialidadesId().getDescripcion().trim());
                subBild = new StringBuilder().append(unidadobra.getSubespecialidadesBySubespecialidadesId().getCodigo().trim()).append(" ").append(unidadobra.getSubespecialidadesBySubespecialidadesId().getDescripcion().trim());
                uocode = new StringBuilder().append(" UO ").append(unidadobra.getCodigo().trim());
                double hhUO = getHHInUOCert(unidadobra);
                double salarioCErt = unidadobra.getCantidad() * getSalarioInUO(unidadobra);
                salarioReportModelArrayList.add(new SalarioReportModel(empresaBild.toString().trim(), zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), uocode.toString().trim(), unidadobra.getDescripcion().trim(), unidadobra.getUm(), unidadobra.getCantidad(), hhUO, salarioCErt));
            }
            tx.commit();
            session.close();
            return salarioReportModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();

    }

    public ArrayList<SalarioReportModel> getSalarioUOCertificacion(ReportesController reportes, String query,
                                                                   int niveles) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            List<Tuple> unidadobrasList = session.createQuery(query, Tuple.class).getResultList();
            salarioReportModelArrayList = new ArrayList<>();
            for (Tuple tuple : unidadobrasList) {
                Certificacion certificacion = (Certificacion) tuple.get(0);
                empresaBild = new StringBuilder().append(certificacion.getUnidadobraByUnidadobraId().getEmpresaconstructoraByEmpresaconstructoraId().getCodigo().trim()).append(" ").append(certificacion.getUnidadobraByUnidadobraId().getEmpresaconstructoraByEmpresaconstructoraId().getDescripcion().trim());
                zonaBild = new StringBuilder().append(certificacion.getUnidadobraByUnidadobraId().getZonasByZonasId().getCodigo().trim()).append(" ").append(certificacion.getUnidadobraByUnidadobraId().getZonasByZonasId().getDesripcion().trim());
                objetoBild = new StringBuilder().append(certificacion.getUnidadobraByUnidadobraId().getObjetosByObjetosId().getCodigo().trim()).append(" ").append(certificacion.getUnidadobraByUnidadobraId().getObjetosByObjetosId().getDescripcion().trim());
                nivelBild = new StringBuilder().append(certificacion.getUnidadobraByUnidadobraId().getNivelByNivelId().getCodigo().trim()).append(" ").append(certificacion.getUnidadobraByUnidadobraId().getNivelByNivelId().getDescripcion().trim());
                especialidadBild = new StringBuilder().append(certificacion.getUnidadobraByUnidadobraId().getEspecialidadesByEspecialidadesId().getCodigo().trim()).append(" ").append(certificacion.getUnidadobraByUnidadobraId().getEspecialidadesByEspecialidadesId().getDescripcion().trim());
                subBild = new StringBuilder().append(certificacion.getUnidadobraByUnidadobraId().getSubespecialidadesBySubespecialidadesId().getCodigo().trim()).append(" ").append(certificacion.getUnidadobraByUnidadobraId().getSubespecialidadesBySubespecialidadesId().getDescripcion().trim());
                uocode = new StringBuilder().append(" UO ").append(certificacion.getUnidadobraByUnidadobraId().getCodigo().trim());
                double hhUO = getHHInUOCert(certificacion.getUnidadobraByUnidadobraId());
                double hhCertifi = hhUO * certificacion.getCantidad() / certificacion.getUnidadobraByUnidadobraId().getCantidad();
                double salarioCErt = certificacion.getCantidad() * getSalarioInUO(certificacion.getUnidadobraByUnidadobraId());
                salarioReportModelArrayList.add(new SalarioReportModel(empresaBild.toString().trim(), zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), uocode.toString().trim(), certificacion.getUnidadobraByUnidadobraId().getDescripcion().trim(), certificacion.getUnidadobraByUnidadobraId().getUm(), certificacion.getCantidad(), hhCertifi, salarioCErt));
            }
            tx.commit();
            session.close();
            return salarioReportModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    private double getHHInUO(Unidadobra unidadobra) {
        double hh = 0.0;
        for (Unidadobrarenglon unidadobrarenglon1 : unidadobra.getUnidadobrarenglonsById()) {
            hh += unidadobrarenglon1.getCantRv() * getHHInUORV(unidadobrarenglon1);
        }
        return hh;
    }

    private double getHHInUORV(Unidadobrarenglon ur) {
        double normaInRV = 0.0;
        for (Renglonrecursos renglonrecursos : ur.getRenglonvarianteByRenglonvarianteId().getRenglonrecursosById()) {
            if (renglonrecursos.getRecursosByRecursosId().getTipo().equals("2")) {
                normaInRV += renglonrecursos.getCantidas();
            }
        }
        return normaInRV;
    }

    private double getHHInUOCert(Unidadobra unidadobra) {
        double hh = 0.0;
        for (Unidadobrarenglon unidadobrarenglon1 : unidadobra.getUnidadobrarenglonsById()) {
            hh += unidadobrarenglon1.getCantRv() * getHHInUORVCert(unidadobrarenglon1);
        }
        return hh;
    }

    private double getHHInUORVCert(Unidadobrarenglon ur) {
        double normaInRV = 0.0;
        for (Renglonrecursos renglonrecursos : ur.getRenglonvarianteByRenglonvarianteId().getRenglonrecursosById()) {
            if (renglonrecursos.getRecursosByRecursosId().getTipo().equals("2") || renglonrecursos.getRecursosByRecursosId().getTipo().equals("3")) {
                normaInRV += renglonrecursos.getCantidas();
            }
        }
        return normaInRV;
    }

    private double getSalarioInUO(Unidadobra unidadobra) {
        double salario = 0.0;
        for (Unidadobrarenglon unidadobrarenglon1 : unidadobra.getUnidadobrarenglonsById()) {
            double salariocal = getSalarioInRVSimple(unidadobrarenglon1);
            salario += salariocal * unidadobrarenglon1.getCantRv() / unidadobrarenglon1.getUnidadobraByUnidadobraId().getCantidad();
        }
        return salario;
    }

    private double getSalarioInRVSimple(Unidadobrarenglon unidadobrarenglon) {
        List<Renglonrecursos> recursos = new ArrayList<>();
        recursos = getRenglonrecursos(unidadobrarenglon.getRenglonvarianteId());
        salarioMano = 0.0;
        salarioEquipo = 0.0;
        for (Renglonrecursos recurso : recursos) {
            if (recurso.getRecursosByRecursosId().getTipo().equals("2")) {
                salarioMano += recurso.getCantidas() * getValorSalario(unidadobrarenglon.getUnidadobraByUnidadobraId().getEmpresaconstructoraId(), unidadobrarenglon.getUnidadobraByUnidadobraId().getObraId(), recurso.getRecursosByRecursosId().getGrupoescala());
            } else if (recurso.getRecursosByRecursosId().getTipo().equals("3")) {
                salarioEquipo += recurso.getCantidas() * salarioInEquipo(unidadobrarenglon.getUnidadobraByUnidadobraId().getObraId(), unidadobrarenglon.getUnidadobraByUnidadobraId().getEmpresaconstructoraId(), recurso.getRecursosId());
            }
        }
        return salarioMano + salarioEquipo;
    }

    public ArrayList<SalarioUORVReportModel> getSalarioUORV(ReportesController reportes, String query,
                                                            int niveles) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            salarioUORVReportModelArrayList = new ArrayList<>();
            List<Tuple> tupleList = session.createQuery(query, Tuple.class).getResultList();
            for (Tuple tuple : tupleList) {
                Unidadobrarenglon ur = (Unidadobrarenglon) tuple.get(0);
                empresaBild = new StringBuilder().append(ur.getUnidadobraByUnidadobraId().getEmpresaconstructoraByEmpresaconstructoraId().getCodigo().trim()).append(" ").append(ur.getUnidadobraByUnidadobraId().getEmpresaconstructoraByEmpresaconstructoraId().getDescripcion().trim());
                zonaBild = new StringBuilder().append(ur.getUnidadobraByUnidadobraId().getZonasByZonasId().getCodigo().trim()).append(" ").append(ur.getUnidadobraByUnidadobraId().getZonasByZonasId().getDesripcion().trim());
                objetoBild = new StringBuilder().append(ur.getUnidadobraByUnidadobraId().getObjetosByObjetosId().getCodigo().trim()).append(" ").append(ur.getUnidadobraByUnidadobraId().getObjetosByObjetosId().getDescripcion().trim());
                nivelBild = new StringBuilder().append(ur.getUnidadobraByUnidadobraId().getNivelByNivelId().getCodigo().trim()).append(" ").append(ur.getUnidadobraByUnidadobraId().getNivelByNivelId().getDescripcion().trim());
                especialidadBild = new StringBuilder().append(ur.getUnidadobraByUnidadobraId().getEspecialidadesByEspecialidadesId().getCodigo().trim()).append(" ").append(ur.getUnidadobraByUnidadobraId().getEspecialidadesByEspecialidadesId().getDescripcion().trim());
                subBild = new StringBuilder().append(ur.getUnidadobraByUnidadobraId().getSubespecialidadesBySubespecialidadesId().getCodigo().trim()).append(" ").append(ur.getUnidadobraByUnidadobraId().getSubespecialidadesBySubespecialidadesId().getDescripcion().trim());
                uocode = new StringBuilder().append(" UO ").append(ur.getUnidadobraByUnidadobraId().getCodigo().trim()).append(" ").append(ur.getUnidadobraByUnidadobraId().getDescripcion().trim()).append(ur.getUnidadobraByUnidadobraId().getCantidad()).append(" / ").append(ur.getUnidadobraByUnidadobraId().getUm().trim());
                double hhInRV = ur.getCantRv() * getHHinRV(ur.getRenglonvarianteByRenglonvarianteId());
                salarioUORVReportModelArrayList.add(new SalarioUORVReportModel(empresaBild.toString().trim(), zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), uocode.toString().trim(), ur.getUnidadobraByUnidadobraId().getDescripcion().trim(), ur.getUnidadobraByUnidadobraId().getUm().trim(), ur.getUnidadobraByUnidadobraId().getCantidad(), ur.getRenglonvarianteByRenglonvarianteId().getCodigo().trim(), ur.getRenglonvarianteByRenglonvarianteId().getDescripcion().trim(), ur.getRenglonvarianteByRenglonvarianteId().getUm().trim(), ur.getCantRv(), hhInRV, ur.getSalariomn()));
            }
            tx.commit();
            session.close();
            return salarioUORVReportModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();

    }

    public ArrayList<SalarioUORVReportModel> getSalarioUORVCertificacion(ReportesController reportes, String query,
                                                                         int niveles) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            salarioUORVReportModelArrayList = new ArrayList<>();
            List<Tuple> tupleList = session.createQuery(query, Tuple.class).getResultList();
            for (Tuple tuple : tupleList) {
                Certificacionrecuo ur = (Certificacionrecuo) tuple.get(0);
                Unidadobra unidadobra = getUnidadObra(ur.getUnidadobraId());
                empresaBild = new StringBuilder().append(unidadobra.getEmpresaconstructoraByEmpresaconstructoraId().getCodigo().trim()).append(" ").append(unidadobra.getEmpresaconstructoraByEmpresaconstructoraId().getDescripcion().trim());
                zonaBild = new StringBuilder().append(unidadobra.getZonasByZonasId().getCodigo().trim()).append(" ").append(unidadobra.getZonasByZonasId().getDesripcion().trim());
                objetoBild = new StringBuilder().append(unidadobra.getObjetosByObjetosId().getCodigo().trim()).append(" ").append(unidadobra.getObjetosByObjetosId().getDescripcion().trim());
                nivelBild = new StringBuilder().append(unidadobra.getNivelByNivelId().getCodigo().trim()).append(" ").append(unidadobra.getNivelByNivelId().getDescripcion().trim());
                especialidadBild = new StringBuilder().append(unidadobra.getEspecialidadesByEspecialidadesId().getCodigo().trim()).append(" ").append(unidadobra.getEspecialidadesByEspecialidadesId().getDescripcion().trim());
                subBild = new StringBuilder().append(unidadobra.getSubespecialidadesBySubespecialidadesId().getCodigo().trim()).append(" ").append(unidadobra.getSubespecialidadesBySubespecialidadesId().getDescripcion().trim());
                uocode = new StringBuilder().append(" UO ").append(unidadobra.getCodigo().trim()).append(" ").append(unidadobra.getDescripcion().trim()).append(ur.getCantidad()).append(" / ").append(unidadobra.getUm().trim());
                Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == ur.getRenglonId()).findFirst().get();
                double hhInRV = ur.getCantidad() * getHHinRV(renglonvariante);
                double salarioInRVCertif = ur.getCantidad() * getSalarioInRVUnico(unidadobra, renglonvariante);
                salarioUORVReportModelArrayList.add(new SalarioUORVReportModel(empresaBild.toString().trim(), zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), uocode.toString().trim(), unidadobra.getDescripcion().trim(), unidadobra.getUm().trim(), unidadobra.getCantidad(), renglonvariante.getCodigo().trim(), renglonvariante.getDescripcion().trim(), renglonvariante.getUm().trim(), ur.getCantidad(), hhInRV, salarioInRVCertif));
            }
            tx.commit();
            session.close();
            return salarioUORVReportModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();
    }

    private double getHHinRV(Renglonvariante renglonvariante) {
        double normasRV = 0.0;
        for (Renglonrecursos renglonrecursos : renglonvariante.getRenglonrecursosById()) {
            if (renglonrecursos.getRecursosByRecursosId().getTipo().equals("2") || renglonrecursos.getRecursosByRecursosId().getTipo().equals("3")) {
                normasRV += renglonrecursos.getCantidas();
            }
        }
        return normasRV;
    }

    private double getSalarioInRVUnico(Unidadobra unidadobra, Renglonvariante renglonvariante) {
        List<Renglonrecursos> recursos = new ArrayList<>();
        recursos = getRenglonrecursos(renglonvariante.getId());
        salarioMano = 0.0;
        salarioEquipo = 0.0;
        for (Renglonrecursos recurso : recursos) {
            if (recurso.getRecursosByRecursosId().getTipo().equals("2")) {
                salarioMano += recurso.getCantidas() * getValorSalario(unidadobra.getEmpresaconstructoraId(), unidadobra.getObraId(), recurso.getRecursosByRecursosId().getGrupoescala())
                ;
            } else if (recurso.getRecursosByRecursosId().getTipo().equals("3")) {
                salarioEquipo += recurso.getCantidas() * salarioInEquipo(unidadobra.getObraId(), unidadobra.getEmpresaconstructoraId(), recurso.getRecursosId());
            }
        }
        return salarioMano + salarioEquipo;
    }

    public ArrayList<SalarioUORVReportModel> getSalarioUORVinRV(ReportesController reportes, String query,
                                                                int niveles) {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            salarioUORVReportModelArrayList = new ArrayList<>();
            Query query1 = session.createQuery(query);

            if (niveles == 1) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    // String rvZon = row[1].toString().trim();
                    //String rvObj = row[2].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String idUo = row[3].toString().trim();
                    String code = " Especifica " + row[4].toString().trim() + " " + row[5].toString().trim();
                    String descrip = row[5].toString().trim();


                    String rvCode = row[6].toString().trim();
                    String rvDesc = row[7].toString().trim();
                    String rvUm = row[8].toString().trim();
                    String rvCant = row[9].toString().trim();

                    String hh = row[10].toString().trim();
                    String salario = row[11].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, null, null, null, null, null, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            } else if (niveles == 2) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    //String rvObj = row[2].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String idUo = row[6].toString().trim();
                    String code = " Especifica " + row[7].toString().trim() + " " + row[8].toString().trim();
                    String descrip = row[7].toString().trim();


                    String rvCode = row[9].toString().trim();
                    String rvDesc = row[10].toString().trim();
                    String rvUm = row[11].toString().trim();
                    String rvCant = row[12].toString().trim();

                    String hh = row[13].toString().trim();
                    String salario = row[14].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, rvZon, null, null, null, null, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            } else if (niveles == 3) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String idUo = row[9].toString().trim();
                    String code = " Especifica " + row[10].toString().trim() + " " + row[11].toString().trim();
                    String descrip = row[10].toString().trim();


                    String rvCode = row[12].toString().trim();
                    String rvDesc = row[13].toString().trim();
                    String rvUm = row[14].toString().trim();
                    String rvCant = row[15].toString().trim();

                    String hh = row[16].toString().trim();
                    String salario = row[17].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, rvZon, rvObj, null, null, null, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            } else if (niveles == 4) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String idUo = row[12].toString().trim();
                    String code = " Especifica " + row[13].toString().trim() + " " + row[14].toString().trim();
                    String descrip = row[13].toString().trim();


                    String rvCode = row[15].toString().trim();
                    String rvDesc = row[16].toString().trim();
                    String rvUm = row[17].toString().trim();
                    String rvCant = row[18].toString().trim();

                    String hh = row[19].toString().trim();
                    String salario = row[20].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, rvZon, rvObj, rvNiv, null, null, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            }

            if (niveles == 5) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    String rvEsp = row[13].toString().trim() + " " + row[14].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String idUo = row[15].toString().trim();
                    String code = " Especifica " + row[16].toString().trim() + " " + row[17].toString().trim();
                    String descrip = row[16].toString().trim();


                    String rvCode = row[18].toString().trim();
                    String rvDesc = row[19].toString().trim();
                    String rvUm = row[20].toString().trim();
                    String rvCant = row[21].toString().trim();

                    String hh = row[22].toString().trim();
                    String salario = row[23].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, rvZon, rvObj, rvNiv, rvEsp, null, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            }

            if (niveles == 6) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    String rvEsp = row[13].toString().trim() + " " + row[14].toString().trim();
                    String rvSub = row[16].toString().trim() + " " + row[17].toString().trim();
                    String idUo = row[15].toString().trim();
                    String code = " Especifica " + row[17].toString().trim() + " " + row[18].toString().trim();
                    String descrip = row[17].toString().trim();


                    String rvCode = row[19].toString().trim();
                    String rvDesc = row[20].toString().trim();
                    String rvUm = row[21].toString().trim();
                    String rvCant = row[22].toString().trim();

                    String hh = row[23].toString().trim();
                    String salario = row[24].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, rvZon, rvObj, rvNiv, rvEsp, rvSub, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            }

            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return salarioUORVReportModelArrayList;

    }

    public ArrayList<SalarioUORVReportModel> getSalarioRVinRVDEF(ReportesController reportes, String query,
                                                                 int niveles, Obra obra) {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            salarioUORVReportModelArrayList = new ArrayList<>();
            Query query1 = session.createQuery(query);

            if (niveles == 1) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    // String rvZon = row[1].toString().trim();
                    //String rvObj = row[2].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String idUo = row[3].toString().trim();
                    String code = " Especifica " + row[4].toString().trim() + " " + row[5].toString().trim();
                    String descrip = row[5].toString().trim();


                    String rvCode = row[6].toString().trim();
                    String rvDesc = row[7].toString().trim();
                    String rvUm = row[8].toString().trim();
                    String rvCant = row[9].toString().trim();

                    String hh = row[10].toString().trim();
                    String salario = row[11].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, null, null, null, null, null, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            } else if (niveles == 2) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    //String rvObj = row[2].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String idUo = row[6].toString().trim();
                    String code = " Especifica " + row[7].toString().trim() + " " + row[8].toString().trim();
                    String descrip = row[7].toString().trim();


                    String rvCode = row[9].toString().trim();
                    String rvDesc = row[10].toString().trim();
                    String rvUm = row[11].toString().trim();
                    String rvCant = row[12].toString().trim();

                    String hh = row[13].toString().trim();
                    String salario = row[14].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, rvZon, null, null, null, null, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            } else if (niveles == 3) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    //String rvNiv = row[3].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String idUo = row[9].toString().trim();
                    String code = " Especifica " + row[10].toString().trim() + " " + row[11].toString().trim();
                    String descrip = row[10].toString().trim();


                    String rvCode = row[12].toString().trim();
                    String rvDesc = row[13].toString().trim();
                    String rvUm = row[14].toString().trim();
                    String rvCant = row[15].toString().trim();

                    String hh = row[16].toString().trim();
                    String salario = row[17].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, rvZon, rvObj, null, null, null, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            } else if (niveles == 4) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    //String rvEsp = row[4].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String idUo = row[12].toString().trim();
                    String code = " Especifica " + row[13].toString().trim() + " " + row[14].toString().trim();
                    String descrip = row[13].toString().trim();


                    String rvCode = row[15].toString().trim();
                    String rvDesc = row[16].toString().trim();
                    String rvUm = row[17].toString().trim();
                    String rvCant = row[18].toString().trim();

                    String hh = row[19].toString().trim();
                    String salario = row[20].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, rvZon, rvObj, rvNiv, null, null, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            }

            if (niveles == 5) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    String rvEsp = row[13].toString().trim() + " " + row[14].toString().trim();
                    //String rvSub = row[5].toString().trim();
                    String idUo = row[15].toString().trim();
                    String code = " Especifica " + row[16].toString().trim() + " " + row[17].toString().trim();
                    String descrip = row[16].toString().trim();


                    String rvCode = row[18].toString().trim();
                    String rvDesc = row[19].toString().trim();
                    String rvUm = row[20].toString().trim();
                    String rvCant = row[21].toString().trim();

                    String hh = row[22].toString().trim();
                    String salario = row[23].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, rvZon, rvObj, rvNiv, rvEsp, null, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            }

            if (niveles == 6) {

                for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                    Object[] row = (Object[]) it.next();
                    Integer idEmp = Integer.parseInt(row[0].toString().trim());
                    String Empr = row[1].toString().trim() + " " + row[2].toString().trim();
                    String rvZon = row[4].toString().trim() + " " + row[5].toString().trim();
                    String rvObj = row[7].toString().trim() + " " + row[8].toString().trim();
                    String rvNiv = row[10].toString().trim() + " " + row[11].toString().trim();
                    String rvEsp = row[13].toString().trim() + " " + row[14].toString().trim();
                    String rvSub = row[16].toString().trim() + " " + row[17].toString().trim();
                    String idUo = row[15].toString().trim();
                    String code = " Especifica " + row[17].toString().trim() + " " + row[18].toString().trim();
                    String descrip = row[17].toString().trim();


                    String rvCode = row[19].toString().trim();
                    String rvDesc = row[20].toString().trim();
                    String rvUm = row[21].toString().trim();
                    String rvCant = row[22].toString().trim();

                    String hh = row[23].toString().trim();
                    String salario = row[24].toString().trim();

                    salarioUORVReportModel = new SalarioUORVReportModel(Empr, rvZon, rvObj, rvNiv, rvEsp, rvSub, code, descrip, " ", 0.0, rvCode, rvDesc, rvUm, Double.parseDouble(rvCant), Double.parseDouble(hh), Double.parseDouble(salario));
                    salarioUORVReportModelArrayList.add(salarioUORVReportModel);
                }

            }

            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return salarioUORVReportModelArrayList;

    }

    private Double getHHyHECertificadas(int parseInt, int parseInt1) {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            horas = 0.0;
            List<Certificacionrecuo> cantidades = session.createQuery(" FROM Certificacionrecuo WHERE unidadobraId =: unid AND certificacionId =: certI").setParameter("unid", parseInt).setParameter("certI", parseInt1).getResultList();
            horas = cantidades.parallelStream().filter(certificacionrecuo -> certificacionrecuo.getTipo().trim().equals("2") || certificacionrecuo.getTipo().trim().equals("3")).map(Certificacionrecuo::getCantidad).reduce(0.0, Double::sum);

            tx.commit();
            session.close();
            return horas;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return horas;
    }

    /**
     * para la cuantitativa -> Materiales
     */

    public ArrayList<DatosCuantitativaGenreralModel> getRecursosGeneralMateriales(ReportesController
                                                                                          reportes, String query, int niveles, boolean flag, Obra obra, Empresaconstructora empres) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        System.out.println(" ---> " + niveles);
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaGenreralModelArrayList = new ArrayList<>();
            arrayListComponets = new ArrayList<>();
            List<Object[]> materialesCuantitava = session.createSQLQuery(query).getResultList();
            for (Object[] row : materialesCuantitava) {
                if (niveles == 1) {
                    if (row[2] == null) {
                        System.out.println(Integer.parseInt(row[1].toString().trim()));
                    }
                    if (row[2].toString().trim().contentEquals("1")) {
                        Recursos rec = util.getSuministro(Integer.parseInt(row[1].toString().trim()));

                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[2].toString().trim().contentEquals("2")) {
                        Recursos rec = util.getSuministro(Integer.parseInt(row[1].toString().trim()));
                        double recVal = 0.0;
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Mano de Obra", 1, 1, 1, 1, cant, recVal, 0.0, total));
                        }
                    } else if (row[2].toString().trim().contentEquals("3")) {
                        Recursos rec = util.getSuministro(Integer.parseInt(row[1].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Equipos", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[2].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[1].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    double recVal = 0.0;
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                    double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                    double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                                }
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[1].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[2].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[1].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                    double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                                }
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[1].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 2) {
                    if (row[4].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[3].toString().trim()));
                        System.out.println(rec.getCodigo() + " **** " + rec.getPertenece());
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[4].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    //   recursos = getRecursosByCode(items.getCode().trim());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));

                                }
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[3].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[4].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    //  recursos = getRecursosByCode(items.getCode().trim());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));

                                }
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[3].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 3) {
                    if (row[6].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[5].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[6].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    //   recursos = getRecursosByCode(items.getCode().trim());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                                }
                            }
                        } else {
                            suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[5].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[6].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, items.getPreciomlc(), costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));

                                }
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, Double.parseDouble(row[4].toString().trim()) * juegoproducto.getPreciomn()));
                            }
                        }
                    }
                } else if (niveles == 4) {
                    if (row[8].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[7].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[8].toString().trim().equals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[7].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                                }
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[7].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[8].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[7].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, items.getPreciomlc(), costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));

                                }
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[7].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 5) {
                    if (row[10].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[9].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[10].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[9].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                                }
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[9].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[10].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[9].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                                }
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[9].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 6) {
                    if (row[12].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[11].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[12].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[11].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));

                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                                }
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[11].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[12].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[11].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, items.getPreciomlc(), costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                                }
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[11].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 15) {
                    if (row[4].toString().trim().equals("1")) {
                        Recursos rec = util.getSuministro(Integer.parseInt(row[3].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[4].toString().trim().equals("2")) {
                        double recVal = 0.0;
                        Recursos rec = util.getSuministro(Integer.parseInt(row[3].toString().trim()));
                        if (empres.getId() == 0) {
                            recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), rec.getGrupoescala()) * coeficienteMano)).doubleValue();
                        } else {
                            recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), rec.getGrupoescala()))).doubleValue();
                        }
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Mano de Obra", 1, 1, 1, 1, cant, recVal, 0.0, total));
                        }
                    } else if (row[4].toString().trim().equals("3")) {
                        Recursos rec = util.getSuministro(Integer.parseInt(row[3].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Equipos", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[4].toString().trim().equals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                                }
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[3].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[4].toString().trim().equals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    // recursos = getRecursosByCode(items.getCode().trim());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                                }
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[3].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 125) {
                    if (row[6].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[5].toString().trim()));
                        if (rec == null) {
                            System.out.println("Suministro null: " + Integer.parseInt(row[5].toString().trim()));
                        }
                        double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                        double total = cant * rec.getPreciomn();
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                    } else if (row[6].toString().trim().equals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, 0.0, costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                                }
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[6].toString().trim().equals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, items.getPreciomlc(), costS));

                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));

                                }
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 1235) {
                    if (row[8].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[7].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[8].toString().trim().equals("S")) {
                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[7].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));

                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[7].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[8].toString().trim().equals("J")) {
                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[7].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));

                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[7].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 156) {
                    if (row[6].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[5].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), rec.getPreciomlc(), total));
                        }
                    } else if (row[6].toString().trim().equals("S")) {
                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, items.getPreciomlc(), costS));

                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                                }
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[6].toString().trim().equals("J")) {
                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                if (items.getTipo().trim().equals("Mano de Obra")) {
                                    recursos = getRecursosByCode(items.getCode().trim(), obra.getSalarioBySalarioId().getTag());
                                    double recVal = 0.0;
                                    if (empres.getId() == 0) {
                                        recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), items.getGrupo()) * coeficienteMano)).doubleValue();
                                    } else {
                                        recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), items.getGrupo()))).doubleValue();
                                    }
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * recVal;
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, recVal, items.getPreciomlc(), costS));
                                } else {
                                    double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                    Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                    Double costS = cant * items.getPrecio();
                                    cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                                }
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                }
            }
            tx.commit();
            session.close();
            return cuantitativaGenreralModelArrayList;
        } catch (
                HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();
    }

    public ArrayList<DatosCuantitativaGenreralModelCertificacion> getRecursosGeneralMaterialesCertificaion
            (ReportesController
                     reportes, String query, int niveles, boolean flag) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaGenreralModelCertificacionArrayList = new ArrayList<>();
            arrayListComponets = new ArrayList<>();
            List<Object[]> materialesCuantitava = session.createSQLQuery(query).getResultList();

            for (Object[] row : materialesCuantitava) {
                if (niveles == 1) {
                    if (row[2] == null) {
                        System.out.println(Integer.parseInt(row[1].toString().trim()));
                    }
                    if (row[2].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[1].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[2].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[1].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[1].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[2].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[1].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[1].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", "*", "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 2) {
                    if (row[4].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[3].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[4].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[3].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[4].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[3].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 3) {
                    if (row[6].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[5].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[6].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[5].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[6].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, Double.parseDouble(row[4].toString().trim()) * juegoproducto.getPreciomn()));
                            }
                        }
                    }
                } else if (niveles == 4) {
                    if (row[8].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[7].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[8].toString().trim().equals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[7].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[7].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[8].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[7].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[7].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 5) {
                    if (row[10].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[9].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[10].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[9].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[9].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[10].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[9].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[9].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 6) {
                    if (row[12].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[11].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[12].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[11].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[11].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[12].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[11].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));

                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[11].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 15) {
                    if (row[4].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[3].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[4].toString().trim().equals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }

                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[3].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[4].toString().trim().equals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }

                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[3].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 125) {
                    if (row[6].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[5].toString().trim()));
                        if (rec == null) {
                            System.out.println("Suministro null: " + Integer.parseInt(row[5].toString().trim()));
                        }
                        double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                        double total = cant * rec.getPreciomn();
                        cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                    } else if (row[6].toString().trim().equals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[6].toString().trim().equals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));

                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 1235) {
                    if (row[8].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[7].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[8].toString().trim().equals("S")) {
                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[7].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));

                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[7].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[8].toString().trim().equals("J")) {
                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[7].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));

                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[7].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 156) {
                    if (row[6].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[5].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), rec.getPreciomlc(), total));
                        }
                    } else if (row[6].toString().trim().equals("S")) {
                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[6].toString().trim().equals("J")) {
                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 7) {
                    if (row[7].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[6].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), rec.getPreciomlc(), total));
                        }
                    } else if (row[7].toString().trim().equals("S")) {
                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[6].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[6].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[7].toString().trim().equals("J")) {
                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[6].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[6].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));

                            }
                        }
                    }
                    cuantitativaGenreralModelCertificacionArrayList.sort(Comparator.comparing(DatosCuantitativaGenreralModelCertificacion::getEmpresa).thenComparing(DatosCuantitativaGenreralModelCertificacion::getBrigada).thenComparing(DatosCuantitativaGenreralModelCertificacion::getTipo));

                } else if (niveles == 8) {
                    if (row[9].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[8].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), rec.getPreciomlc(), total));
                        }
                    } else if (row[9].toString().trim().equals("S")) {
                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[8].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[8].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[9].toString().trim().equals("J")) {
                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[8].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[8].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[5].toString().trim(), "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                    cuantitativaGenreralModelCertificacionArrayList.sort(Comparator.comparing(DatosCuantitativaGenreralModelCertificacion::getEmpresa).thenComparing(DatosCuantitativaGenreralModelCertificacion::getBrigada).thenComparing(DatosCuantitativaGenreralModelCertificacion::getGrupo).thenComparing(DatosCuantitativaGenreralModelCertificacion::getTipo));

                } else if (niveles == 9) {
                    if (row[11].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[10].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), row[7].toString().trim() + " " + row[8].toString().trim(), rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), rec.getPreciomlc(), total));
                        }
                    } else if (row[11].toString().trim().equals("S")) {
                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[10].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), row[7].toString().trim() + " " + row[8].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[10].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), row[7].toString().trim() + " " + row[8].toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[11].toString().trim().equals("J")) {
                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[10].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[6].toString().trim(), row[7].toString().trim() + " " + row[8].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[10].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelCertificacionArrayList.add(new DatosCuantitativaGenreralModelCertificacion(0, "*", "* ", "*", "*", "*", row[3].toString().trim() + " " + row[4].toString().trim(), row[5].toString().trim() + " " + row[5].toString().trim(), row[7].toString().trim() + " " + row[8].toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                    cuantitativaGenreralModelCertificacionArrayList.sort(Comparator.comparing(DatosCuantitativaGenreralModelCertificacion::getEmpresa).thenComparing(DatosCuantitativaGenreralModelCertificacion::getBrigada).thenComparing(DatosCuantitativaGenreralModelCertificacion::getGrupo).thenComparing(DatosCuantitativaGenreralModelCertificacion::getCuadrilla).thenComparing(DatosCuantitativaGenreralModelCertificacion::getTipo));
                }
            }
            tx.commit();
            session.close();
            return cuantitativaGenreralModelCertificacionArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    /**
     * Para el calculo de los pendientes
     */
    public ArrayList<DatosCuantitativaGenreralModel> getRecursosGeneralMaterialesPendientes(ReportesController
                                                                                                    reportes, String query, int niveles, boolean flag) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaGenreralModelArrayList = new ArrayList<>();
            arrayListComponets = new ArrayList<>();
            List<Object[]> materialesCuantitava = session.createSQLQuery(query).getResultList();

            for (Object[] row : materialesCuantitava) {
                if (niveles == 1) {
                    if (row[2] == null) {
                        System.out.println(Integer.parseInt(row[1].toString().trim()));
                    }
                    if (row[2].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[1].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[3].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[2].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[1].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[3].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();

                                double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[1].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[3].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[2].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[1].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[3].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[1].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[3].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[0].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 2) {
                    if (row[4].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[3].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[4].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[3].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[4].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[3].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 3) {
                    if (row[6].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[5].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[6].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[5].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[6].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, Double.parseDouble(row[4].toString().trim()) * juegoproducto.getPreciomn()));
                            }
                        }
                    }
                } else if (niveles == 4) {
                    if (row[8].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[7].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[8].toString().trim().equals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[7].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[7].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[8].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[7].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[7].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 5) {
                    if (row[10].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[9].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[11].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[10].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[9].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[11].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[9].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[11].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[10].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[9].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[11].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[9].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[11].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 6) {
                    if (row[12].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[11].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[13].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[12].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[11].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[13].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[11].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[13].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[12].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[11].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[13].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[11].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[13].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 15) {
                    if (row[4].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[3].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[4].toString().trim().equals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }

                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[3].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[4].toString().trim().equals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[3].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }

                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[3].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[5].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[2].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 125) {
                    if (row[6].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[5].toString().trim()));
                        if (rec == null) {
                            System.out.println("Suministro null: " + Integer.parseInt(row[5].toString().trim()));
                        }
                        double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                        double total = cant * rec.getPreciomn();
                        cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                    } else if (row[6].toString().trim().equals("S")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMat(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[6].toString().trim().equals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(Integer.parseInt(row[5].toString().trim()));
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));

                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 1235) {
                    if (row[8].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[7].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), 0.0, total));
                        }
                    } else if (row[8].toString().trim().equals("S")) {
                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[7].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));

                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[7].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[8].toString().trim().equals("J")) {
                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[7].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));

                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[7].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[9].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[3].toString().trim() + " " + row[4].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                } else if (niveles == 156) {
                    if (row[6].toString().trim().equals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[5].toString().trim()));
                        if (rec != null) {
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                            double total = cant * rec.getPreciomn();
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, cant, rec.getPreciomn(), rec.getPreciomlc(), total));
                        }
                    } else if (row[6].toString().trim().equals("S")) {
                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[5].toString().trim()));
                            if (suministrossemielaborados != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * suministrossemielaborados.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, cant, suministrossemielaborados.getPreciomn(), 0.0, total));
                            }
                        }
                    } else if (row[6].toString().trim().equals("J")) {
                        if (flag == true) {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            for (RecComponetsModel items : arrayListComponets) {
                                double cantAll = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                Double cant = items.getCantiADouble() * new BigDecimal(String.format("%.4f", cantAll)).doubleValue();
                                Double costS = cant * items.getPrecio();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                            }
                        } else {
                            juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[5].toString().trim()));
                            if (juegoproducto != null) {
                                double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[7].toString().trim()))).doubleValue() - new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                                double total = cant * juegoproducto.getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "* ", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, cant, juegoproducto.getPreciomn(), 0.0, total));
                            }
                        }
                    }
                }
            }
            tx.commit();
            session.close();
            return cuantitativaGenreralModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    private Unidadobra getUnidadObra(int iduni) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Unidadobra unidadobra = null;
        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            unidadobra = session.get(Unidadobra.class, iduni);

            tx.commit();
            session.close();
            return unidadobra;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }

        return unidadobra;
    }

    private double getvalMano(int idSalario, String grupo) {
        if (tarifaSalarialRepository.tarifaSalarialObservableList == null) {
            tarifaSalarialRepository.getAllTarifasSalarial();
        }
        TarifaSalarial tarifaSalarial = tarifaSalarialRepository.tarifaSalarialObservableList.parallelStream().filter(item -> item.getId() == idSalario).findFirst().get();
        double valorEscala = tarifaSalarial.getGruposEscalasCollection().parallelStream().filter(item -> item.getGrupo().trim().equals(grupo.trim())).findFirst().map(GruposEscalas::getValor).get();
        return valorEscala;

    }

    public ArrayList<DatosCuantitativaGenreralModel> getRecursosGeneral(ReportesController reportes, String query,
                                                                        int niveles, Empresaconstructora empres, Obra obra, String queryRecIn) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaGenreralModelArrayList = new ArrayList<>();
            double recVal = 0.0;
            if (!query.isEmpty()) {
                List<Object[]> cuantitativaList = session.createQuery(query).getResultList();
                coeficienteMano = 1;
                coeficienteEquipo = 1;
                for (Object[] row : cuantitativaList) {
                    if (niveles == 1) {
                        if (row[3].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[15].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), "Mano de Obra", Double.parseDouble(row[6].toString().trim()), Double.parseDouble(row[7].toString().trim()), Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), cant, recVal, Double.parseDouble(row[10].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[3].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[15].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[4].toString().trim()))).doubleValue();
                            recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), "Equipos", Double.parseDouble(row[6].toString().trim()), Double.parseDouble(row[7].toString().trim()), Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), cant, recVal, Double.parseDouble(row[10].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }

                    } else if (niveles == 2) {
                        if (row[5].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Mano de Obra", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, Double.parseDouble(row[12].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[5].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), "*", "*", "*", "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Equipos", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, Double.parseDouble(row[12].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }

                    } else if (niveles == 3) {
                        if (row[7].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[7].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 4) {
                        if (row[9].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Mano de Obra", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, Double.parseDouble(row[16].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[9].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Equipos", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, Double.parseDouble(row[16].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 5) {
                        if (row[11].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[23].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[12].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", row[8].toString().trim(), row[9].toString().trim(), row[10].toString().trim(), "Mano de Obra", Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[11].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[23].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[12].toString().trim()))).doubleValue();
                            recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), "*", row[8].toString().trim(), row[9].toString().trim(), row[10].toString().trim(), "Equipos", Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 6) {
                        if (row[13].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[25].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[14].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), row[10].toString().trim(), row[11].toString().trim(), row[12].toString().trim(), "Mano de Obra", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), Double.parseDouble(row[18].toString().trim()), Double.parseDouble(row[19].toString().trim()), cant, recVal, Double.parseDouble(row[20].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[13].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[25].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[14].toString().trim()))).doubleValue();
                            recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), row[6].toString().trim() + " " + row[7].toString().trim(), row[8].toString().trim() + " " + row[9].toString().trim(), row[10].toString().trim(), row[11].toString().trim(), row[12].toString().trim(), "Equipos", Double.parseDouble(row[16].toString().trim()), Double.parseDouble(row[17].toString().trim()), Double.parseDouble(row[18].toString().trim()), Double.parseDouble(row[19].toString().trim()), cant, recVal, Double.parseDouble(row[20].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 15) {//terminar hoy
                        if (row[5].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Mano de Obra", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, 0.0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[5].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[6].toString().trim()))).doubleValue();
                            recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[2].toString().trim(), row[3].toString().trim(), row[4].toString().trim(), "Equipos", Double.parseDouble(row[8].toString().trim()), Double.parseDouble(row[9].toString().trim()), Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), cant, recVal, 0.0, new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 125) {//terminar hoy
                        if (row[7].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[7].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 1235) {//terminar hoy
                        if (row[9].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Mano de Obra", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, Double.parseDouble(row[16].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[9].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[21].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[10].toString().trim()))).doubleValue();
                            recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim() + " " + row[5].toString().trim(), "*", row[0].toString().trim() + " " + row[1].toString().trim(), "*", row[6].toString().trim(), row[7].toString().trim(), row[8].toString().trim(), "Equipos", Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), Double.parseDouble(row[14].toString().trim()), Double.parseDouble(row[15].toString().trim()), cant, recVal, Double.parseDouble(row[16].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    } else if (niveles == 156) {//terminar hoy
                        if (row[7].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            if (empres.getId() == 0) {
                                recVal = new BigDecimal(String.format("%.2f", getvalMano(obra.getTarifaId(), recursos.getGrupoescala()) * coeficienteMano)).doubleValue();
                            } else {
                                recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(empres.getId(), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                            }
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Mano de Obra", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        } else if (row[7].toString().trim().contentEquals("3")) {
                            recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                            double cant = new BigDecimal(String.format("%.4f", Double.parseDouble(row[8].toString().trim()))).doubleValue();
                            recVal = recursos.getPreciomn();
                            double total = cant * recVal;
                            cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", row[0].toString().trim() + " " + row[1].toString().trim(), row[2].toString().trim() + " " + row[3].toString().trim(), row[4].toString().trim(), row[5].toString().trim(), row[6].toString().trim(), "Equipos", Double.parseDouble(row[10].toString().trim()), Double.parseDouble(row[11].toString().trim()), Double.parseDouble(row[12].toString().trim()), Double.parseDouble(row[13].toString().trim()), cant, recVal, Double.parseDouble(row[14].toString().trim()), new BigDecimal(String.format("%.2f", total)).doubleValue()));
                        }
                    }
                }
            }

            //Recursos in RV
            if (!queryRecIn.isEmpty()) {
                List<Tuple> cuantitativaListRecInRV = session.createQuery(queryRecIn, Tuple.class).getResultList();
                if (niveles == 1) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(1).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(0).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 2) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(3).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", "*", "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", "*", "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", "*", "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 3) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(5).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 4) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(7).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), "*", "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), "*", "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), "*", "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 5) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(9).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(8).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 6) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(11).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), t.get(8).toString().trim() + " " + t.get(9).toString().trim(), renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), t.get(8).toString().trim() + " " + t.get(9).toString().trim(), renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(4).toString().trim() + " " + t.get(5).toString().trim(), t.get(6).toString().trim() + " " + t.get(7).toString().trim(), t.get(8).toString().trim() + " " + t.get(9).toString().trim(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(10).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 15) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(3).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(00, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(2).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 125) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(5).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 1235) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(7).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(3).toString().trim() + " " + t.get(4).toString().trim(), "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(3).toString().trim() + " " + t.get(4).toString().trim(), "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, t.get(2).toString().trim() + " " + t.get(3).toString().trim(), t.get(3).toString().trim() + " " + t.get(4).toString().trim(), "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), "*", renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(6).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));

                            }
                        }
                    }
                } else if (niveles == 156) {
                    for (Tuple t : cuantitativaListRecInRV) {
                        Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(t.get(5).toString().trim())).findFirst().get();
                        if (renglonvariante.getRenglonjuegosById().size() > 0) {
                            for (Renglonjuego renglonjuego : renglonvariante.getRenglonjuegosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), renglonjuego.getJuegoproductoByJuegoproductoId().getCodigo(), renglonjuego.getJuegoproductoByJuegoproductoId().getDescripcion(), renglonjuego.getJuegoproductoByJuegoproductoId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getJuegoproductoByJuegoproductoId().getPreciomn(), 0.0, total));
                            }
                        }
                        if (renglonvariante.getRenglonrecursosById().size() > 0) {
                            for (Renglonrecursos renglonjuego : renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().equals("1")).collect(Collectors.toList())) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas() * renglonjuego.getRecursosByRecursosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), renglonjuego.getRecursosByRecursosId().getCodigo(), renglonjuego.getRecursosByRecursosId().getDescripcion(), renglonjuego.getRecursosByRecursosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidas(), renglonjuego.getRecursosByRecursosId().getPreciomn(), 0.0, total));

                            }
                        }
                        if (renglonvariante.getRenglonsemielaboradosById().size() > 0) {
                            for (Renglonsemielaborados renglonjuego : renglonvariante.getRenglonsemielaboradosById()) {
                                double total = Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad() * renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn();
                                cuantitativaGenreralModelArrayList.add(new DatosCuantitativaGenreralModel(0, "*", "*", "*", t.get(0).toString().trim() + " " + t.get(1).toString().trim(), t.get(2).toString().trim() + " " + t.get(3).toString().trim(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getCodigo(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getDescripcion(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(t.get(4).toString().trim()) * renglonjuego.getCantidad(), renglonjuego.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn(), 0.0, total));
                            }
                        }
                    }
                }
            }


            cuantitativaGenreralModelArrayList.sort(Comparator.comparing(DatosCuantitativaGenreralModel::getTipo));
            tx.commit();
            session.close();
            return cuantitativaGenreralModelArrayList;
        } catch (
                Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();

        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    public ArrayList<RenglonVarianteReportModelExtend> getRenglonesVariantesListPresRV(ReportesController
                                                                                               reportes, String query, String queryMat, Obra obraS) {
        reportesController = reportes;
        ArrayList<RenglonVarianteReportModelExtend> temp = new ArrayList<>();
        List<Object[]> dataList = util.getRowsQueryResults(query);
        for (Object[] row : dataList) {
            List<Empresaobratarifa> list = util.getEmpresaobratarifaList(obraS.getId(), Integer.parseInt(row[0].toString().trim()), obraS.getTarifaSalarialByTarifa().getId());
            // coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obraS.getId() && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
            coeficienteMano = 1.0;
            coeficienteEquipo = 1.0;
            Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[15].toString().trim())).findFirst().get();
            if (row[23].toString().trim().equals("1")) {
                uoconcat = new StringBuilder().append("Especifica:  ").append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                //System.out.println(uoconcat + " *** ");
                double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                double costMateriaR = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("1")).map(item -> item.getCantidas() * item.getRecursosByRecursosId().getPreciomn() / item.getUsos()).reduce(0.0, Double::sum);
                double costMateriaJ = renglonvariante.getRenglonjuegosById().parallelStream().map(item -> item.getCantidad() * item.getJuegoproductoByJuegoproductoId().getPreciomn() / item.getUsos()).reduce(0.0, Double::sum);
                double costMateriaS = renglonvariante.getRenglonsemielaboradosById().parallelStream().map(item -> item.getCantidad() * item.getSuministrossemielaboradosBySuministrossemielaboradosId().getPreciomn() / item.getUsos()).reduce(0.0, Double::sum);
                double CMaterial = costMateriaR + costMateriaS + costMateriaJ;
                double valMano = Double.parseDouble(row[19].toString().trim()) * costoMano * coeficienteMano;
                double valCostoEqip = Double.parseDouble(row[19].toString().trim()) * costoEq * coeficienteEquipo;
                double valCostMaterial = Double.parseDouble(row[19].toString().trim()) * CMaterial;
                double totalRV = valCostMaterial + valMano + valCostoEqip;
                temp.add(new RenglonVarianteReportModelExtend(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[27].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[28].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[29].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[30].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[31].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), "", 0.0, 0.0, Integer.parseInt(row[15].toString().trim()), row[16].toString().trim(), row[17].toString().trim(), row[18].toString().trim(), Double.parseDouble(row[19].toString().trim()), CMaterial, coeficienteMano * costoMano, costoEq * coeficienteEquipo, valCostMaterial, valMano, valCostoEqip, totalRV, renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getSobregrupoBySobregrupoId().getCodigo() + " " + renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getSobregrupoBySobregrupoId().getDescipcion(), renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getCodigog() + " " + renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getDescripciong(), renglonvariante.getSubgrupoBySubgrupoId().getCodigosub() + " " + renglonvariante.getSubgrupoBySubgrupoId().getDescripcionsub(), row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), row[30].toString().trim(), row[31].toString().trim()));
            } else if (row[23].toString().trim().equals("0")) {
                // if (row[23].toString().trim().equals("0")) {
                uoconcat = new StringBuilder().append("Especifica:  ").append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                //Renglonvariante renglonvariante = util.renglonvarianteList.parallelStream().filter(item -> item.getId() == Integer.parseInt(row[15].toString().trim())).findFirst().get();
                double costoMano = util.calcCostoManoRVinEmpresaObra(renglonvariante);
                double costoEq = renglonvariante.getRenglonrecursosById().parallelStream().filter(renglonrecursos -> renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")).map(renglonrecursos -> renglonrecursos.getCantidas() * renglonrecursos.getRecursosByRecursosId().getPreciomn() / renglonrecursos.getUsos()).reduce(0.0, Double::sum);
                double valMano = Double.parseDouble(row[19].toString().trim()) * costoMano * coeficienteMano;
                // System.out.println( Double.parseDouble(row[19].toString().trim()) + " ---- ");
                double valCostoEqip = Double.parseDouble(row[19].toString().trim()) * costoEq * coeficienteEquipo;
                //System.out.println(costoMano + " $$$$ ");
                double totalRV = 0.0 + valMano + valCostoEqip;
                // System.out.println(totalRV + " ---- ");
                temp.add(new RenglonVarianteReportModelExtend(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[27].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[28].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[29].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[30].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[31].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), "", 0.0, 0.0, Integer.parseInt(row[15].toString().trim()), row[16].toString().trim(), row[17].toString().trim(), row[18].toString().trim(), Double.parseDouble(row[19].toString().trim()), 0.0, costoMano * coeficienteMano, costoEq * coeficienteEquipo, Double.parseDouble(row[20].toString().trim()), valMano * coeficienteMano, valCostoEqip, totalRV, renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getSobregrupoBySobregrupoId().getCodigo() + " " + renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getSobregrupoBySobregrupoId().getDescipcion(), renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getCodigog() + " " + renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getDescripciong(), renglonvariante.getSubgrupoBySubgrupoId().getCodigosub() + " " + renglonvariante.getSubgrupoBySubgrupoId().getDescripcionsub(), row[27].toString().trim(), row[28].toString().trim(), row[29].toString().trim(), row[30].toString().trim(), row[31].toString().trim()));

            }
        }
        List<Object[]> listOfData = util.getRowsQueryResults(queryMat);
        for (Object[] row : listOfData) {
            uoconcat = new StringBuilder().append("Especifica:  ").append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
            Renglonvariante renglonvariante = getRenglonvariante(Integer.parseInt(row[19].toString().trim()));
            if (row[18].toString().trim().equals("1")) {
                recursos = getRecursosa(Integer.parseInt(row[17].toString().trim()));
                temp.add(new RenglonVarianteReportModelExtend(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[24].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[25].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[26].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[27].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[28].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), "", 0.0, 0.0, Integer.parseInt(row[19].toString().trim()), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), Double.parseDouble(row[15].toString().trim()), recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[15].toString().trim()) * recursos.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[15].toString().trim()) * recursos.getPreciomn(), renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getSobregrupoBySobregrupoId().getCodigo() + " " + renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getSobregrupoBySobregrupoId().getDescipcion(), renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getCodigog() + " " + renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getDescripciong(), renglonvariante.getSubgrupoBySubgrupoId().getCodigosub() + " " + renglonvariante.getSubgrupoBySubgrupoId().getDescripcionsub(), row[24].toString().trim(), row[25].toString().trim(), row[26].toString().trim(), row[27].toString().trim(), row[28].toString().trim()));
            } else if (row[18].toString().trim().equals("J")) {
                juegoproducto = getJuegoproducto(Integer.parseInt(row[17].toString().trim()));
                temp.add(new RenglonVarianteReportModelExtend(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[24].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[25].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[26].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[27].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[28].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), "", 0.0, 0.0, Integer.parseInt(row[19].toString().trim()), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), Double.parseDouble(row[15].toString().trim()), juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[15].toString().trim()) * juegoproducto.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[15].toString().trim()) * juegoproducto.getPreciomn(), renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getSobregrupoBySobregrupoId().getCodigo() + " " + renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getSobregrupoBySobregrupoId().getDescipcion(), renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getCodigog() + " " + renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getDescripciong(), renglonvariante.getSubgrupoBySubgrupoId().getCodigosub() + " " + renglonvariante.getSubgrupoBySubgrupoId().getDescripcionsub(), row[24].toString().trim(), row[25].toString().trim(), row[26].toString().trim(), row[27].toString().trim(), row[28].toString().trim()));
            } else if (row[18].toString().trim().equals("S")) {
                suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[17].toString().trim()));
                temp.add(new RenglonVarianteReportModelExtend(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim(), Integer.parseInt(row[2].toString().trim()), row[24].toString().trim() + " " + row[3].toString().trim(), Integer.parseInt(row[4].toString().trim()), row[25].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[26].toString().trim() + " " + row[7].toString().trim(), Integer.parseInt(row[8].toString().trim()), row[27].toString().trim() + " " + row[9].toString().trim(), Integer.parseInt(row[10].toString().trim()), row[28].toString().trim() + " " + row[11].toString().trim(), Integer.parseInt(row[12].toString().trim()), uoconcat.toString().trim(), row[14].toString().trim(), "", 0.0, 0.0, Integer.parseInt(row[19].toString().trim()), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), Double.parseDouble(row[15].toString().trim()), suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[15].toString().trim()) * suministrossemielaborados.getPreciomn(), 0.0, 0.0, Double.parseDouble(row[15].toString().trim()) * suministrossemielaborados.getPreciomn(), renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getSobregrupoBySobregrupoId().getCodigo() + " " + renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getSobregrupoBySobregrupoId().getDescipcion(), renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getCodigog() + " " + renglonvariante.getSubgrupoBySubgrupoId().getGrupoByGrupoId().getDescripciong(), renglonvariante.getSubgrupoBySubgrupoId().getCodigosub() + " " + renglonvariante.getSubgrupoBySubgrupoId().getDescripcionsub(), row[24].toString().trim(), row[25].toString().trim(), row[26].toString().trim(), row[27].toString().trim(), row[28].toString().trim()));
            }
        }


        System.out.println(temp.size());
        return temp;
    }

    public ArrayList<DatosCuantitativaUOGRUPModel> getRecursosUOGRUPModel(ReportesController
                                                                                  reportes, String
                                                                                  query, String qmqte, int niveles, boolean flag, Obra obra) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            datosCuantitativaUOGRUPModelArrayList = new ArrayList<>();
            if (!query.trim().equals("empty")) {
                Query query1 = session.createQuery(query);
                List<Object[]> datosCuantitativa = query1.getResultList();
                for (Object[] row : datosCuantitativa) {
                    if (row[21] != null) {
                        coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obra.getId() && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                        coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obra.getId() && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                        empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                        zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                        objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                        nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                        especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                        subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                        uocode = new StringBuilder().append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(" ").append(row[21].toString().trim());
                        if (row[26].toString().trim().contentEquals("3")) {
                            matTipo = "Equipos";
                            double costo = Double.parseDouble(row[27].toString().trim()) * Double.parseDouble(row[28].toString().trim()) * coeficienteEquipo;
                            if (row[34] == null) {
                                datosCuantitativaUOGRUPModelArrayList.add(new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), matTipo, Double.parseDouble(row[29].toString().trim()), Double.parseDouble(row[30].toString().trim()), Double.parseDouble(row[31].toString().trim()), Double.parseDouble(row[32].toString().trim()), Double.parseDouble(row[27].toString().trim()), Double.parseDouble(row[28].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[33].toString().trim()), costo));
                            } else {
                                datosCuantitativaUOGRUPModelArrayList.add(new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), matTipo, Double.parseDouble(row[34].toString().trim()), Double.parseDouble(row[35].toString().trim()), Double.parseDouble(row[36].toString().trim()), Double.parseDouble(row[37].toString().trim()), Double.parseDouble(row[27].toString().trim()), Double.parseDouble(row[28].toString().trim()) * coeficienteEquipo, Double.parseDouble(row[33].toString().trim()), costo));
                            }
                        } else if (row[26].toString().trim().contentEquals("2")) {
                            recursos = getRecursosa(Integer.parseInt(row[38].toString().trim()));
                            double costo = Double.parseDouble(row[27].toString().trim()) * getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()) * coeficienteMano;
                            matTipo = "Mano de Obra";
                            datosCuantitativaUOGRUPModelArrayList.add(new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), matTipo, Double.parseDouble(row[29].toString().trim()), Double.parseDouble(row[30].toString().trim()), Double.parseDouble(row[31].toString().trim()), Double.parseDouble(row[32].toString().trim()), Double.parseDouble(row[27].toString().trim()), getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()) * coeficienteMano, Double.parseDouble(row[33].toString().trim()), costo));
                        }
                    }
                }
            }
            if (!qmqte.trim().equals("empty")) {
                System.out.println("Datos Materiales!...");
                javax.persistence.Query query2 = session.createSQLQuery(qmqte);
                List<Object[]> materialesCuantitativa = query2.getResultList();
                for (Object[] row : materialesCuantitativa) {
                    if (row[21] != null) {
                        empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                        zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                        objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                        nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                        especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                        subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                        uocode = new StringBuilder().append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(" ").append(row[21].toString().trim());
                        if (row[26].toString().trim().contentEquals("1")) {
                            Recursos rec = session.get(Recursos.class, Integer.parseInt(row[25].toString().trim()));
                            Double costo = Double.parseDouble(row[23].toString().trim()) * rec.getPreciomn();
                            datosCuantitativaUOGRUPModelArrayList.add(new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[23].toString().trim()), rec.getPreciomn(), 0.0, costo));
                        } else if (row[26].toString().trim().contentEquals("S")) {
                            if (flag == true) {
                                Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[25].toString().trim()));
                                arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                                arrayListComponets.forEach(items -> {
                                    Double cant = items.getCantiADouble() * Double.parseDouble(row[23].toString().trim());
                                    Double costS = cant * items.getPrecio();
                                    datosCuantitativaUOGRUPModelArrayList.add(new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), 0.0, costS));

                                });
                            } else {
                                Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[25].toString().trim()));
                                Double costo = Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn();
                                datosCuantitativaUOGRUPModelArrayList.add(new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[23].toString().trim()), suministrossemielaborados.getPreciomn(), 0.0, costo));
                            }

                        } else if (row[26].toString().trim().contentEquals("J")) {
                            if (flag == true) {
                                arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                                arrayListComponets.forEach(items -> {
                                    Double cant = items.getCantiADouble() * Double.parseDouble(row[23].toString().trim());
                                    Double costS = cant * items.getPrecio();
                                    datosCuantitativaUOGRUPModelArrayList.add(new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS));
                                });
                            } else {
                                Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[25].toString().trim()));
                                Double costo = Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn();
                                datosCuantitativaUOGRUPModelArrayList.add(new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[23].toString().trim()), juegoproducto.getPreciomn(), 0.0, costo));

                            }
                        }
                    }
                }
            }
            tx.commit();
            session.close();
            return datosCuantitativaUOGRUPModelArrayList;
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();
            /*
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error: " + CalForReport.class.getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();
*/
        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    private Double getSalarioCertificado(int parseInt, int parseInt1) {

        Session session = ConnectionModel.createAppConnection().openSession();
        double salCertificado = 0.0;
        Transaction tx = null;
        try {

            tx = session.beginTransaction();
            /*
            List<UORVRecNorma> datosNormas = getUnidadObraValues(parseInt);
            Unidadobra uo = getUnidadObra(parseInt);

            for (UORVRecNorma datosNorma : datosNormas) {
                recursos = getRecursosa(datosNorma.getIdRec());


            }
*/

            tx.commit();
            session.close();
            return salCertificado;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return salCertificado;

    }

    private Double getSalarioPlanificado(int parseInt, int parseInt1) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            Query query1 = session.createQuery("SELECT SUM(cuo.salario) FROM Planrecuo cuo  WHERE cuo.unidadobraId =: unid AND cuo.planId =: certI");
            query1.setParameter("unid", parseInt);
            query1.setParameter("certI", parseInt1);
            salariomn = 0.0;
            if (query1.getResultList().isEmpty()) {
                salariomn = 0.0;
            } else {
                salariomn = (Double) query1.getResultList().get(0);
            }
            /*
            for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                Object[] row = (Object[]) it.next();
                if(row[0]!=null){
                    salariomn = Double.parseDouble(row[0].toString().trim());
                }else {
                    salariomn = 0.0;
                }

            }
*/
            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return salariomn;

    }

    private Double getSalariocucCertificado(int parseInt, int parseInt1) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            Query query1 = session.createQuery("SELECT SUM(cuo.salariocuc) FROM Certificacionrecuo cuo WHERE cuo.unidadobraId =: unid AND cuo.certificacionId =: certI");
            query1.setParameter("unid", parseInt);
            query1.setParameter("certI", parseInt1);
            salariocuc = 0.0;
            if (query1.getResultList().isEmpty()) {
                salariocuc = 0.0;
            } else {
                salariocuc = (Double) query1.getResultList().get(0);
            }
            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return salariocuc;
    }



    /*
    private Double getHHyHECertificadasConvenios(int parseInt, String f1, String f2, int idCer) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            horas = 0.0;
            //String rest = " AND fini >= '" + f1 + "' AND ffin <= '" + f2 + "'";
            List<Certificacionrecuo> cantidades = session.createQuery(" FROM Certificacionrecuo WHERE unidadobraId =: unid AND certificacionId =: idC " + rest).setParameter("unid", parseInt).setParameter("idC", idCer).getResultList();
            horas = cantidades.parallelStream().filter(certificacionrecuo -> certificacionrecuo.getTipo().trim().equals("2") || certificacionrecuo.getTipo().trim().equals("3")).map(Certificacionrecuo::getCantidad).reduce(0.0, Double::sum);

            tx.commit();
            session.close();
            return horas;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return horas;
    }
*/

    /**
     * Tabla con datos estaticos en los convenios
     */

    public ArrayList<TableConvenios> getTableStatic(Integer idCuad, Integer rows) {
        ArrayList<TableConvenios> tableConveniosArrayList = new ArrayList<>();

        for (int i = 0; i < rows; ++i) {

            TableConvenios tableConvenios = new TableConvenios(idCuad, "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ", "  ");
            tableConveniosArrayList.add(tableConvenios);
        }

        return tableConveniosArrayList;
    }

    /**
     * para la cuantitativa agrupando por unidades de ObraPCW
     */
    public ArrayList<DatosCuantitativaUOGRUPModel> getRecursosUOGRUPModelRV(ReportesController
                                                                                    reportes, String
                                                                                    query, int niveles, Obra obra) {


        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            calculate = null;
            reportesController = reportes;
            datosCuantitativaUOGRUPModelArrayList = new ArrayList<DatosCuantitativaUOGRUPModel>();
            List<Object[]> query1 = session.createQuery(query).getResultList();
            for (Object[] row : query1) {
                Integer idEmp = Integer.parseInt(row[0].toString().trim());
                valCoeficientes = getCoeficientesEmpresa(idEmp);
                empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                zonaBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                nivelBild = new StringBuilder().append(row[10].toString().trim()).append(" ").append(row[11].toString().trim());
                especialidadBild = new StringBuilder().append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                subBild = new StringBuilder().append(row[16].toString().trim()).append(" ").append(row[17].toString().trim());
                uocode = new StringBuilder().append(" RV ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                if (row[26].toString().trim().contentEquals("2")) {
                    tipo = "Mano de Obra";
                    recursos = getRecursosa(Integer.parseInt(row[28].toString().trim()));
                    double valReC = new BigDecimal(String.format("%.2f", getValorSalarioTotal(idEmp, obra.getId(), recursos.getGrupoescala()))).doubleValue();
                    calculate = Double.parseDouble(row[27].toString().trim()) * valReC;
                    datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(idEmp, empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), tipo, Double.parseDouble(row[29].toString().trim()), Double.parseDouble(row[30].toString().trim()), Double.parseDouble(row[31].toString().trim()), Double.parseDouble(row[32].toString().trim()), Double.parseDouble(row[27].toString().trim()), valReC, Double.parseDouble(row[33].toString().trim()), Math.round(calculate * 100d) / 100d);
                    datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);
                } else if (row[26].toString().trim().contentEquals("3")) {
                    tipo = "Equipos";
                    recursos = getRecursosa(Integer.parseInt(row[28].toString().trim()));
                    calculate = Double.parseDouble(row[27].toString().trim()) * recursos.getPreciomn();
                    if (row[34] == null) {
                        datosCuantitativaUOGRUPModelArrayList.add(new DatosCuantitativaUOGRUPModel(idEmp, empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), tipo, Double.parseDouble(row[29].toString().trim()), Double.parseDouble(row[30].toString().trim()), Double.parseDouble(row[31].toString().trim()), Double.parseDouble(row[32].toString().trim()), Double.parseDouble(row[27].toString().trim()), recursos.getPreciomn(), Double.parseDouble(row[33].toString().trim()), Math.round(calculate * 100d) / 100d));
                    } else {
                        datosCuantitativaUOGRUPModelArrayList.add(new DatosCuantitativaUOGRUPModel(idEmp, empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), row[23].toString().trim(), row[24].toString().trim(), row[25].toString().trim(), tipo, Double.parseDouble(row[34].toString().trim()), Double.parseDouble(row[35].toString().trim()), Double.parseDouble(row[36].toString().trim()), Double.parseDouble(row[37].toString().trim()), Double.parseDouble(row[27].toString().trim()), recursos.getPreciomn(), Double.parseDouble(row[33].toString().trim()), Math.round(calculate * 100d) / 100d));

                    }
                }
            }


            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return datosCuantitativaUOGRUPModelArrayList;

    }

    public ArrayList<DatosCuantitativaUOGRUPModel> getRecursosMaterialesUOGROUP(ReportesController
                                                                                        reportes, String
                                                                                        query, int niveles, boolean flag) {


        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            datosCuantitativaUOGRUPModelArrayList = new ArrayList<DatosCuantitativaUOGRUPModel>();
            javax.persistence.Query query1 = session.createSQLQuery(query);
            List<Object[]> materialesCuantitativa = query1.getResultList();
            for (Object[] row : materialesCuantitativa) {
                if (row[21] != null) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    uocode = new StringBuilder().append(" UO ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(" ").append(row[21].toString().trim());

                    if (row[26].toString().trim().contentEquals("1")) {
                        Recursos rec = session.get(Recursos.class, Integer.parseInt(row[25].toString().trim()));
                        Double costo = Double.parseDouble(row[23].toString().trim()) * rec.getPreciomn();
                        datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), rec.getCodigo(), rec.getDescripcion(), rec.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[23].toString().trim()), rec.getPreciomn(), rec.getPreciomlc(), costo);
                        datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);

                    } else if (row[26].toString().trim().contentEquals("S")) {
                        if (flag == true) {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[25].toString().trim()));
                            arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                            arrayListComponets.forEach(items -> {
                                Double cant = items.getCantiADouble() * Double.parseDouble(row[23].toString().trim());
                                Double costS = cant * items.getPrecio();
                                datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS);
                                datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);
                            });
                        } else {
                            Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[25].toString().trim()));
                            Double costo = Double.parseDouble(row[23].toString().trim()) * suministrossemielaborados.getPreciomn();
                            datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[23].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), costo);
                            datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);
                        }

                    } else if (row[26].toString().trim().contentEquals("J")) {
                        if (flag == true) {
                            arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                            arrayListComponets.forEach(items -> {

                                Double cant = items.getCantiADouble() * Double.parseDouble(row[23].toString().trim());
                                Double costS = cant * items.getPrecio();

                                datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS);
                                datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);
                            });
                        } else {
                            Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[25].toString().trim()));
                            Double costo = Double.parseDouble(row[23].toString().trim()) * juegoproducto.getPreciomn();
                            datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[23].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), costo);
                            datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);
                        }
                    }
                }
            }

            tx.commit();
            session.close();
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error: " + CalForReport.class.getName());
            alert.setContentText(ex.getMessage());
            alert.showAndWait();

        } finally {
            session.close();
        }

        return datosCuantitativaUOGRUPModelArrayList;

    }

    public ArrayList<CuantitativaUOGROUPModel> createReportCuantitativaUOGROUPFormater(ReportesController
                                                                                               reportes, ArrayList<DatosCuantitativaUOGRUPModel> datosCuantitativaModel, Obra obra) {
        reportesController = reportes;

        groupToReportsArrayList = new ArrayList<GroupToReport>();
        datosCuantitativaUOGRUPModelArrayList = new ArrayList<DatosCuantitativaUOGRUPModel>();
        datosCuantitativaUOGRUPModelArrayList = datosCuantitativaModel;
        groupToReportsArrayList = getEmpresaInDatosCuentitativaUOGroup(datosCuantitativaUOGRUPModelArrayList, obra);

        cuantitativaUOGROUPModelArrayList = new ArrayList<CuantitativaUOGROUPModel>();

        tempCuantitat = new ArrayList<>();
        for (GroupToReport groupToRep : groupToReportsArrayList) {
            cuantitativaUOGROUPModelArrayList = getCuantitativaUOGROUPDatosForReport(datosCuantitativaUOGRUPModelArrayList, groupToRep);
            tempCuantitat.addAll(cuantitativaUOGROUPModelArrayList);
        }
        return tempCuantitat;
    }

    public ArrayList<DatosCuantitativaUOGRUPModel> getRecursosMaterialesUOGROUPRVM(ReportesController
                                                                                           reportes, String query, int niveles, boolean flag) {


        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            datosCuantitativaUOGRUPModelArrayList = new ArrayList<DatosCuantitativaUOGRUPModel>();
            List<Object[]> query1 = session.createSQLQuery(query).getResultList();
            for (Object[] row : query1) {
                Integer idEmp = Integer.parseInt(row[0].toString().trim());
                empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                zonaBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                nivelBild = new StringBuilder().append(row[10].toString().trim()).append(" ").append(row[11].toString().trim());
                especialidadBild = new StringBuilder().append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                subBild = new StringBuilder().append(row[16].toString().trim()).append(" ").append(row[17].toString().trim());
                uocode = new StringBuilder().append(" RV ").append(" ").append(row[19].toString().trim()).append(" ").append(row[20].toString().trim()).append(" ").append(row[22].toString().trim()).append(" / ").append(row[21].toString().trim());
                if (row[26].toString().trim().contentEquals("1")) {
                    recursos = session.get(Recursos.class, Integer.parseInt(row[25].toString().trim()));

                    datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[23].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[24].toString().trim()));
                    datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);

                } else if (row[26].toString().trim().contentEquals("S")) {
                    if (flag == true) {
                        Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[25].toString().trim()));
                        arrayListComponets = getDesgloseMat(suministrossemielaborados.getId());
                        for (RecComponetsModel items : arrayListComponets) {
                            Double cant = items.getCantiADouble() * Double.parseDouble(row[23].toString().trim());
                            Double costS = cant * items.getPrecio();
                            datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS);
                            datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);
                        }
                    } else {
                        Suministrossemielaborados suministrossemielaborados = session.get(Suministrossemielaborados.class, Integer.parseInt(row[25].toString().trim()));

                        datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[23].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[24].toString().trim()));
                        datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);
                    }

                } else if (row[26].toString().trim().contentEquals("J")) {
                    if (flag == true) {
                        arrayListComponets = getDesgloseMatJueg(juegoproducto.getId());
                        for (RecComponetsModel items : arrayListComponets) {

                            Double cant = items.getCantiADouble() * Double.parseDouble(row[23].toString().trim());
                            Double costS = cant * items.getPrecio();

                            datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), items.getCode(), items.getDesc(), items.getUm(), items.getTipo(), 1, 1, 1, 1, cant, items.getPrecio(), items.getPreciomlc(), costS);
                            datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);
                        }
                    } else {
                        Juegoproducto juegoproducto = session.get(Juegoproducto.class, Integer.parseInt(row[25].toString().trim()));

                        datosCuantitativaUOGRUPModel = new DatosCuantitativaUOGRUPModel(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), Integer.parseInt(row[3].toString().trim()), zonaBild.toString().trim(), Integer.parseInt(row[6].toString().trim()), objetoBild.toString().trim(), Integer.parseInt(row[9].toString().trim()), nivelBild.toString().trim(), Integer.parseInt(row[12].toString().trim()), especialidadBild.toString().trim(), subBild.toString().trim(), Integer.parseInt(row[15].toString().trim()), Integer.parseInt(row[18].toString().trim()), row[19].toString().trim(), uocode.toString().trim(), row[21].toString().trim(), Double.parseDouble(row[22].toString().trim()), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[23].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[24].toString().trim()));
                        datosCuantitativaUOGRUPModelArrayList.add(datosCuantitativaUOGRUPModel);
                    }

                }


            }


            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return datosCuantitativaUOGRUPModelArrayList;

    }

    public List<UOPlanCertConvModel> getListSort(List<UOPlanCertConvModel> arrayList, int idBrig, int idGrup,
                                                 int idCuad) {
        List<UOPlanCertConvModel> datoTemp = new ArrayList<>();
        for (UOPlanCertConvModel item : arrayList) {
            if (item.getIdBrigada() == idBrig && item.getIdGrupo() == idGrup && item.getIdCuadrilla() == idCuad) {
                datoTemp.add(item);
            }
        }
        datoTemp.size();
        return datoTemp;
    }

    private Double getHHyHECertificadasConvenios(int parseInt, String f1, String f2, int idCer) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            horas = 0.0;
            Unidadobra unidadobra = util.getUnidadobra(parseInt);
            double valHorasCalc = HotasTotalesUnidadObra(unidadobra);

            Certificacion planificacion = (Certificacion) session.createQuery("  FROM Certificacion WHERE unidadobraId =: unid AND id =: idC ").setParameter("unid", parseInt).setParameter("idC", idCer).getSingleResult();
            if (planificacion != null) {
                horas = valHorasCalc * planificacion.getCantidad() / unidadobra.getCantidad();
            }
            tx.commit();
            session.close();
            return horas;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return horas;
    }

    private Double getHHyHEPlan(int parseInt, String f1, String f2) {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            horas = 0.0;
            String rest = " AND fini >= '" + f1 + "' AND ffin <= '" + f2 + "'";
            List<Planrecuo> cantidades = session.createQuery(" FROM Planrecuo WHERE unidadobraId =: unid " + rest).setParameter("unid", parseInt).getResultList();
            horas = cantidades.parallelStream().filter(certificacionrecuo -> certificacionrecuo.getTipo().trim().equals("2") || certificacionrecuo.getTipo().trim().equals("3")).map(Planrecuo::getCantidad).reduce(0.0, Double::sum);

            tx.commit();
            session.close();
            return horas;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return horas;

    }

    public ArrayList<GroupToReport> getEmpresaInArrayDCRVModels
            (ArrayList<DatosCertificacionOrigenUORV> datosArrayList, Obra obra1) {
        groupToReportsArrayList = new ArrayList<GroupToReport>();

        datosArrayList.size();
        datosArrayList.forEach(uoreprt -> {
            GroupToReport groupToReport = new GroupToReport(uoreprt.getIdEmpresa(), uoreprt.getEmpresa(), obra1.getSalarioBySalarioId().getTag());
            if (groupToReportsArrayList.size() == 0) {
                groupToReportsArrayList.add(groupToReport);
            } else if (!groupToReportsArrayList.contains(groupToReport)) {
                groupToReportsArrayList.add(groupToReport);
            }

        });
        return groupToReportsArrayList;
    }

    private double hhYhoInRV(double cant, Renglonvariante renglonvariante) {
        double time = 0.0;
        for (Renglonrecursos renglonrecursos : renglonvariante.getRenglonrecursosById()) {
            if (renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("2")) {
                time += cant * renglonrecursos.getCantidas();
            } else if (renglonrecursos.getRecursosByRecursosId().getTipo().trim().equals("3")) {
                time += cant * renglonrecursos.getCantidas();
            }
        }
        return time;
    }

    private double HotasTotalesUnidadObra(Unidadobra unidadobra) {


        double hhhe = 0.0;
        for (Unidadobrarenglon ur : unidadobra.getUnidadobrarenglonsById()) {
            hhhe += hhYhoInRV(ur.getCantRv(), ur.getRenglonvarianteByRenglonvarianteId());
        }
        return hhhe;
    }

    private Double getHHyHECertificadasConveniosPlan(int parseInt, String f1, String f2, int idCer) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            horas = 0.0;
            Unidadobra unidadobra = util.getUnidadobra(parseInt);
            double valHorasCalc = HotasTotalesUnidadObra(unidadobra);

            Planificacion planificacion = (Planificacion) session.createQuery("  FROM Planificacion WHERE unidadobraId =: unid AND id =: idC ").setParameter("unid", parseInt).setParameter("idC", idCer).getSingleResult();
            if (planificacion != null) {
                horas = valHorasCalc * planificacion.getCantidad() / unidadobra.getCantidad();
            }
            tx.commit();
            session.close();
            return horas;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return horas;
    }

    /**
     * PLAN y CUANTITATIVA GENRAL
     */

    public ArrayList<DatosCuantitativaModelCert> getRecursosCertAndPlanGENRAL(ReportesController
                                                                                      reportes, String
                                                                                      query, int niveles, Obra obra) {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            cuantitativaModelCertsArrayList = new ArrayList<>();
            List<Object[]> objectList = session.createQuery(query).getResultList();
            for (Object[] row : objectList) {
                coeficienteMano = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obra.getId() && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 2).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                coeficienteEquipo = structureSingelton.getValCoeficienteList().parallelStream().filter(eocc -> eocc.getObraId() == obra.getId() && eocc.getEmpresaconstructoraId() == Integer.parseInt(row[0].toString().trim()) && eocc.getConceptosgastoId() == 3).map(Empresaobraconceptoscoeficientes::getCoeficiente).findFirst().orElse(1.0);
                if (niveles == 1) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    if (row[3].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[4].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, " ", 1, " ", 1, " ", 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[5].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[5].toString().trim()) * recVal, " ", " ", " ", " "));
                    } else if (row[3].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[4].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, " ", 1, " ", 1, " ", 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[5].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc() * coeficienteEquipo, Double.parseDouble(row[5].toString().trim()) * recursos.getPreciomn(), " ", " ", " ", " "));
                    } else if (row[3].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[4].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, " ", 1, " ", 1, " ", 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[5].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[5].toString().trim()) * recursos.getPreciomn(), " ", " ", " ", " "));
                        }
                    } else if (row[3].toString().trim().equals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[4].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, " ", 1, " ", 1, " ", 1, " ", 1, " ", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[5].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[5].toString().trim()) * juegoproducto.getPreciomn(), " ", " ", " ", " "));
                    } else if (row[3].toString().trim().equals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[4].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, " ", 1, " ", 1, " ", 1, " ", 1, " ", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[5].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[5].toString().trim()) * suministrossemielaborados.getPreciomn(), " ", " ", " ", " "));
                    }
                } else if (niveles == 2) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    if (row[6].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[7].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, " ", 1, " ", 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[8].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[8].toString().trim()) * recVal, " ", " ", " ", " "));
                    } else if (row[6].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[7].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, " ", 1, " ", 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[8].toString().trim()), recursos.getPreciomn() * coeficienteEquipo, recursos.getPreciomlc(), Double.parseDouble(row[8].toString().trim()) * recursos.getPreciomn() * coeficienteEquipo, " ", " ", " ", " "));
                    } else if (row[6].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[7].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, " ", 1, " ", 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[8].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[8].toString().trim()) * recursos.getPreciomn(), " ", " ", " ", " "));
                        }
                    } else if (row[6].toString().trim().equals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[7].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, " ", 1, " ", 1, " ", 1, " ", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[8].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[8].toString().trim()) * juegoproducto.getPreciomn(), " ", " ", " ", " "));
                    } else if (row[6].toString().trim().equals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[7].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, " ", 1, " ", 1, " ", 1, " ", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[8].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[8].toString().trim()) * suministrossemielaborados.getPreciomn(), " ", " ", " ", " "));
                    }
                } else if (niveles == 3) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    if (row[9].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, " ", 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[11].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * recVal, " ", " ", " ", " "));
                    } else if (row[9].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, " ", 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[11].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc() * coeficienteEquipo, Double.parseDouble(row[11].toString().trim()) * recursos.getPreciomn() * coeficienteEquipo, " ", " ", " ", " "));
                    } else if (row[9].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, " ", 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[11].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * recursos.getPreciomn(), " ", " ", " ", " "));
                        }
                    } else if (row[9].toString().trim().equals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[10].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, " ", 1, " ", 1, " ", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[11].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * juegoproducto.getPreciomn(), " ", " ", " ", " "));
                    } else if (row[9].toString().trim().equals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[10].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, " ", 1, " ", 1, " ", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[11].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * suministrossemielaborados.getPreciomn(), " ", " ", " ", " "));
                    }
                } else if (niveles == 4) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    if (row[12].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[13].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[14].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[14].toString().trim()) * recVal, " ", " ", " ", " "));
                    } else if (row[12].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[13].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[14].toString().trim()), recursos.getPreciomn() * coeficienteEquipo, recursos.getPreciomlc(), Double.parseDouble(row[14].toString().trim()) * recursos.getPreciomn() * coeficienteEquipo, " ", " ", " ", " "));
                    } else if (row[12].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[13].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, " ", 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[14].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[14].toString().trim()) * recursos.getPreciomn(), " ", " ", " ", " "));
                        }
                    } else if (row[12].toString().trim().equals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[13].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, " ", 1, " ", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[14].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[14].toString().trim()) * juegoproducto.getPreciomn(), " ", " ", " ", " "));
                    } else if (row[12].toString().trim().equals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[13].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, " ", 1, " ", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[14].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[14].toString().trim()) * suministrossemielaborados.getPreciomn(), " ", " ", " ", " "));
                    }
                } else if (niveles == 5) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    if (row[15].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[16].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, especialidadBild.toString().trim(), 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[17].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[17].toString().trim()) * recVal, " ", " ", " ", " "));
                    } else if (row[15].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[16].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, especialidadBild.toString().trim(), 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[17].toString().trim()), recursos.getPreciomn() * coeficienteEquipo, recursos.getPreciomlc(), Double.parseDouble(row[17].toString().trim()) * recursos.getPreciomn() * coeficienteEquipo, " ", " ", " ", " "));
                    } else if (row[15].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[16].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, especialidadBild.toString().trim(), 1, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[17].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[17].toString().trim()) * recursos.getPreciomn(), " ", " ", " ", " "));
                        }
                    } else if (row[15].toString().trim().equals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[16].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, especialidadBild.toString().trim(), 1, " ", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[17].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[17].toString().trim()) * juegoproducto.getPreciomn(), " ", " ", " ", " "));
                    } else if (row[15].toString().trim().equals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[16].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, especialidadBild.toString().trim(), 1, " ", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[17].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[17].toString().trim()) * suministrossemielaborados.getPreciomn(), " ", " ", " ", " "));
                    }
                } else if (niveles == 6) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[4]).append(" ").append(row[5]);
                    objetoBild = new StringBuilder().append(row[7]).append(" ").append(row[8]);
                    nivelBild = new StringBuilder().append(row[10]).append(" ").append(row[11]);
                    especialidadBild = new StringBuilder().append(row[13]).append(" ").append(row[14]);
                    subBild = new StringBuilder().append(row[16]).append(" ").append(row[17]);
                    if (row[18].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, especialidadBild.toString().trim(), 1, subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[20].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[20].toString().trim()) * recVal, " ", " ", " ", " "));
                    } else if (row[18].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, especialidadBild.toString().trim(), 1, subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[20].toString().trim()), recursos.getPreciomn() * coeficienteEquipo, recursos.getPreciomlc(), Double.parseDouble(row[20].toString().trim()) * recursos.getPreciomn() * coeficienteEquipo, " ", " ", " ", " "));
                    } else if (row[18].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[19].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, especialidadBild.toString().trim(), 1, subBild.toString().trim(), recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[20].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[20].toString().trim()) * recursos.getPreciomn(), " ", " ", " ", " "));
                        }
                    } else if (row[18].toString().trim().equals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[19].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, especialidadBild.toString().trim(), 1, subBild.toString().trim(), juegoproducto.getCodigo(), juegoproducto.getDescripcion(), juegoproducto.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[20].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[20].toString().trim()) * juegoproducto.getPreciomn(), " ", " ", " ", " "));
                    } else if (row[18].toString().trim().equals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[19].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 1, zonaBild.toString().trim(), 1, objetoBild.toString().trim(), 1, nivelBild.toString().trim(), 1, especialidadBild.toString().trim(), 1, subBild.toString().trim(), suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 1, 1, 1, 1, Double.parseDouble(row[20].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[20].toString().trim()) * suministrossemielaborados.getPreciomn(), " ", " ", " ", " "));
                    }
                } else if (niveles == 7) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    brigBuilder = new StringBuilder().append(row[3].toString().trim()).append(" ").append(row[4].toString().trim());
                    uocode = new StringBuilder().append("  ");
                    if (row[5].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[6].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[7].toString().trim()), recVal, recursos.getPreciomlc() * coeficienteMano, Double.parseDouble(row[7].toString().trim()) * recVal, uocode.toString().trim(), brigBuilder.toString().trim(), " ", " "));
                    } else if (row[5].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[6].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[7].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc() * coeficienteEquipo, Double.parseDouble(row[7].toString().trim()) * recursos.getPreciomn() * coeficienteEquipo, uocode.toString().trim(), brigBuilder.toString().trim(), " ", " "));
                    } else if (row[5].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[6].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[7].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[7].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " "));
                        }
                    } else if (row[5].toString().trim().equals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[6].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), recursos.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[7].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[7].toString().trim()) * juegoproducto.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " "));
                    } else if (row[5].toString().trim().equals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[6].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[7].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[7].toString().trim()) * suministrossemielaborados.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " "));
                    }
                } else if (niveles == 8) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    brigBuilder = new StringBuilder().append(row[3].toString().trim()).append(" ").append(row[4].toString().trim());
                    grupBuilder = new StringBuilder().append(row[5].toString().trim()).append(" ").append(row[6].toString().trim());
                    uocode = new StringBuilder().append("  ");
                    if (row[7].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[8].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[9].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[9].toString().trim()) * recVal, uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " "));
                    } else if (row[7].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[8].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[9].toString().trim()), recursos.getPreciomn() * coeficienteEquipo, recursos.getPreciomlc(), Double.parseDouble(row[9].toString().trim()) * recursos.getPreciomn() * coeficienteEquipo, uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " "));
                    } else if (row[7].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[8].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[9].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[9].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " "));
                        }
                    } else if (row[7].toString().trim().equals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[8].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), recursos.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[9].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[9].toString().trim()) * juegoproducto.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " "));
                    } else if (row[7].toString().trim().equals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[8].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[9].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[9].toString().trim()) * suministrossemielaborados.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), " "));
                    }
                } else if (niveles == 9) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    brigBuilder = new StringBuilder().append(row[3].toString().trim()).append(" ").append(row[4].toString().trim());
                    grupBuilder = new StringBuilder().append(row[5].toString().trim()).append(" ").append(row[6].toString().trim());
                    cuadBuilder = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                    uocode = new StringBuilder().append("  ");
                    if (row[9].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[11].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * recVal, uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim()));
                    } else if (row[9].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[11].toString().trim()), recursos.getPreciomn() * coeficienteEquipo, recursos.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * recursos.getPreciomn() * coeficienteEquipo, uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim()));
                    } else if (row[9].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[11].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim()));
                        }
                    } else if (row[9].toString().trim().equals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[10].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), recursos.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[11].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * juegoproducto.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim()));
                    } else if (row[9].toString().trim().equals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[10].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, " ", 0, " ", 0, " ", 0, "", 0, " ", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[11].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * suministrossemielaborados.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), grupBuilder.toString().trim(), cuadBuilder.toString().trim()));
                    }
                } else if (niveles == 73) {
                    empresaBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    zonaBild = new StringBuilder().append(row[3].toString().trim()).append(" ").append(row[4].toString().trim());
                    objetoBild = new StringBuilder().append(row[5].toString().trim()).append(" ").append(row[6].toString().trim());
                    brigBuilder = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                    uocode = new StringBuilder().append("  ");
                    if (row[9].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, zonaBild.toString().trim(), 0, objetoBild.toString().trim(), 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[11].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * recVal, uocode.toString().trim(), brigBuilder.toString().trim(), " ", " "));
                    } else if (row[9].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, zonaBild.toString().trim(), 0, objetoBild.toString().trim(), 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[11].toString().trim()), recursos.getPreciomn() * coeficienteEquipo, recursos.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * recursos.getPreciomn() * coeficienteEquipo, uocode.toString().trim(), brigBuilder.toString().trim(), " ", " "));
                    } else if (row[9].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[10].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, zonaBild.toString().trim(), 0, objetoBild.toString().trim(), 0, " ", 0, "", 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[11].toString().trim()), recursos.getPreciomn(), recursos.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * recursos.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " "));
                        }
                    } else if (row[9].toString().trim().equals("J")) {
                        juegoproducto = getJuegoproducto(Integer.parseInt(row[10].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, zonaBild.toString().trim(), 0, objetoBild.toString().trim(), 0, " ", 0, "", 0, " ", juegoproducto.getCodigo(), juegoproducto.getDescripcion(), recursos.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[11].toString().trim()), juegoproducto.getPreciomn(), juegoproducto.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * juegoproducto.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " "));
                    } else if (row[9].toString().trim().equals("S")) {
                        suministrossemielaborados = getSuministrossemielaborados(Integer.parseInt(row[10].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(Integer.parseInt(row[0].toString().trim()), empresaBild.toString().trim(), 0, zonaBild.toString().trim(), 0, objetoBild.toString().trim(), 0, " ", 0, "", 0, " ", suministrossemielaborados.getCodigo(), suministrossemielaborados.getDescripcion(), suministrossemielaborados.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[11].toString().trim()), suministrossemielaborados.getPreciomn(), suministrossemielaborados.getPreciomlc(), Double.parseDouble(row[11].toString().trim()) * suministrossemielaborados.getPreciomn(), uocode.toString().trim(), brigBuilder.toString().trim(), " ", " "));
                    }
                } else if (niveles == 15) {
                    especialidadBild = new StringBuilder().append(row[1].toString().trim()).append(" ").append(row[2].toString().trim());
                    if (row[3].toString().trim().equals("2")) {
                        recursos = getRecursosa(Integer.parseInt(row[4].toString().trim()));
                        double recVal = new BigDecimal(String.format("%.2f", getValorSalarioTotal(Integer.parseInt(row[0].toString().trim()), obra.getId(), recursos.getGrupoescala()))).doubleValue();
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(1, " ", 0, " ", 0, " ", 0, " ", 0, especialidadBild.toString().trim(), 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Mano de Obra", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[5].toString().trim()), recVal, recursos.getPreciomlc(), Double.parseDouble(row[5].toString().trim()) * recVal, " ", " ", " ", " "));
                    } else if (row[3].toString().trim().equals("3")) {
                        recursos = getRecursosa(Integer.parseInt(row[4].toString().trim()));
                        cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(1, " ", 0, " ", 0, " ", 0, " ", 0, especialidadBild.toString().trim(), 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Equipos", recursos.getCpo(), recursos.getCpe(), recursos.getCet(), recursos.getOtra(), Double.parseDouble(row[5].toString().trim()), recursos.getPreciomn() * coeficienteMano, recursos.getPreciomlc(), Double.parseDouble(row[5].toString().trim()) * recursos.getPreciomn() * coeficienteMano, " ", " ", " ", " "));
                    } else if (row[3].toString().trim().equals("1")) {
                        recursos = getRecursosa(Integer.parseInt(row[4].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(1, " ", 0, " ", 0, " ", 0, " ", 0, especialidadBild.toString().trim(), 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[5].toString().trim()), recursos.getPreciomn() * coeficienteMano, recursos.getPreciomlc(), Double.parseDouble(row[5].toString().trim()) * recursos.getPreciomn() * coeficienteMano, " ", " ", " ", " "));
                        }
                    } else if (row[3].toString().trim().equals("J")) {
                        Juegoproducto recursos = getJuegoproducto(Integer.parseInt(row[4].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(1, " ", 0, " ", 0, " ", 0, " ", 0, especialidadBild.toString().trim(), 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[5].toString().trim()), recursos.getPreciomn() * coeficienteMano, recursos.getPreciomlc(), Double.parseDouble(row[5].toString().trim()) * recursos.getPreciomn() * coeficienteMano, " ", " ", " ", " "));
                        }
                    } else if (row[3].toString().trim().equals("S")) {
                        Suministrossemielaborados recursos = getSuministrossemielaborados(Integer.parseInt(row[4].toString().trim()));
                        if (recursos != null) {
                            cuantitativaModelCertsArrayList.add(new DatosCuantitativaModelCert(1, " ", 0, " ", 0, " ", 0, " ", 0, especialidadBild.toString().trim(), 0, " ", recursos.getCodigo(), recursos.getDescripcion(), recursos.getUm(), "Materiales", 0, 0, 0, 0, Double.parseDouble(row[5].toString().trim()), recursos.getPreciomn() * coeficienteMano, recursos.getPreciomlc(), Double.parseDouble(row[5].toString().trim()) * recursos.getPreciomn() * coeficienteMano, " ", " ", " ", " "));
                        }
                    }

                }
            }
            tx.commit();
            session.close();
            return cuantitativaModelCertsArrayList;
        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();

        } finally {
            session.close();
        }

        return new ArrayList<>();


    }

    public List<RecursosConvenioModel> getListSortRecursosConvenioModelPlan(ConveniosGenericModel
                                                                                    convenios, String
                                                                                    f1, String f2, String obra) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            List<RecursosConvenioModel> recursosConvenioModelList = new ArrayList<>();
            String rest = " AND cert.desde >= '" + f1 + "' AND cert.hasta <= '" + f2 + "'";
            List<Tuple> datos = session.createQuery(" SELECT cou.recursoId, SUM(cou.cantidad), cou.tipo FROM Planificacion cert INNER JOIN Planrecuo cou ON cou.planId = cert.id WHERE cert.brigadaconstruccionId =: idB AND cert.grupoconstruccionId =: idG AND cert.cuadrillaconstruccionId =: idC " + rest + " GROUP BY cou.recursoId, cou.tipo ", Tuple.class).setParameter("idB", convenios.getIdBrig()).setParameter("idG", convenios.getIdGrup()).setParameter("idC", convenios.getIdCuad()).getResultList();
            for (Tuple dato : datos.parallelStream().filter(tuple -> tuple.get(2).toString().trim().equals("2") || tuple.get(2).toString().trim().equals("3")).collect(Collectors.toList())) {
                Recursos rec = getRecursosa(Integer.parseInt(dato.get(0).toString().trim()));
                Empresaconstructora empresa = getEmpresaconstructora(convenios.getIdBrig());
                if (rec.getTipo().trim().equals("2")) {
                    double certVol = Double.parseDouble(dato.get(1).toString().trim());
                    recursosConvenioModelList.add(new RecursosConvenioModel(obra, empresa.getCodigo() + " " + empresa.getDescripcion(), convenios.getIdBrig(), convenios.getBrigada(), convenios.getIdGrup(), convenios.getGrupo(), convenios.getIdCuad(), convenios.getCuadrilla(), rec.getCodigo(), rec.getDescripcion().trim(), rec.getUm(), "Mano de Obra", Math.round(certVol * 10000d) / 10000d, Math.round(certVol * 10000d) / 10000d));
                } else if (rec.getTipo().trim().equals("3")) {
                    double certVol = Double.parseDouble(dato.get(1).toString().trim());
                    recursosConvenioModelList.add(new RecursosConvenioModel(obra, empresa.getCodigo() + " " + empresa.getDescripcion(), convenios.getIdBrig(), convenios.getBrigada(), convenios.getIdGrup(), convenios.getGrupo(), convenios.getIdCuad(), convenios.getCuadrilla(), rec.getCodigo(), rec.getDescripcion().trim(), rec.getUm(), "Equipos", Math.round(certVol * 10000d) / 10000d, Math.round(certVol * 10000d) / 10000d));
                }
            }

            tx.commit();
            session.close();
            return recursosConvenioModelList;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();
    }

    /**
     * Para el calculo de los valores certificados
     *
     * @param reportes
     * @param query
     * @return
     */
    public ArrayList<CertificoModel> getDatosTocertifico(ReportesController reportes, String query, String
            f1, String f2) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            certificoModelArrayList = new ArrayList<>();
            List<Object[]> certificoList = session.createQuery(query).getResultList();
            String Cuad = null;
            for (Object[] row : certificoList) {
                String Emp = row[0].toString().trim() + " " + row[1].toString().trim();
                String Brig = row[2].toString().trim() + " " + row[3].toString().trim();
                String Grup = row[4].toString().trim() + " " + row[5].toString().trim();
                if (row[6] != null) {
                    Cuad = row[6].toString().trim() + " " + row[7].toString().trim();
                } else {
                    Cuad = " ";
                }
                String Zona = row[8].toString().trim() + " " + row[9].toString().trim();
                String Objt = row[10].toString().trim() + " " + row[11].toString().trim();
                String Niv = row[12].toString().trim() + " " + row[13].toString().trim();
                String Esp = row[14].toString().trim() + " " + row[15].toString().trim();
                String Subesp = row[16].toString().trim() + " " + row[17].toString().trim();
                String UO = row[18].toString().trim();
                String UOdescr = row[19].toString().trim();
                Double cantCert = Double.parseDouble(row[20].toString().trim());
                String um = row[21].toString().trim();
                double coef = getCoeficienteSalObra(Integer.parseInt(row[23].toString().trim()));
                Double salarioMN = getUnidadObraValuesSalario(Integer.parseInt(row[23].toString().trim()), f1, f2, Integer.parseInt(row[24].toString().trim()));
                Double hHyHe = getHHyHECertificadasConvenios(Integer.parseInt(row[23].toString().trim()), f1, f2, Integer.parseInt(row[24].toString().trim()));
                Double salariocuc = getSalariocucCertificado(Integer.parseInt(row[23].toString().trim()), Integer.parseInt(row[24].toString().trim()));
                Double costo = Double.parseDouble(row[22].toString().trim());

                certificoModelArrayList.add(new CertificoModel(Emp, Brig, Grup, Cuad, Zona, Objt, Niv, Esp, Subesp, UO, UOdescr, cantCert, um, hHyHe, cantCert * salarioMN, cantCert * salarioMN * coef, salariocuc, costo));

            }

            tx.commit();
            session.close();
            return certificoModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList();

    }

    public Double getCantidadCertificadaExtend(int idUn, int idBrig, int idGrup, int idCuad, String
            f1, String f2) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            cantUO = 0.0;
            String rest = " AND desde >= '" + f1 + "' AND hasta <= '" + f2 + "'";
            List<Certificacion> list = session.createQuery("from Certificacion WHERE unidadobraId =: idUni AND brigadaconstruccionId =: idB AND grupoconstruccionId =: idGr AND cuadrillaconstruccionId =: idCu " + rest).setParameter("idUni", idUn).setParameter("idB", idBrig).setParameter("idGr", idGrup).setParameter("idCu", idCuad).getResultList();
            if (list.size() > 0) {
                cantUO = list.parallelStream().map(Certificacion::getCantidad).reduce(0.0, Double::sum);
            }
            tx.commit();
            session.close();
            return cantUO;


        } catch (Exception ex) {
            if (tx != null) tx.rollback();
            ex.printStackTrace();
        } finally {
            session.close();
        }

        return cantUO;
    }

    public List<RecursosConvenioModel> getListSortRecursosConvenioModel(ConveniosGenericModel
                                                                                convenios, String
                                                                                f1, String f2, Obra obra) {
        System.out.println(" ****** " + obra);
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            List<RecursosConvenioModel> recursosConvenioModelList = new ArrayList<>();
            String rest = " AND ctr.desde >= '" + f1 + "' AND ctr.hasta <= '" + f2 + "'";
            List<Tuple> datos = session.createQuery(" SELECT rec.id, SUM(uor.cantRv * ctr.cantidad / uo.cantidad * rvr.cantidas) as vol, rec.tipo  FROM Unidadobra uo INNER JOIN Unidadobrarenglon uor ON uo.id = uor.unidadobraId INNER JOIN Certificacion ctr On uor.unidadobraId = ctr.unidadobraId INNER JOIN Renglonrecursos rvr ON uor.renglonvarianteId = rvr.renglonvarianteId INNER JOIN Recursos rec ON rvr.recursosId = rec.id WHERE rec.tipo != '1' AND ctr.brigadaconstruccionId =: idB AND ctr.grupoconstruccionId =: idG AND ctr.cuadrillaconstruccionId =: idC " + rest + " AND uo.obraId =: idO  GROUP BY rec.id, rec.tipo ", Tuple.class).setParameter("idB", convenios.getIdBrig()).setParameter("idG", convenios.getIdGrup()).setParameter("idC", convenios.getIdCuad()).setParameter("idO", obra.getId()).getResultList();
            datos.size();
            for (Tuple dato : datos.parallelStream().filter(tuple -> tuple.get(2).toString().trim().equals("2") || tuple.get(2).toString().trim().equals("3")).collect(Collectors.toList())) {
                Recursos rec = getRecursosa(Integer.parseInt(dato.get(0).toString().trim()));
                Empresaconstructora empresa = getEmpresaconstructora(convenios.getIdBrig());
                if (rec.getTipo().trim().equals("2")) {
                    double certVol = Double.parseDouble(dato.get(1).toString().trim());
                    recursosConvenioModelList.add(new RecursosConvenioModel(obra.getCodigo() + " " + obra.getDescripion(), empresa.getCodigo() + " " + empresa.getDescripcion(), convenios.getIdBrig(), convenios.getBrigada(), convenios.getIdGrup(), convenios.getGrupo(), convenios.getIdCuad(), convenios.getCuadrilla(), rec.getCodigo(), rec.getDescripcion().trim(), rec.getUm(), "Mano de Obra", Math.round(certVol * 10000d) / 10000d, Math.round(certVol * 10000d) / 10000d));
                } else if (rec.getTipo().trim().equals("3")) {
                    double certVol = Double.parseDouble(dato.get(1).toString().trim());
                    recursosConvenioModelList.add(new RecursosConvenioModel(obra.getCodigo() + " " + obra.getDescripion(), empresa.getCodigo() + " " + empresa.getDescripcion(), convenios.getIdBrig(), convenios.getBrigada(), convenios.getIdGrup(), convenios.getGrupo(), convenios.getIdCuad(), convenios.getCuadrilla(), rec.getCodigo(), rec.getDescripcion().trim(), rec.getUm(), "Equipos", Math.round(certVol * 10000d) / 10000d, Math.round(certVol * 10000d) / 10000d));
                }
            }

            tx.commit();
            session.close();
            return recursosConvenioModelList;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();
    }

    public List<ConveniosReportModel> getDatosToConvenios(ReportesController reportes, String query, String
            qdatos, String qmano, String f1, String f2, String obra, String query2) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;

            conveniosGenericModelList = new ArrayList<>();
            conveniosGenericModelList = createGenericModel(query, query2);

            List<ConveniosGenericModel> sortedList = conveniosGenericModelList.stream().sorted(Comparator.comparing(ConveniosGenericModel::getCuadrilla)).collect(Collectors.toList());

            List<UOPlanCertConvModel> temp = new ArrayList<>();

            temp = getDatosToConveniosPlan(qdatos, qmano, f1, f2);
            conveniosReportModelArrayList = new ArrayList<>();
            for (ConveniosGenericModel conveniosGenericModel : sortedList) {
                ArrayList<TableConvenios> tableConveniosArrayList = new ArrayList<>();
                tableConveniosArrayList = getTableStatic(conveniosGenericModel.getIdCuad(), 25);

                List<UOPlanCertConvModel> datosList = getListSort(temp, conveniosGenericModel.getIdBrig(), conveniosGenericModel.getIdGrup(), conveniosGenericModel.getIdCuad());
                datosList.sort(Comparator.comparing(UOPlanCertConvModel::getUoCode));

                recursosConvenioModelArrayList = new ArrayList<>();
                conveniosReportModelArrayList.add(new ConveniosReportModel(conveniosGenericModel.getIdEmp(), conveniosGenericModel.getEmpresa(), conveniosGenericModel.getIdBrig(), conveniosGenericModel.getBrigada(), conveniosGenericModel.getIdGrup(), conveniosGenericModel.getGrupo(), conveniosGenericModel.getIdCuad(), conveniosGenericModel.getCuadrilla(), tableConveniosArrayList, datosList, recursosConvenioModelArrayList));
            }
            tx.commit();
            session.close();
            return conveniosReportModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();
    }

    public List<RecursosConvenioModel> getRecurcursosConvenios(String query, String f1, String f2, Obra
            obra) {
        System.out.println("Q3: " + query.toString());
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            conveniosGenericModelList = new ArrayList<>();
            List<Object[]> datos = session.createQuery(query).getResultList();
            for (Object[] row : datos) {
                conveniosGenericModelList.add(new ConveniosGenericModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), Integer.parseInt(row[3].toString().trim()), row[4].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[7].toString().trim() + " " + row[8].toString().trim(), Integer.parseInt(row[9].toString().trim()), row[10].toString().trim() + " " + row[11].toString().trim()));
            }

            List<ConveniosGenericModel> sortedList = conveniosGenericModelList.stream().sorted(Comparator.comparing(ConveniosGenericModel::getCuadrilla)).collect(Collectors.toList());

            recursosConvenioModelArrayList = new ArrayList<>();
            for (ConveniosGenericModel conveniosGenericModel : sortedList.parallelStream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
                recursosConvenioModelArrayList.addAll(getListSortRecursosConvenioModel(conveniosGenericModel, f1, f2, obra));
            }
            recursosConvenioModelArrayList.sort(Comparator.comparing(RecursosConvenioModel::getRecCode));
            tx.commit();
            session.close();
            return recursosConvenioModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();
    }

    public List<UOPlanCertConvModel> getDatosToConveniosPlan(String query, String queryCert, String f1, String f2) {
        System.out.println(queryCert);
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            List<Tuple> datosConvenios = session.createQuery(query, Tuple.class).getResultList();
            List<UOPlanCertConvModel> temp1 = new ArrayList<>();
            List<UOPlanCertConvModel> temp2 = new ArrayList<>();
            uoPlanCertConvModelArrayList = new ArrayList<>();
            for (Tuple dato : datosConvenios) {
                String uocode = dato.get(3).toString().trim() + "|" + dato.get(4).toString().trim() + "|" + dato.get(5).toString().trim() + "|" + dato.get(6).toString().trim() + "|" + dato.get(7).toString().trim() + "|" + dato.get(8).toString().trim();
                double plnCant = 0.0;
                double certCant = 0.0;
                double horasplan = 0.0;
                double salpaln = 0.0;
                double horascert = 0.0;
                double salcert = 0.0;
                double plnProd = 0.0;
                double certProd = 0.0;
                double coef = getCoeficienteSalObra(Integer.parseInt(dato.get(11).toString().trim()));
                plnCant = Double.parseDouble(dato.get(10).toString().trim());
                horasplan = getHHyHECertificadasConveniosPlan(Integer.parseInt(dato.get(11).toString().trim()), f1, f2, Integer.parseInt(dato.get(15).toString().trim()));
                salpaln = getUnidadObraValuesSalarioPlan(Integer.parseInt(dato.get(11).toString().trim()), f1, f2, Integer.parseInt(dato.get(15).toString().trim()));
                plnProd = Double.parseDouble(dato.get(12).toString().trim()) + Double.parseDouble(dato.get(13).toString().trim()) + Double.parseDouble(dato.get(14).toString().trim());
                double calIN = plnCant * salpaln * coef;
                System.out.println(calIN + " *** ");
                temp1.add(new UOPlanCertConvModel(Integer.parseInt(dato.get(0).toString().trim()), Integer.parseInt(dato.get(1).toString().trim()), Integer.parseInt(dato.get(2).toString().trim()), uocode, dato.get(9).toString().trim(), plnCant, horasplan, plnCant * salpaln, calIN, plnProd, certCant, horascert, salcert, 0.0, certProd, " "));
            }
            temp2 = getDatosToConveniosPlanCertificacion(queryCert, f1, f2);
            uoPlanCertConvModelArrayList.addAll(conveniosMergeList(temp1, temp2));

            tx.commit();
            session.close();
            return uoPlanCertConvModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();
    }

    public List<UOPlanCertConvModel> getDatosToConveniosPlanCertificacion(String queryCert, String
            f1, String f2) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            List<Tuple> datosConvenios = session.createQuery(queryCert, Tuple.class).getResultList();
            List<UOPlanCertConvModel> temp2 = new ArrayList<>();
            for (Tuple dato : datosConvenios) {
                String uocode = dato.get(3).toString().trim() + "|" + dato.get(4).toString().trim() + "|" + dato.get(5).toString().trim() + "|" + dato.get(6).toString().trim() + "|" + dato.get(7).toString().trim() + "|" + dato.get(8).toString().trim();
                double plnCant = 0.0;
                double certCant = 0.0;
                double horasplan = 0.0;
                double salpaln = 0.0;
                double horascert = 0.0;
                double salcert = 0.0;
                double plnProd = 0.0;
                double certProd = 0.0;
                double coef = getCoeficienteSalObra(Integer.parseInt(dato.get(11).toString().trim()));
                certCant = Double.parseDouble(dato.get(10).toString().trim());
                salcert = getUnidadObraValuesSalario(Integer.parseInt(dato.get(11).toString().trim()), f1, f2, Integer.parseInt(dato.get(15).toString().trim()));
                horascert = getHHyHECertificadasConvenios(Integer.parseInt(dato.get(11).toString().trim()), f1, f2, Integer.parseInt(dato.get(15).toString().trim()));
                certProd = Double.parseDouble(dato.get(12).toString().trim()) + Double.parseDouble(dato.get(13).toString().trim()) + Double.parseDouble(dato.get(14).toString().trim());
                double calIN = certCant * salcert * coef;
                System.out.println(calIN + " *** ");
                temp2.add(new UOPlanCertConvModel(Integer.parseInt(dato.get(0).toString().trim()), Integer.parseInt(dato.get(1).toString().trim()), Integer.parseInt(dato.get(2).toString().trim()), uocode, dato.get(9).toString().trim(), plnCant, horasplan, salpaln, 0.0, plnProd, certCant, horascert, certCant * salcert, calIN, certProd, " "));
            }
            tx.commit();
            session.close();
            return temp2;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();
    }

    private double getUnidadObraValuesSalarioPlan(int parseInt, String f1, String f2) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            List<Unidadobrarenglon> unidadobrarenglonList = session.createQuery(" FROM Unidadobrarenglon WHERE unidadobraId =: idU").setParameter("idU", parseInt).getResultList();
            salCertificado = 0.0;
            salario = 0.0;
            volumenCertif = 0.0;
            for (Unidadobrarenglon unidadobrarenglon : unidadobrarenglonList) {
                volumenCertif = getVolumenPlanificadoRV(unidadobrarenglon.getUnidadobraId(), unidadobrarenglon.getRenglonvarianteId(), f1, f2);
                salario = getSalarioInRV(unidadobrarenglon);
                salCertificado += volumenCertif * salario;
            }

            tx.commit();
            session.close();
            return salCertificado;
        } catch (HibernateException e) {
            if (tx != null) tx.rollback();
            e.printStackTrace();
        } finally {
            session.close();
        }

        return salCertificado;
    }

    public List<RecursosConvenioModel> getRecursosConvenioModelArrayList(String query) {
        System.out.println(query);
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            uoPlanCertConvModelArrayList = new ArrayList<>();

            List<Object[]> datosQuery = session.createQuery(query).getResultList();
            for (Object[] row : datosQuery) {
                Integer idCuad = Integer.parseInt(row[0].toString().trim());
                String codeuo = row[1].toString().trim();
                String descrip = row[2].toString().trim();
                String um = row[3].toString().trim();
                double hhplan = 0.0;
                if (row[5] != null) {
                    hhplan = Double.parseDouble(row[5].toString().trim());
                }
                Double hhcert = Double.parseDouble(row[6].toString().trim());

                if (row[4].toString().trim().contentEquals("2")) {
                    //     recursosConvenioModelArrayList.add(new RecursosConvenioModel(idCuad, codeuo, descrip, um, "Mano de Obra", hhplan, hhplan, hhcert, hhcert));
                } else if (row[4].toString().trim().contentEquals("3")) {
                    //   recursosConvenioModelArrayList.add(new RecursosConvenioModel(idCuad, codeuo, descrip, um, "Equipos", hhplan, hhplan, hhcert, hhcert));
                }

            }

            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return recursosConvenioModelArrayList;
    }

    public ArrayList<ImpactoReportModel> calcSalImpacto(String toString) {
        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            sal30 = null;
            sal15 = null;
            impacto = null;
            Query query = session.createSQLQuery(toString);
            impactoReportModels = new ArrayList<>();
            List<Object[]> empData = ((NativeQuery) query).list();
            impactoReportModels.addAll(empData.parallelStream().map(row -> {
                empresaBild = new StringBuilder().append(row[0].toString().trim()).append(" ").append(row[1].toString().trim());
                zonaBild = new StringBuilder().append(row[2].toString().trim()).append(" ").append(row[3].toString().trim());
                objetoBild = new StringBuilder().append(row[4].toString().trim()).append(" ").append(row[5].toString().trim());
                nivelBild = new StringBuilder().append(row[6].toString().trim()).append(" ").append(row[7].toString().trim());
                especialidadBild = new StringBuilder().append(row[8].toString().trim()).append(" ").append(row[9].toString().trim());
                subBild = new StringBuilder().append(row[10].toString().trim()).append(" ").append(row[11].toString().trim());

                uocode = new StringBuilder().append(row[12].toString().trim()).append(" ").append(row[13].toString().trim());

                sal30 = Double.parseDouble(row[18].toString().trim()) * getTarifa30(row[17].toString().trim());
                sal15 = Double.parseDouble(row[18].toString().trim()) * getTarifa15(row[17].toString().trim());
                impacto = sal15 - sal30;
                ImpactoReportModel impactoReportModel = new ImpactoReportModel(empresaBild.toString().trim(), zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), uocode.toString().trim(), row[14].toString().trim(), row[15].toString().trim(), row[16].toString().trim(), row[17].toString().trim(), Double.parseDouble(row[18].toString().trim()), getTarifa30(row[17].toString().trim()), sal30, getTarifa15(row[17].toString().trim()), sal15, impacto);
                return impactoReportModel;
            }).collect(Collectors.toList()));

            tx.commit();
            session.close();
            return impactoReportModels;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();

    }

    private Double getTarifa15(String grupEs) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            ta15 = 0.0;
            Query query = session.createQuery("FROM Salario WHERE id = 2");
            Salario salario = (Salario) query.getResultList().get(0);

            if (grupEs.contentEquals("II")) {
                ta15 = salario.getIi();
            } else if (grupEs.contentEquals("III")) {
                ta15 = salario.getIii();
            } else if (grupEs.contentEquals("IV")) {
                ta15 = salario.getIv();
            } else if (grupEs.contentEquals("V")) {
                ta15 = salario.getV();
            } else if (grupEs.contentEquals("VI")) {
                ta15 = salario.getVi();
            } else if (grupEs.contentEquals("VII")) {
                ta15 = salario.getVii();
            } else if (grupEs.contentEquals("VIII")) {
                ta15 = salario.getViii();
            }

            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return ta15;
    }

    private Double getTarifa30(String grupEs) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            ta30 = 0.0;
            Query query = session.createQuery("FROM Salario WHERE id = 1");
            Salario salario = (Salario) query.getResultList().get(0);

            if (grupEs.contentEquals("II")) {
                ta30 = salario.getIi();
            } else if (grupEs.contentEquals("III")) {
                ta30 = salario.getIii();
            } else if (grupEs.contentEquals("IV")) {
                ta30 = salario.getIv();
            } else if (grupEs.contentEquals("V")) {
                ta30 = salario.getV();
            } else if (grupEs.contentEquals("VI")) {
                ta30 = salario.getVi();
            } else if (grupEs.contentEquals("VII")) {
                ta30 = salario.getVii();
            } else if (grupEs.contentEquals("VIII")) {
                ta30 = salario.getViii();
            }

            tx.commit();
            session.close();
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return ta30;
    }

    public ArrayList<ObraRengVReport> getDatosObraRenglones(int niveles, String query) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            datosObraRenglon = new ArrayList<>();
            List<Object[]> datos = session.createQuery(query).getResultList();
            for (Object[] row : datos) {
                if (niveles == 1) {
                    if (row[0] != null) {
                        datosObraRenglon.add(new ObraRengVReport(row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), Double.parseDouble(row[3].toString().trim()), Double.parseDouble(row[4].toString().trim()), " ", " ", " ", " ", " ", " "));
                    }
                } else if (niveles == 2) {
                    if (row[0] != null) {
                        zonaBild = new StringBuilder().append(row[5].toString().trim()).append(" ").append(row[6].toString().trim());
                        datosObraRenglon.add(new ObraRengVReport(row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), Double.parseDouble(row[3].toString().trim()), Double.parseDouble(row[4].toString().trim()), zonaBild.toString().trim(), " ", " ", " ", " ", " "));
                    }
                } else if (niveles == 3) {
                    if (row[0] != null) {
                        zonaBild = new StringBuilder().append(row[5].toString().trim()).append(" ").append(row[6].toString().trim());
                        objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                        datosObraRenglon.add(new ObraRengVReport(row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), Double.parseDouble(row[3].toString().trim()), Double.parseDouble(row[4].toString().trim()), zonaBild.toString().trim(), objetoBild.toString().trim(), " ", " ", " ", " "));
                    }
                } else if (niveles == 4) {
                    if (row[0] != null) {
                        zonaBild = new StringBuilder().append(row[5].toString().trim()).append(" ").append(row[6].toString().trim());
                        objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                        nivelBild = new StringBuilder().append(row[9].toString().trim()).append(" ").append(row[10].toString().trim());
                        datosObraRenglon.add(new ObraRengVReport(row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), Double.parseDouble(row[3].toString().trim()), Double.parseDouble(row[4].toString().trim()), zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), " ", " ", " "));
                    }
                } else if (niveles == 5) {
                    if (row[0] != null) {
                        zonaBild = new StringBuilder().append(row[5].toString().trim()).append(" ").append(row[6].toString().trim());
                        objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                        nivelBild = new StringBuilder().append(row[9].toString().trim()).append(" ").append(row[10].toString().trim());
                        especialidadBild = new StringBuilder().append(row[11].toString().trim()).append(" ").append(row[12].toString().trim());
                        datosObraRenglon.add(new ObraRengVReport(row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), Double.parseDouble(row[3].toString().trim()), Double.parseDouble(row[4].toString().trim()), zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), " ", " "));
                    }
                } else if (niveles == 6) {
                    if (row[0] != null) {
                        zonaBild = new StringBuilder().append(row[5].toString().trim()).append(" ").append(row[6].toString().trim());
                        objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                        nivelBild = new StringBuilder().append(row[9].toString().trim()).append(" ").append(row[10].toString().trim());
                        especialidadBild = new StringBuilder().append(row[11].toString().trim()).append(" ").append(row[12].toString().trim());
                        subBild = new StringBuilder().append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                        datosObraRenglon.add(new ObraRengVReport(row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), Double.parseDouble(row[3].toString().trim()), Double.parseDouble(row[4].toString().trim()), zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), " "));
                    }
                } else if (niveles == 7) {
                    if (row[0] != null) {
                        zonaBild = new StringBuilder().append(row[5].toString().trim()).append(" ").append(row[6].toString().trim());
                        objetoBild = new StringBuilder().append(row[7].toString().trim()).append(" ").append(row[8].toString().trim());
                        nivelBild = new StringBuilder().append(row[9].toString().trim()).append(" ").append(row[10].toString().trim());
                        especialidadBild = new StringBuilder().append(row[11].toString().trim()).append(" ").append(row[12].toString().trim());
                        subBild = new StringBuilder().append(row[13].toString().trim()).append(" ").append(row[14].toString().trim());
                        empresaBild = new StringBuilder().append(row[15].toString().trim()).append(" ").append(row[16].toString().trim());
                        datosObraRenglon.add(new ObraRengVReport(row[0].toString().trim(), row[1].toString().trim(), row[2].toString().trim(), Double.parseDouble(row[3].toString().trim()), Double.parseDouble(row[4].toString().trim()), zonaBild.toString().trim(), objetoBild.toString().trim(), nivelBild.toString().trim(), especialidadBild.toString().trim(), subBild.toString().trim(), empresaBild.toString().trim()));
                    }
                }


            }
            tx.commit();
            session.close();
            return datosObraRenglon;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();
    }

    public ArrayList<CertificoModel> getDatosTocertificoPlan(ReportesController reportes, String
            query, String
                                                                     f1, String f2) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;
            certificoModelArrayList = new ArrayList<>();
            Query query1 = session.createQuery(query);
            String Cuad = null;
            for (Iterator it = ((org.hibernate.query.Query) query1).iterate(); it.hasNext(); ) {
                Object[] row = (Object[]) it.next();
                String Emp = row[0].toString().trim() + " " + row[1].toString().trim();
                String Brig = row[2].toString().trim() + " " + row[3].toString().trim();
                String Grup = row[4].toString().trim() + " " + row[5].toString().trim();
                if (row[6] != null) {
                    Cuad = row[6].toString().trim() + " " + row[7].toString().trim();
                } else {
                    Cuad = " ";
                }
                String Zona = row[8].toString().trim() + " " + row[9].toString().trim();
                String Objt = row[10].toString().trim() + " " + row[11].toString().trim();
                String Niv = row[12].toString().trim() + " " + row[13].toString().trim();
                String Esp = row[14].toString().trim() + " " + row[15].toString().trim();
                String Subesp = row[16].toString().trim() + " " + row[17].toString().trim();
                String UO = row[18].toString().trim();
                String UOdescr = row[19].toString().trim();
                Double cantCert = Double.parseDouble(row[20].toString().trim());
                String um = row[21].toString().trim();
                double coef = getCoeficienteSalObra(Integer.parseInt(row[23].toString().trim()));
                Double hHyHe = getHHyHECertificadasConveniosPlan(Integer.parseInt(row[23].toString().trim()), f1, f2, Integer.parseInt(row[24].toString().trim()));
                Double salarioMN = getUnidadObraValuesSalarioPlan(Integer.parseInt(row[23].toString().trim()), f1, f2, Integer.parseInt(row[24].toString().trim()));
                Double salariocuc = 0.0;
                Double costo = Double.parseDouble(row[22].toString().trim());

                certificoModelArrayList.add(new CertificoModel(Emp, Brig, Grup, Cuad, Zona, Objt, Niv, Esp, Subesp, UO, UOdescr, cantCert, um, hHyHe, cantCert * salarioMN, cantCert * salarioMN * coef, salariocuc, costo));

            }

            tx.commit();
            session.close();
            return certificoModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList();

    }

    public List<ConveniosReportModel> getDatosToPlanConveniosPlan(ReportesController reportes, String
            query, String
                                                                          qdatos, String qmano, String f1, String f2, String obra) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;

            List<UOPlanCertConvModel> temp = new ArrayList<>();
            temp = getDatosToConveniosPlanPlan(qdatos, f1, f2);

            conveniosGenericModelList = new ArrayList<>();
            conveniosReportModelArrayList = new ArrayList<>();
            List<Object[]> datos = session.createQuery(query).getResultList();
            for (Object[] row : datos) {
                conveniosGenericModelList.add(new ConveniosGenericModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), Integer.parseInt(row[3].toString().trim()), row[4].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[7].toString().trim() + " " + row[8].toString().trim(), Integer.parseInt(row[9].toString().trim()), row[10].toString().trim() + " " + row[11].toString().trim()));
            }

            for (ConveniosGenericModel conveniosGenericModel : conveniosGenericModelList.parallelStream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
                ArrayList<TableConvenios> tableConveniosArrayList = new ArrayList<>();
                tableConveniosArrayList = getTableStatic(conveniosGenericModel.getIdCuad(), 25);

                uoPlanCertConvModelArrayList = new ArrayList<>();
                uoPlanCertConvModelArrayList = getListSort(temp, conveniosGenericModel.getIdBrig(), conveniosGenericModel.getIdGrup(), conveniosGenericModel.getIdCuad());
                uoPlanCertConvModelArrayList.sort(Comparator.comparing(UOPlanCertConvModel::getUoCode));

                recursosConvenioModelArrayList = new ArrayList<>();
                conveniosReportModelArrayList.add(new ConveniosReportModel(conveniosGenericModel.getIdEmp(), conveniosGenericModel.getEmpresa(), conveniosGenericModel.getIdBrig(), conveniosGenericModel.getBrigada(), conveniosGenericModel.getIdGrup(), conveniosGenericModel.getGrupo(), conveniosGenericModel.getIdCuad(), conveniosGenericModel.getCuadrilla(), tableConveniosArrayList, uoPlanCertConvModelArrayList, recursosConvenioModelArrayList));

            }
            tx.commit();
            session.close();
            return conveniosReportModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();
    }

    public List<ConveniosReportModel> getDatosToConveniosPlan(ReportesController reportes, String
            query, String
                                                                      qdatos, String qmano, String f1, String f2, Obra obra) {

        Session session = ConnectionModel.createAppConnection().openSession();

        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            reportesController = reportes;

            List<UOPlanCertConvModel> temp = new ArrayList<>();
            temp = getDatosToConveniosPlan(qdatos, " ", f1, f2);

            conveniosGenericModelList = new ArrayList<>();
            conveniosReportModelArrayList = new ArrayList<>();
            List<Object[]> datos = session.createQuery(query).getResultList();
            for (Object[] row : datos) {
                conveniosGenericModelList.add(new ConveniosGenericModel(Integer.parseInt(row[0].toString().trim()), row[1].toString().trim() + " " + row[2].toString().trim(), Integer.parseInt(row[3].toString().trim()), row[4].toString().trim() + " " + row[5].toString().trim(), Integer.parseInt(row[6].toString().trim()), row[7].toString().trim() + " " + row[8].toString().trim(), Integer.parseInt(row[9].toString().trim()), row[10].toString().trim() + " " + row[11].toString().trim()));
            }

            for (ConveniosGenericModel conveniosGenericModel : conveniosGenericModelList.parallelStream().collect(Collectors.toSet()).stream().collect(Collectors.toList())) {
                ArrayList<TableConvenios> tableConveniosArrayList = new ArrayList<>();
                tableConveniosArrayList = getTableStatic(conveniosGenericModel.getIdCuad(), 25);

                uoPlanCertConvModelArrayList = new ArrayList<>();
                uoPlanCertConvModelArrayList = getListSort(temp, conveniosGenericModel.getIdBrig(), conveniosGenericModel.getIdGrup(), conveniosGenericModel.getIdCuad());
                uoPlanCertConvModelArrayList.sort(Comparator.comparing(UOPlanCertConvModel::getUoCode));

                recursosConvenioModelArrayList = new ArrayList<>();
                recursosConvenioModelArrayList.addAll(getListSortRecursosConvenioModel(conveniosGenericModel, f1, f2, obra));
                recursosConvenioModelArrayList.sort(Comparator.comparing(RecursosConvenioModel::getRecCode));
                conveniosReportModelArrayList.add(new ConveniosReportModel(conveniosGenericModel.getIdEmp(), conveniosGenericModel.getEmpresa(), conveniosGenericModel.getIdBrig(), conveniosGenericModel.getBrigada(), conveniosGenericModel.getIdGrup(), conveniosGenericModel.getGrupo(), conveniosGenericModel.getIdCuad(), conveniosGenericModel.getCuadrilla(), tableConveniosArrayList, uoPlanCertConvModelArrayList, recursosConvenioModelArrayList));
            }
            tx.commit();
            session.close();
            return conveniosReportModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();
    }

    public List<UOPlanCertConvModel> getDatosToConveniosPlanPlan(String query, String f1, String f2) {

        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();

            List<Tuple> datosConvenios = session.createQuery(query, Tuple.class).getResultList();
            uoPlanCertConvModelArrayList = new ArrayList<>();
            for (Tuple dato : datosConvenios) {
                String uocode = dato.get(3).toString().trim() + "|" + dato.get(4).toString().trim() + "|" + dato.get(5).toString().trim() + "|" + dato.get(6).toString().trim() + "|" + dato.get(7).toString().trim() + "|" + dato.get(8).toString().trim();
                double plnCant = 0.0;
                double certCant = 0.0;
                double horasplan = 0.0;
                double salpaln = 0.0;
                double horascert = 0.0;
                double salcert = 0.0;
                double plnProd = 0.0;
                double certProd = 0.0;
                double coef = getCoeficienteSalObra(Integer.parseInt(dato.get(11).toString().trim()));
                plnCant = Double.parseDouble(dato.get(10).toString().trim());
                horasplan = getHHyHECertificadasConveniosPlan(Integer.parseInt(dato.get(11).toString().trim()), f1, f2, Integer.parseInt(dato.get(15).toString().trim()));
                salpaln = getUnidadObraValuesSalarioPlan(Integer.parseInt(dato.get(11).toString().trim()), f1, f2, Integer.parseInt(dato.get(15).toString().trim()));
                plnProd = Double.parseDouble(dato.get(12).toString().trim()) + Double.parseDouble(dato.get(13).toString().trim()) + Double.parseDouble(dato.get(14).toString().trim());
                uoPlanCertConvModelArrayList.add(new UOPlanCertConvModel(Integer.parseInt(dato.get(0).toString().trim()), Integer.parseInt(dato.get(1).toString().trim()), Integer.parseInt(dato.get(2).toString().trim()), uocode, dato.get(9).toString().trim(), plnCant, horasplan, plnCant * salpaln, plnCant * salpaln * coef, plnProd, certCant, horascert, salcert, 0.0, certProd, " "));

            }
            tx.commit();
            session.close();
            return uoPlanCertConvModelArrayList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }

        return new ArrayList<>();
    }

    public double getCoeficienteSalObra(int idUO) {
        Unidadobra uo = util.getUnidadobra(idUO);
        double realCoef = 0.0;
        TarifaSalarial tarifa = uo.getObraByObraId().getTarifaSalarialByTarifa();
        double coef = tarifa.getAutEspecial() / 100;
        if (coef == 0.0) {
            realCoef = 0.0;
        } else {
            realCoef = new BigDecimal(String.format("%.2f", 1 + coef)).doubleValue();
        }
        return realCoef;
    }

    public List<ResumenHH> gerResumenHHCertificadas(String queryString, int idOb) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            resumenHHList = new ArrayList<>();
            List<Tuple> datos = session.createQuery(queryString, Tuple.class).getResultList();
            for (Tuple dato : datos) {
                double hhCant = gerResumenHHCertificadas(idOb, Integer.parseInt(dato.get(0).toString().trim()), Integer.parseInt(dato.get(3).toString().trim()), Integer.parseInt(dato.get(6).toString().trim()), Integer.parseInt(dato.get(9).toString().trim()), Integer.parseInt(dato.get(12).toString().trim()), Integer.parseInt(dato.get(15).toString().trim()));
                double heCant = gerResumenHeCertificadas(idOb, Integer.parseInt(dato.get(0).toString().trim()), Integer.parseInt(dato.get(3).toString().trim()), Integer.parseInt(dato.get(6).toString().trim()), Integer.parseInt(dato.get(9).toString().trim()), Integer.parseInt(dato.get(12).toString().trim()), Integer.parseInt(dato.get(15).toString().trim()));
                double hhCertCant = gerResumenHHCertVal(idOb, Integer.parseInt(dato.get(0).toString().trim()), Integer.parseInt(dato.get(3).toString().trim()), Integer.parseInt(dato.get(6).toString().trim()), Integer.parseInt(dato.get(9).toString().trim()), Integer.parseInt(dato.get(12).toString().trim()), Integer.parseInt(dato.get(15).toString().trim()));
                double heCertCant = gerResumenHeCertVal(idOb, Integer.parseInt(dato.get(0).toString().trim()), Integer.parseInt(dato.get(3).toString().trim()), Integer.parseInt(dato.get(6).toString().trim()), Integer.parseInt(dato.get(9).toString().trim()), Integer.parseInt(dato.get(12).toString().trim()), Integer.parseInt(dato.get(15).toString().trim()));
                double disphh = hhCant - hhCertCant;
                double disphe = heCant - heCertCant;
                resumenHHList.add(new ResumenHH(dato.get(1).toString().trim() + " " + dato.get(2).toString().trim(), dato.get(4).toString().trim() + " " + dato.get(5).toString().trim(), dato.get(7).toString().trim() + " " + dato.get(8).toString().trim(), dato.get(10).toString().trim() + " " + dato.get(11).toString().trim(), dato.get(13).toString().trim() + " " + dato.get(14).toString().trim(), dato.get(16).toString().trim() + " " + dato.get(17).toString().trim(), Math.round(hhCant * 100d) / 100d, Math.round(heCant * 100d) / 100d, Math.round(hhCertCant * 100d) / 100d, Math.round(heCertCant * 100d) / 100d, Math.round(disphh * 100d) / 100d, Math.round(disphe * 100d) / 100d));
            }
            tx.commit();
            session.close();
            return resumenHHList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return resumenHHList;

    }

    public List<ClCertifications> getDatosClCertificacion(String toString) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            List<ClCertifications> dataList = new ArrayList<>();
            List<Tuple> datos = session.createQuery(toString, Tuple.class).getResultList();
            for (Tuple dato : datos) {
                System.out.println(dato.get(0).toString());
                recursos = util.getSuministro(Integer.parseInt(dato.get(11).toString()));
                double presup = getDatosBajoEspecificacionCantidadTOClCertf(Integer.parseInt(dato.get(12).toString()), Integer.parseInt(dato.get(13).toString()), Integer.parseInt(dato.get(14).toString()), Integer.parseInt(dato.get(15).toString()), Integer.parseInt(dato.get(16).toString()), recursos.getId());
                dataList.add(new ClCertifications(dato.get(0).toString().trim() + " " + dato.get(1).toString().trim(), dato.get(2).toString().trim() + " " + dato.get(3).toString().trim(), dato.get(4).toString().trim() + " " + dato.get(5).toString().trim(), dato.get(6).toString().trim() + " " + dato.get(7).toString().trim(), recursos.getCodigo().trim(), recursos.getDescripcion().trim(), recursos.getUm(), presup, Double.parseDouble(dato.get(9).toString()), Double.parseDouble(dato.get(10).toString()), presup - Double.parseDouble(dato.get(9).toString()), presup - Double.parseDouble(dato.get(10).toString())));
            }
            tx.commit();
            session.close();
            return dataList;
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return new ArrayList<>();
    }

    public double getDatosBajoEspecificacionCantidadTOClCertf(int idObra, int idEmp, int idZon, int idOb,
                                                              int idEsp, int idSum) {
        Session session = ConnectionModel.createAppConnection().openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            List<ClCertifications> dataList = new ArrayList<>();

            List<Tuple> datos = session.createQuery("SELECT SUM(bajo.cantidad) FROM Unidadobra uo INNER JOIN Empresaconstructora ec ON uo.empresaconstructoraId = ec.id INNER JOIN Zonas zon ON uo.zonasId = zon.id INNER JOIN Objetos obj ON uo.objetosId = obj.id INNER JOIN Especialidades esp ON uo.especialidadesId = esp.id LEFT JOIN Bajoespecificacion bajo ON uo.id = bajo.unidadobraId WHERE  uo.obraId =: idO AND uo.empresaconstructoraId =:e AND uo.zonasId =: z AND uo.objetosId =: obj AND uo.especialidadesId =: es AND bajo.idSuministro =: baj", Tuple.class).setParameter("idO", idObra).setParameter("e", idEmp).setParameter("z", idZon).setParameter("obj", idOb).setParameter("es", idEsp).setParameter("baj", idSum).getResultList();
            tx.commit();
            session.close();
            return Double.parseDouble(datos.get(0).get(0).toString());
        } catch (HibernateException he) {
            if (tx != null) tx.rollback();
            he.printStackTrace();
        } finally {
            session.close();
        }
        return 0.0;
    }

}

